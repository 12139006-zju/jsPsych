{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 jsPsych is a JavaScript library for running behavioral experiments in a web browser. The library provides a flexible framework for building a wide range of laboratory-like experiments that can be run online. To use jsPsych, you provide a description of the experiment in the form of a timeline . jsPsych handles things like determining which trial to run next, storing data, and randomization. jsPsych uses plugins to define what to do at each point on the timeline. Plugins are ready-made templates for simple experimental tasks like displaying instructions or displaying a stimulus and collecting a keyboard response. Plugins are very flexible to support a wide variety of experiments. It is easy to create your own plugin if you have experience with JavaScript programming. The page on timelines is a good place to start learning about jsPsych. From there, you might want to complete the Hello World! tutorial and the reaction time experiment tutorial .","title":"Introduction"},{"location":"#_1","text":"jsPsych is a JavaScript library for running behavioral experiments in a web browser. The library provides a flexible framework for building a wide range of laboratory-like experiments that can be run online. To use jsPsych, you provide a description of the experiment in the form of a timeline . jsPsych handles things like determining which trial to run next, storing data, and randomization. jsPsych uses plugins to define what to do at each point on the timeline. Plugins are ready-made templates for simple experimental tasks like displaying instructions or displaying a stimulus and collecting a keyboard response. Plugins are very flexible to support a wide variety of experiments. It is easy to create your own plugin if you have experience with JavaScript programming. The page on timelines is a good place to start learning about jsPsych. From there, you might want to complete the Hello World! tutorial and the reaction time experiment tutorial .","title":""},{"location":"about/about/","text":"About jsPsych \u00b6 jsPsych was created by Josh de Leeuw . There have been many other contributors to the library; thanks to all of them! Citation \u00b6 If you use jsPsych for academic work please cite the following paper. de Leeuw, J. R. (2015). jsPsych: A JavaScript library for creating behavioral experiments in a web browser. Behavior Research Methods , 47 (1), 1-12. doi:10.3758/s13428-014-0458-y. Response times \u00b6 Wondering if jsPsych can be used for research that depends on accurate response time measurement? For most purposes, the answer is yes. Response time measurements in jsPsych (and JavaScript in general) are comparable to those taken in standard lab software like Psychophysics Toolbox and E-Prime. Response times measured in JavaScript tend to be a little bit longer (10-40ms), but have similar variance. See the following references for extensive work on this topic. de Leeuw, J. R., & Motz, B. A. (2016). Psychophysics in a Web browser? Comparing response times collected with JavaScript and Psychophysics Toolbox in a visual search task. Behavior Research Methods , 48 (1), 1-12. Hilbig, B. E. (2016). Reaction time effects in lab- versus web-based research: Experimental evidence. Behavior Research Methods , 48 (4), 1718-1724. Pinet, S., Zielinski, C., Math\u00f4t, S. et al. (in press). Measuring sequences of keystrokes with jsPsych: Reliability of response times and interkeystroke intervals. Behavior Research Methods . Reimers, S., & Stewart, N. (2015). Presentation and response time accuracy in Adobe Flash and HTML5/JavaScript Web experiments. Behavior Research Methods , 47 (2), 309-327.","title":"About jsPsych"},{"location":"about/about/#about-jspsych","text":"jsPsych was created by Josh de Leeuw . There have been many other contributors to the library; thanks to all of them!","title":"About jsPsych"},{"location":"about/about/#citation","text":"If you use jsPsych for academic work please cite the following paper. de Leeuw, J. R. (2015). jsPsych: A JavaScript library for creating behavioral experiments in a web browser. Behavior Research Methods , 47 (1), 1-12. doi:10.3758/s13428-014-0458-y.","title":"Citation"},{"location":"about/about/#response-times","text":"Wondering if jsPsych can be used for research that depends on accurate response time measurement? For most purposes, the answer is yes. Response time measurements in jsPsych (and JavaScript in general) are comparable to those taken in standard lab software like Psychophysics Toolbox and E-Prime. Response times measured in JavaScript tend to be a little bit longer (10-40ms), but have similar variance. See the following references for extensive work on this topic. de Leeuw, J. R., & Motz, B. A. (2016). Psychophysics in a Web browser? Comparing response times collected with JavaScript and Psychophysics Toolbox in a visual search task. Behavior Research Methods , 48 (1), 1-12. Hilbig, B. E. (2016). Reaction time effects in lab- versus web-based research: Experimental evidence. Behavior Research Methods , 48 (4), 1718-1724. Pinet, S., Zielinski, C., Math\u00f4t, S. et al. (in press). Measuring sequences of keystrokes with jsPsych: Reliability of response times and interkeystroke intervals. Behavior Research Methods . Reimers, S., & Stewart, N. (2015). Presentation and response time accuracy in Adobe Flash and HTML5/JavaScript Web experiments. Behavior Research Methods , 47 (2), 309-327.","title":"Response times"},{"location":"about/contributing/","text":"Contributing to jsPsych \u00b6 Contributions to jsPsych are welcome! All of the code is managed through the GitHub repository. Steps for modifying the code \u00b6 Discuss the proposed change \u00b6 If you have a specific modification in mind -- for instance, a new feature or bug fix -- please open a new issue via GitHub . Describe the proposed change and what functionality it adds to the library and/or what problem it solves. If you are interested in adding a new plugin to the library, it helps if you post an example of the plugin in use and describe the different use cases of the plugin (for more guidance, see the \"Writing new plugins\" section below). If you are thinking about proposing a change but not at the point where you have a specific modification to the code base in mind, then it might be helpful to discuss the issue first on GitHub Discussions . Discussion posts can be useful for sharing code and getting feedback before requesting a change to the library. Fork the library and modify the code \u00b6 To make changes to the code, you should fork the jsPsych library via GitHub and make modifications on your fork. You may find it useful to make modifications on branches, so that you can keep your proposed changes separate from any other unrelated changes you might want to make on your fork. Submit a pull request \u00b6 Once your modification is complete, submit a pull request to merge your changes into the master branch of the main repository. Pull requests will be reviewed by the project team. Writing new plugins \u00b6 New plugins are welcome additions to the library. Plugins can be distributed independently of the main library or added to the GitHub repository via a pull request, following the process described above. If you want to add your plugin to the main library then there are a few guidelines to follow. Make the plugin as general as possible \u00b6 Plugins are most useful when they are flexible. Avoid fixing the value of parameters that could be variables. This is especially important for any text that displays on the screen in order to facilitate use in multiple languages. Use the jsPsych.pluginAPI module when appropriate \u00b6 The pluginAPI module contains functions relevant to plugin development. Avoid duplicating the functions defined within the library in your plugin, and instead use the pluginAPI whenever possible. If you have a suggestion for improving pluginAPI methods, then go ahead and submit a pull request to modify it directly. Document your plugin \u00b6 When submitting a pull request to add your plugin, make sure to include a documentation page in the same style as the other docs pages. Documentation files exist in the docs directory. Include an example file \u00b6 Write a short example HTML file to include in the examples directory. This should demonstrate the basic use cases of the plugin as clearly as possible. Include a testing file \u00b6 Automated code testing for jsPsych is implemented with Jest . To run the tests, install Node and npm. Run npm install in the root jsPsych directory. Then run npm test . Plugins should have a testing file that validates the behavior of all the plugin parameters. See the /tests/plugins directory for examples.","title":"Contributing to jsPsych"},{"location":"about/contributing/#contributing-to-jspsych","text":"Contributions to jsPsych are welcome! All of the code is managed through the GitHub repository.","title":"Contributing to jsPsych"},{"location":"about/contributing/#steps-for-modifying-the-code","text":"","title":"Steps for modifying the code"},{"location":"about/contributing/#discuss-the-proposed-change","text":"If you have a specific modification in mind -- for instance, a new feature or bug fix -- please open a new issue via GitHub . Describe the proposed change and what functionality it adds to the library and/or what problem it solves. If you are interested in adding a new plugin to the library, it helps if you post an example of the plugin in use and describe the different use cases of the plugin (for more guidance, see the \"Writing new plugins\" section below). If you are thinking about proposing a change but not at the point where you have a specific modification to the code base in mind, then it might be helpful to discuss the issue first on GitHub Discussions . Discussion posts can be useful for sharing code and getting feedback before requesting a change to the library.","title":"Discuss the proposed change"},{"location":"about/contributing/#fork-the-library-and-modify-the-code","text":"To make changes to the code, you should fork the jsPsych library via GitHub and make modifications on your fork. You may find it useful to make modifications on branches, so that you can keep your proposed changes separate from any other unrelated changes you might want to make on your fork.","title":"Fork the library and modify the code"},{"location":"about/contributing/#submit-a-pull-request","text":"Once your modification is complete, submit a pull request to merge your changes into the master branch of the main repository. Pull requests will be reviewed by the project team.","title":"Submit a pull request"},{"location":"about/contributing/#writing-new-plugins","text":"New plugins are welcome additions to the library. Plugins can be distributed independently of the main library or added to the GitHub repository via a pull request, following the process described above. If you want to add your plugin to the main library then there are a few guidelines to follow.","title":"Writing new plugins"},{"location":"about/contributing/#make-the-plugin-as-general-as-possible","text":"Plugins are most useful when they are flexible. Avoid fixing the value of parameters that could be variables. This is especially important for any text that displays on the screen in order to facilitate use in multiple languages.","title":"Make the plugin as general as possible"},{"location":"about/contributing/#use-the-jspsychpluginapi-module-when-appropriate","text":"The pluginAPI module contains functions relevant to plugin development. Avoid duplicating the functions defined within the library in your plugin, and instead use the pluginAPI whenever possible. If you have a suggestion for improving pluginAPI methods, then go ahead and submit a pull request to modify it directly.","title":"Use the jsPsych.pluginAPI module when appropriate"},{"location":"about/contributing/#document-your-plugin","text":"When submitting a pull request to add your plugin, make sure to include a documentation page in the same style as the other docs pages. Documentation files exist in the docs directory.","title":"Document your plugin"},{"location":"about/contributing/#include-an-example-file","text":"Write a short example HTML file to include in the examples directory. This should demonstrate the basic use cases of the plugin as clearly as possible.","title":"Include an example file"},{"location":"about/contributing/#include-a-testing-file","text":"Automated code testing for jsPsych is implemented with Jest . To run the tests, install Node and npm. Run npm install in the root jsPsych directory. Then run npm test . Plugins should have a testing file that validates the behavior of all the plugin parameters. See the /tests/plugins directory for examples.","title":"Include a testing file"},{"location":"about/license/","text":"License \u00b6 jsPsych is licensed under the MIT license. The MIT License (MIT) Copyright (c) 2019 Joshua R. de Leeuw Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"jsPsych is licensed under the MIT license. The MIT License (MIT) Copyright (c) 2019 Joshua R. de Leeuw Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/support/","text":"Support \u00b6 For questions about jsPsych the preferred method of support is via GitHub Discussions . Questions are most likely to be answered when they include a reproducible example of the problem. If you can make your code available online and link to the experiment, that will make the question easier to answer. If you have identified a problem with jsPsych, such as a bug in the code or an error in the documentation, please open a new issue on the GitHub site. And if you have a suggestion for fixing the problem, feel free to propose a modification by following the steps in the Contribuitng to jsPsych page. Inquiries for paid consultation to develop experiments using jsPsych or to create new custom jsPsych features can be sent to josh.deleeuw@gmail.com .","title":"Getting Help"},{"location":"about/support/#support","text":"For questions about jsPsych the preferred method of support is via GitHub Discussions . Questions are most likely to be answered when they include a reproducible example of the problem. If you can make your code available online and link to the experiment, that will make the question easier to answer. If you have identified a problem with jsPsych, such as a bug in the code or an error in the documentation, please open a new issue on the GitHub site. And if you have a suggestion for fixing the problem, feel free to propose a modification by following the steps in the Contribuitng to jsPsych page. Inquiries for paid consultation to develop experiments using jsPsych or to create new custom jsPsych features can be sent to josh.deleeuw@gmail.com .","title":"Support"},{"location":"core_library/jspsych-core/","text":"The jsPsych core library \u00b6 jsPsych.addNodeToEndOfTimeline \u00b6 jsPsych.addNodeToEndOfTimeline(node_parameters, callback) Parameters \u00b6 Parameter Type Description node_parameters object An object defining a timeline. It must have, at a minimum, a timeline parameter with a valid timeline array as the value for that parameter. callback function An optional callback function. If adding the node to the timeline requires any preloading of media assets, this callback will be triggered after preloading is compelte. Return value \u00b6 None. Description \u00b6 Adds the timeline to the end of the experiment. Examples \u00b6 Without callback \u00b6 var trial = { type : 'html-keyboard-response' , stimulus : 'This is a new trial.' } var new_timeline = { timeline : [ trial ] } jsPsych . addNodeToEndOfTimeline ( new_timeline ) With callback \u00b6 var first = { type : 'html-keyboard-response' , stimulus : 'first trial; new trial added when on_finish is called' , on_finish : function (){ jsPsych . pauseExperiment (); jsPsych . addNodeToEndOfTimeline ({ timeline : [{ type : 'image-keyboard-response' , stimulus : 'img/happy_face_4.jpg' }] }, jsPsych . resumeExperiment ) } } jsPsych.currentTimelineNodeID \u00b6 jsPsych.currentTimelineNodeID() Parameters \u00b6 None. Return value \u00b6 Returns the ID of the TimelineNode that is currently active. Description \u00b6 Gets the ID of the active TimelineNode. The ID is a string that follows a specific format: \"0.0\" is the ID of the first top-level TimelineNode \"1.0\" is the ID of the second top-level TimelineNode \"2.0\" is the ID of the third top-level TimelineNode, and so on... If a TimelineNode iterates multiple times (using the loop function, for example), then the iterations are indicated in the second number: \"0.0\" is the ID of the first top-level TimelineNode during the first iteration \"0.1\" is the ID of the first top-level TimelineNode during the second iteration \"0.2\" is the ID of the first top-level TimelineNode during the third iteration, and so on... If TimelineNodes are nested in other TimelineNodes, then the hierarchical structure is shown with \".\" : \"0.0-1.0\" is the ID of the second TimelineNode on the timeline of the first top-level TimelineNode. \"0.0-2.0\" is the ID of the third TimelineNode on the timeline of the first top-level TimelineNode, and so on... The rules about iterations apply throughout the hierarchical ID: \"0.2-1.3\" is the ID of the second TimelineNode, executing for the fourth time, on the timeline of the first top-level TimelineNode, executing for the third time. Example \u00b6 var id = jsPsych . currentTimelineNodeID (); console . log ( 'The current TimelineNode ID is ' + id ); jsPsych.currentTrial \u00b6 jsPsych.currentTrial() Parameters \u00b6 None. Return value \u00b6 Returns the object describing the current trial. The object will contain all of the parameters associated with the current trial. Description \u00b6 Get a description of the current trial Example \u00b6 var trial = jsPsych . currentTrial (); console . log ( 'The current trial is using the ' + trial . type + ' plugin' ); jsPsych.endCurrentTimeline \u00b6 jsPsych.endCurrentTimeline Parameters \u00b6 None. Return value \u00b6 None. Description \u00b6 Ends the current timeline. If timelines are nested, then only the timeline that contains the current trial is ended. Example \u00b6 Loop indefinitely until a particular key is pressed \u00b6 var images = [ \"img/1.gif\" , \"img/2.gif\" , \"img/3.gif\" , \"img/4.gif\" , \"img/5.gif\" , \"img/6.gif\" , \"img/7.gif\" , \"img/8.gif\" , \"img/9.gif\" , \"img/10.gif\" ]; var trials = []; for ( var i = 0 ; i < images . length ; i ++ ) { trials . push ({ stimulus : images [ i ] }); } var block = { type : 'image-keyboard-response' , choices : [ 89 , 78 ], // Y or N prompt : '<p>Press Y to Continue. Press N to end this node of the experiment.</p>' , on_finish : function ( data ) { if ( data . key_press == 78 ) { jsPsych . endCurrentTimeline (); } }, timeline : trials } var after_block = { type : 'html-keyboard-response' , stimulus : '<p>The next node</p>' , is_html : true } jsPsych . init ({ timeline : [ block , after_block ], on_finish : function () { jsPsych . data . displayData (); } }); jsPsych.endExperiment \u00b6 jsPsych.endExperiment(end_message) Parameters \u00b6 Parameter Type Description end_message string A message to display on the screen after the experiment is over. Return value \u00b6 None. Description \u00b6 Ends the experiment, skipping all remaining trials. Example \u00b6 End the experiment if a particular response is given \u00b6 var trial = { type : 'image-keyboard-response' , stimulus : 'image1.jpg' , choices : [ 89 , 78 ], // Y or N prompt : '<p>Press Y to Continue. Press N to end the experiment</p>' , on_finish : function ( data ){ if ( data . key_press == 78 ){ jsPsych . endExperiment ( 'The experiment was ended by pressing N.' ); } } } jsPsych.finishTrial \u00b6 jsPsych.finishTrial(data) Parameters \u00b6 Parameter Type Description data object The data to store for the trial. Return value \u00b6 Returns nothing. Description \u00b6 This method tells jsPsych that the current trial is over. It is used in all of the plugins to end the current trial. When the trial ends a few things happen: The data is stored using jsPsych.data.write() The on_finish callback function is executed for the trial The on_trial_finish callback function is executed The progress bar is updated if it is being displayed The experiment ends if the trial is the last one (and the on_finish callback function is executed). The next trial, if one exists, is started. Example \u00b6 // this code would be in a plugin jsPsych . finishTrial ({ correct_response : true }); jsPsych.getDisplayElement \u00b6 jsPsych.getDisplayElement() Parameters \u00b6 None. Return value \u00b6 Returns the HTML DOM element used for displaying the experiment. Description \u00b6 Get the DOM element that displays the experiment. Example \u00b6 var el = jsPsych . getDisplayElement (); // hide the jsPsych display el . style . visibility = 'hidden' ; jsPsych.getProgressBarCompleted \u00b6 jsPsych.getProgressBarCompleted() Parameters \u00b6 None. Return value \u00b6 Returns a value between 0 and 1 representing how full the progress bar currently is. Description \u00b6 Used to get the current value of the progress bar. Works for automated and manual control. Example \u00b6 var progress_bar_amount = jsPsych . getProgressBarCompleted (); jsPsych.init \u00b6 jsPsych.init(settings) Parameters \u00b6 Parameter Type Description settings object The settings object for initializing jsPsych. See table below. The settings object can contain several parameters. The only required parameter is timeline . Parameter Type Description timeline array An array containing the objects that describe the experiment timeline. See Creating an Experiment: The Timeline . display_element string The ID of an HTML element to display the experiment in. If left blank, jsPsych will use the <body> element to display content. All keyboard event listeners are bound to this element. In order for a keyboard event to be detected, this element must have focus (be the last thing that the subject clicked on). on_finish function Function to execute when the experiment ends. on_trial_start function Function to execute when a new trial begins. on_trial_finish function Function to execute when a trial ends. on_data_update function Function to execute every time data is stored using the jsPsych.data.write method. All plugins use this method to save data (via a call to jsPsych.finishTrial , so this function runs every time a plugin stores new data. on_interaction_data_update function Function to execute every time a new interaction event occurs. Interaction events include clicking on a different window (blur), returning to the experiment window (focus), entering full screen mode (fullscreenenter), and exiting full screen mode (fullscreenexit). on_close function Function to execute when the user leaves the page. Can be used, for example, to save data before the page is closed. exclusions object Specifies restrictions on the browser the subject can use to complete the experiment. See list of options below. show_progress_bar boolean If true, then a progress bar is shown at the top of the page. message_progress_bar string Message to display next to the progress bar. The default is 'Completion Progress'. auto_update_progress_bar boolean If true, then the progress bar at the top of the page will automatically update as every top-level timeline or trial is completed. show_preload_progress_bar boolean If true, then a progress bar is displayed while media files are automatically preloaded. preload_audio array An array of audio files to preload before starting the experiment. preload_images array An array of image files to preload before starting the experiment. preload_video array An array of video files to preload before starting the experiment. max_load_time numeric The maximum number of milliseconds to wait for content to preload. If the wait time is exceeded an error message is displayed and the experiment stops. The default value is 60 seconds. max_preload_attempts numeric The maximum number of attempts to preload each file in case of an error. The default value is 10. There is a small delay of 200ms between each attempt. use_webaudio boolean If false, then jsPsych will not attempt to use the WebAudio API for audio playback. Instead, HTML5 Audio objects will be used. The WebAudio API offers more precise control over the timing of audio events, and should be used when possible. The default value is true. default_iti numeric The default inter-trial interval in ms. The default value if none is specified is 0ms. experiment_width numeric The desired width of the jsPsych container in pixels. If left undefined, the width will be 100% of the display element. Usually this is the <body> element, and the width will be 100% of the screen size. minimum_valid_rt numeric The minimum valid response time for key presses during the experiment. Any key press response time that is less than this value will be treated as invalid and ignored. Note that this parameter only applies to keyboard responses , and not to other response types such as buttons and sliders. The default value is 0. override_safe_mode boolean Running a jsPsych experiment directly in a web browser (e.g., by double clicking on a local HTML file) will load the page using the file:// protocol. Some features of jsPsych don't work with this protocol. By default, when jsPsych detects that it's running on a page loaded via the file:// protocol, it runs in safe mode , which automatically disables features that don't work in this context. Specifically, the use of Web Audio is disabled (audio will be played using HTML5 audio instead, even if use_webaudio is true ) and video preloading is disabled (both automatic preloading and manual preloading via preload_video ). The override_safe_mode parameter defaults to false , but you can set it to true to force these features to operate under the file:// protocol. In order for this to work, you will need to disable web security (CORS) features in your browser - this is safe to do if you know what you are doing. Note that this parameter has no effect when you are running the experiment on a web server, because the page will be loaded via the http:// or https:// protocol. Possible values for the exclusions parameter above. Parameter Type Description min_width numeric The minimum width of the browser window. If the width is below this value, a message will be displayed to the subject asking them to maximize their browser window. The experiment will sit on this page until the browser window is large enough. min_height numeric Same as above, but with height. audio boolean Set to true to require support for the WebAudio API (used by plugins that play audio files). Return value \u00b6 Returns nothing. Description \u00b6 This method configures and starts the experiment. Example \u00b6 See any of the plugin examples in the examples folder in the GitHub repository. jsPsych.initSettings \u00b6 jsPsych.initSettings() Parameters \u00b6 None Return value \u00b6 Returns the settings object used to initialize the experiment. Description \u00b6 Gets the object containing the settings for the current experiment. Example \u00b6 var settings = jsPsych . initSettings (); // check the experiment structure console . log ( JSON . stringify ( settings . timeline )); jsPsych.pauseExperiment \u00b6 jsPsych.pauseExperiment() Parameters \u00b6 None. Return value \u00b6 None. Description \u00b6 Pauses the experiment. The experiment will finish the current trial, but will not execute any additional trials until jsPsych.resumeExperiment() is called. Example \u00b6 var trial = { type : 'html-keyboard-response' , stimulus : 'Press p to take a 30 second break. Otherwise, press c to continue immediately.' , choices : [ 'p' , 'c' ], on_finish : function ( data ){ if ( data . key_press == 80 ) { // 80 = p jsPsych . pauseExperiment (); setTimeout ( jsPsych . resumeExperiment , 30000 ); } } } jsPsych.progress \u00b6 jsPsych.progress() Parameters \u00b6 None. Return value \u00b6 Returns an object with the following properties: Property Type Description total_trials numeric Indicates the number of trials in the experiment. Note that this does not count possible loops or skipped trials due to conditional statements. current_trial_global numeric Returns the trial index of the current trial in a global scope. Every trial will increase this count by 1. percent_complete numeric Estimates the percent of the experiment that is complete. Works as expected for experiments without conditional or looping timelines. For complex timelines, the percent is an approximation. Description \u00b6 This method returns information about the length of the experiment and the subject's current location in the experiment timeline. Example \u00b6 var progress = jsPsych . progress (); alert ( 'You have completed approximately ' + progress . percent_complete + '% of the experiment' ); jsPsych.resumeExperiment \u00b6 jsPsych.resumeExperiment() Parameters \u00b6 None. Return value \u00b6 None. Description \u00b6 Resumes the experiment after a call to jsPsych.pauseExperiment() . If the post trial delay ( post_trial_gap ) has not yet been reached, then the experiment will not continue until the delay is finished. For example, if post_trial_gap was 10,000ms and jsPsych.resumeExperiment() was called 6,000ms after the previous trial finished, then the experiment would not continue for another 4,000ms. Example \u00b6 var trial = { type : 'html-keyboard-response' , stimulus : 'Press p to take a 30 second break. Otherwise, press c to continue immediately.' , choices : [ 'p' , 'c' ], on_finish : function ( data ){ if ( data . key_press == 80 ) { // 80 = p jsPsych . pauseExperiment (); setTimeout ( jsPsych . resumeExperiment , 30000 ); } } } jsPsych.setProgressBar \u00b6 jsPsych.setProgressBar(value) Parameters \u00b6 Parameter Type Description value numeric Proprotion (between 0 and 1) to fill the progress bar. Return value \u00b6 None. Description \u00b6 Set the progress bar to a custom amount. Proportion must be between 0 and 1. Values larger than 1 are treated as 1. Example \u00b6 jsPsych . setProgressBar ( 0.85 ); jsPsych.startTime \u00b6 jsPsych.startTime() Parameters \u00b6 None. Return value \u00b6 Returns a Date object indicating when the experiment began. Description \u00b6 Get the time that the experiment began. Example \u00b6 var start_time = jsPsych . startTime (); jsPsych.timelineVariable \u00b6 jsPsych.timelineVariable(variable, call_immediate) Parameters \u00b6 Parameter Type Description variable string Name of the timeline variable call_immediate bool Typically this parameter is false , or simply ommitted. When false , the return value is a function that returns the timeline variable. This makes jsPsych.timelineVariable suitable for dynamic parameters by default. If true the function returns the value of the timeline variable immediately. Return value \u00b6 Depends on the value of call_immediate parameter. See description above. Description \u00b6 Timeline variables are a powerful technique for generating experiments with repetitive procedures but different parameter values. This function fetches the current value of a particular timeline variable. It must be used in conjunction with a timeline that has timeline variables. See the timeline variable section for details. Examples \u00b6 Standard use as a parameter for a trial \u00b6 var trial = { type : 'image-keyboard-response' , stimulus : jsPsych . timelineVariable ( 'image' ) } var procedure = { timeline : [ trial ], timeline_variables : [ { image : 'face1.png' }, { image : 'face2.png' }, { image : 'face3.png' }, { image : 'face4.png' } ] } Invoking immediately in a function \u00b6 var trial = { type : 'html-keyboard-response' , stimulus : function (){ return \"<img style='width:100px; height:100px;' src='\" + jsPsych . timelineVariable ( 'image' , true ) + \"'></img>\" ; } } var procedure = { timeline : [ trial ], timeline_variables : [ { image : 'face1.png' }, { image : 'face2.png' }, { image : 'face3.png' }, { image : 'face4.png' } ] } jsPsych.totalTime \u00b6 jsPsych.totalTime() Parameters \u00b6 None. Return value \u00b6 Returns a numeric value indicating the number of milliseconds since jsPsych.init was called. Description \u00b6 Gets the total time the subject has been in the experiment. Example \u00b6 var time = jsPsych . totalTime (); console . log ( time );","title":"jsPsych"},{"location":"core_library/jspsych-core/#the-jspsych-core-library","text":"","title":"The jsPsych core library"},{"location":"core_library/jspsych-core/#jspsychaddnodetoendoftimeline","text":"jsPsych.addNodeToEndOfTimeline(node_parameters, callback)","title":"jsPsych.addNodeToEndOfTimeline"},{"location":"core_library/jspsych-core/#parameters","text":"Parameter Type Description node_parameters object An object defining a timeline. It must have, at a minimum, a timeline parameter with a valid timeline array as the value for that parameter. callback function An optional callback function. If adding the node to the timeline requires any preloading of media assets, this callback will be triggered after preloading is compelte.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value","text":"None.","title":"Return value"},{"location":"core_library/jspsych-core/#description","text":"Adds the timeline to the end of the experiment.","title":"Description"},{"location":"core_library/jspsych-core/#examples","text":"","title":"Examples"},{"location":"core_library/jspsych-core/#without-callback","text":"var trial = { type : 'html-keyboard-response' , stimulus : 'This is a new trial.' } var new_timeline = { timeline : [ trial ] } jsPsych . addNodeToEndOfTimeline ( new_timeline )","title":"Without callback"},{"location":"core_library/jspsych-core/#with-callback","text":"var first = { type : 'html-keyboard-response' , stimulus : 'first trial; new trial added when on_finish is called' , on_finish : function (){ jsPsych . pauseExperiment (); jsPsych . addNodeToEndOfTimeline ({ timeline : [{ type : 'image-keyboard-response' , stimulus : 'img/happy_face_4.jpg' }] }, jsPsych . resumeExperiment ) } }","title":"With callback"},{"location":"core_library/jspsych-core/#jspsychcurrenttimelinenodeid","text":"jsPsych.currentTimelineNodeID()","title":"jsPsych.currentTimelineNodeID"},{"location":"core_library/jspsych-core/#parameters_1","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_1","text":"Returns the ID of the TimelineNode that is currently active.","title":"Return value"},{"location":"core_library/jspsych-core/#description_1","text":"Gets the ID of the active TimelineNode. The ID is a string that follows a specific format: \"0.0\" is the ID of the first top-level TimelineNode \"1.0\" is the ID of the second top-level TimelineNode \"2.0\" is the ID of the third top-level TimelineNode, and so on... If a TimelineNode iterates multiple times (using the loop function, for example), then the iterations are indicated in the second number: \"0.0\" is the ID of the first top-level TimelineNode during the first iteration \"0.1\" is the ID of the first top-level TimelineNode during the second iteration \"0.2\" is the ID of the first top-level TimelineNode during the third iteration, and so on... If TimelineNodes are nested in other TimelineNodes, then the hierarchical structure is shown with \".\" : \"0.0-1.0\" is the ID of the second TimelineNode on the timeline of the first top-level TimelineNode. \"0.0-2.0\" is the ID of the third TimelineNode on the timeline of the first top-level TimelineNode, and so on... The rules about iterations apply throughout the hierarchical ID: \"0.2-1.3\" is the ID of the second TimelineNode, executing for the fourth time, on the timeline of the first top-level TimelineNode, executing for the third time.","title":"Description"},{"location":"core_library/jspsych-core/#example","text":"var id = jsPsych . currentTimelineNodeID (); console . log ( 'The current TimelineNode ID is ' + id );","title":"Example"},{"location":"core_library/jspsych-core/#jspsychcurrenttrial","text":"jsPsych.currentTrial()","title":"jsPsych.currentTrial"},{"location":"core_library/jspsych-core/#parameters_2","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_2","text":"Returns the object describing the current trial. The object will contain all of the parameters associated with the current trial.","title":"Return value"},{"location":"core_library/jspsych-core/#description_2","text":"Get a description of the current trial","title":"Description"},{"location":"core_library/jspsych-core/#example_1","text":"var trial = jsPsych . currentTrial (); console . log ( 'The current trial is using the ' + trial . type + ' plugin' );","title":"Example"},{"location":"core_library/jspsych-core/#jspsychendcurrenttimeline","text":"jsPsych.endCurrentTimeline","title":"jsPsych.endCurrentTimeline"},{"location":"core_library/jspsych-core/#parameters_3","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_3","text":"None.","title":"Return value"},{"location":"core_library/jspsych-core/#description_3","text":"Ends the current timeline. If timelines are nested, then only the timeline that contains the current trial is ended.","title":"Description"},{"location":"core_library/jspsych-core/#example_2","text":"","title":"Example"},{"location":"core_library/jspsych-core/#loop-indefinitely-until-a-particular-key-is-pressed","text":"var images = [ \"img/1.gif\" , \"img/2.gif\" , \"img/3.gif\" , \"img/4.gif\" , \"img/5.gif\" , \"img/6.gif\" , \"img/7.gif\" , \"img/8.gif\" , \"img/9.gif\" , \"img/10.gif\" ]; var trials = []; for ( var i = 0 ; i < images . length ; i ++ ) { trials . push ({ stimulus : images [ i ] }); } var block = { type : 'image-keyboard-response' , choices : [ 89 , 78 ], // Y or N prompt : '<p>Press Y to Continue. Press N to end this node of the experiment.</p>' , on_finish : function ( data ) { if ( data . key_press == 78 ) { jsPsych . endCurrentTimeline (); } }, timeline : trials } var after_block = { type : 'html-keyboard-response' , stimulus : '<p>The next node</p>' , is_html : true } jsPsych . init ({ timeline : [ block , after_block ], on_finish : function () { jsPsych . data . displayData (); } });","title":"Loop indefinitely until a particular key is pressed"},{"location":"core_library/jspsych-core/#jspsychendexperiment","text":"jsPsych.endExperiment(end_message)","title":"jsPsych.endExperiment"},{"location":"core_library/jspsych-core/#parameters_4","text":"Parameter Type Description end_message string A message to display on the screen after the experiment is over.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_4","text":"None.","title":"Return value"},{"location":"core_library/jspsych-core/#description_4","text":"Ends the experiment, skipping all remaining trials.","title":"Description"},{"location":"core_library/jspsych-core/#example_3","text":"","title":"Example"},{"location":"core_library/jspsych-core/#end-the-experiment-if-a-particular-response-is-given","text":"var trial = { type : 'image-keyboard-response' , stimulus : 'image1.jpg' , choices : [ 89 , 78 ], // Y or N prompt : '<p>Press Y to Continue. Press N to end the experiment</p>' , on_finish : function ( data ){ if ( data . key_press == 78 ){ jsPsych . endExperiment ( 'The experiment was ended by pressing N.' ); } } }","title":"End the experiment if a particular response is given"},{"location":"core_library/jspsych-core/#jspsychfinishtrial","text":"jsPsych.finishTrial(data)","title":"jsPsych.finishTrial"},{"location":"core_library/jspsych-core/#parameters_5","text":"Parameter Type Description data object The data to store for the trial.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_5","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-core/#description_5","text":"This method tells jsPsych that the current trial is over. It is used in all of the plugins to end the current trial. When the trial ends a few things happen: The data is stored using jsPsych.data.write() The on_finish callback function is executed for the trial The on_trial_finish callback function is executed The progress bar is updated if it is being displayed The experiment ends if the trial is the last one (and the on_finish callback function is executed). The next trial, if one exists, is started.","title":"Description"},{"location":"core_library/jspsych-core/#example_4","text":"// this code would be in a plugin jsPsych . finishTrial ({ correct_response : true });","title":"Example"},{"location":"core_library/jspsych-core/#jspsychgetdisplayelement","text":"jsPsych.getDisplayElement()","title":"jsPsych.getDisplayElement"},{"location":"core_library/jspsych-core/#parameters_6","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_6","text":"Returns the HTML DOM element used for displaying the experiment.","title":"Return value"},{"location":"core_library/jspsych-core/#description_6","text":"Get the DOM element that displays the experiment.","title":"Description"},{"location":"core_library/jspsych-core/#example_5","text":"var el = jsPsych . getDisplayElement (); // hide the jsPsych display el . style . visibility = 'hidden' ;","title":"Example"},{"location":"core_library/jspsych-core/#jspsychgetprogressbarcompleted","text":"jsPsych.getProgressBarCompleted()","title":"jsPsych.getProgressBarCompleted"},{"location":"core_library/jspsych-core/#parameters_7","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_7","text":"Returns a value between 0 and 1 representing how full the progress bar currently is.","title":"Return value"},{"location":"core_library/jspsych-core/#description_7","text":"Used to get the current value of the progress bar. Works for automated and manual control.","title":"Description"},{"location":"core_library/jspsych-core/#example_6","text":"var progress_bar_amount = jsPsych . getProgressBarCompleted ();","title":"Example"},{"location":"core_library/jspsych-core/#jspsychinit","text":"jsPsych.init(settings)","title":"jsPsych.init"},{"location":"core_library/jspsych-core/#parameters_8","text":"Parameter Type Description settings object The settings object for initializing jsPsych. See table below. The settings object can contain several parameters. The only required parameter is timeline . Parameter Type Description timeline array An array containing the objects that describe the experiment timeline. See Creating an Experiment: The Timeline . display_element string The ID of an HTML element to display the experiment in. If left blank, jsPsych will use the <body> element to display content. All keyboard event listeners are bound to this element. In order for a keyboard event to be detected, this element must have focus (be the last thing that the subject clicked on). on_finish function Function to execute when the experiment ends. on_trial_start function Function to execute when a new trial begins. on_trial_finish function Function to execute when a trial ends. on_data_update function Function to execute every time data is stored using the jsPsych.data.write method. All plugins use this method to save data (via a call to jsPsych.finishTrial , so this function runs every time a plugin stores new data. on_interaction_data_update function Function to execute every time a new interaction event occurs. Interaction events include clicking on a different window (blur), returning to the experiment window (focus), entering full screen mode (fullscreenenter), and exiting full screen mode (fullscreenexit). on_close function Function to execute when the user leaves the page. Can be used, for example, to save data before the page is closed. exclusions object Specifies restrictions on the browser the subject can use to complete the experiment. See list of options below. show_progress_bar boolean If true, then a progress bar is shown at the top of the page. message_progress_bar string Message to display next to the progress bar. The default is 'Completion Progress'. auto_update_progress_bar boolean If true, then the progress bar at the top of the page will automatically update as every top-level timeline or trial is completed. show_preload_progress_bar boolean If true, then a progress bar is displayed while media files are automatically preloaded. preload_audio array An array of audio files to preload before starting the experiment. preload_images array An array of image files to preload before starting the experiment. preload_video array An array of video files to preload before starting the experiment. max_load_time numeric The maximum number of milliseconds to wait for content to preload. If the wait time is exceeded an error message is displayed and the experiment stops. The default value is 60 seconds. max_preload_attempts numeric The maximum number of attempts to preload each file in case of an error. The default value is 10. There is a small delay of 200ms between each attempt. use_webaudio boolean If false, then jsPsych will not attempt to use the WebAudio API for audio playback. Instead, HTML5 Audio objects will be used. The WebAudio API offers more precise control over the timing of audio events, and should be used when possible. The default value is true. default_iti numeric The default inter-trial interval in ms. The default value if none is specified is 0ms. experiment_width numeric The desired width of the jsPsych container in pixels. If left undefined, the width will be 100% of the display element. Usually this is the <body> element, and the width will be 100% of the screen size. minimum_valid_rt numeric The minimum valid response time for key presses during the experiment. Any key press response time that is less than this value will be treated as invalid and ignored. Note that this parameter only applies to keyboard responses , and not to other response types such as buttons and sliders. The default value is 0. override_safe_mode boolean Running a jsPsych experiment directly in a web browser (e.g., by double clicking on a local HTML file) will load the page using the file:// protocol. Some features of jsPsych don't work with this protocol. By default, when jsPsych detects that it's running on a page loaded via the file:// protocol, it runs in safe mode , which automatically disables features that don't work in this context. Specifically, the use of Web Audio is disabled (audio will be played using HTML5 audio instead, even if use_webaudio is true ) and video preloading is disabled (both automatic preloading and manual preloading via preload_video ). The override_safe_mode parameter defaults to false , but you can set it to true to force these features to operate under the file:// protocol. In order for this to work, you will need to disable web security (CORS) features in your browser - this is safe to do if you know what you are doing. Note that this parameter has no effect when you are running the experiment on a web server, because the page will be loaded via the http:// or https:// protocol. Possible values for the exclusions parameter above. Parameter Type Description min_width numeric The minimum width of the browser window. If the width is below this value, a message will be displayed to the subject asking them to maximize their browser window. The experiment will sit on this page until the browser window is large enough. min_height numeric Same as above, but with height. audio boolean Set to true to require support for the WebAudio API (used by plugins that play audio files).","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_8","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-core/#description_8","text":"This method configures and starts the experiment.","title":"Description"},{"location":"core_library/jspsych-core/#example_7","text":"See any of the plugin examples in the examples folder in the GitHub repository.","title":"Example"},{"location":"core_library/jspsych-core/#jspsychinitsettings","text":"jsPsych.initSettings()","title":"jsPsych.initSettings"},{"location":"core_library/jspsych-core/#parameters_9","text":"None","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_9","text":"Returns the settings object used to initialize the experiment.","title":"Return value"},{"location":"core_library/jspsych-core/#description_9","text":"Gets the object containing the settings for the current experiment.","title":"Description"},{"location":"core_library/jspsych-core/#example_8","text":"var settings = jsPsych . initSettings (); // check the experiment structure console . log ( JSON . stringify ( settings . timeline ));","title":"Example"},{"location":"core_library/jspsych-core/#jspsychpauseexperiment","text":"jsPsych.pauseExperiment()","title":"jsPsych.pauseExperiment"},{"location":"core_library/jspsych-core/#parameters_10","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_10","text":"None.","title":"Return value"},{"location":"core_library/jspsych-core/#description_10","text":"Pauses the experiment. The experiment will finish the current trial, but will not execute any additional trials until jsPsych.resumeExperiment() is called.","title":"Description"},{"location":"core_library/jspsych-core/#example_9","text":"var trial = { type : 'html-keyboard-response' , stimulus : 'Press p to take a 30 second break. Otherwise, press c to continue immediately.' , choices : [ 'p' , 'c' ], on_finish : function ( data ){ if ( data . key_press == 80 ) { // 80 = p jsPsych . pauseExperiment (); setTimeout ( jsPsych . resumeExperiment , 30000 ); } } }","title":"Example"},{"location":"core_library/jspsych-core/#jspsychprogress","text":"jsPsych.progress()","title":"jsPsych.progress"},{"location":"core_library/jspsych-core/#parameters_11","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_11","text":"Returns an object with the following properties: Property Type Description total_trials numeric Indicates the number of trials in the experiment. Note that this does not count possible loops or skipped trials due to conditional statements. current_trial_global numeric Returns the trial index of the current trial in a global scope. Every trial will increase this count by 1. percent_complete numeric Estimates the percent of the experiment that is complete. Works as expected for experiments without conditional or looping timelines. For complex timelines, the percent is an approximation.","title":"Return value"},{"location":"core_library/jspsych-core/#description_11","text":"This method returns information about the length of the experiment and the subject's current location in the experiment timeline.","title":"Description"},{"location":"core_library/jspsych-core/#example_10","text":"var progress = jsPsych . progress (); alert ( 'You have completed approximately ' + progress . percent_complete + '% of the experiment' );","title":"Example"},{"location":"core_library/jspsych-core/#jspsychresumeexperiment","text":"jsPsych.resumeExperiment()","title":"jsPsych.resumeExperiment"},{"location":"core_library/jspsych-core/#parameters_12","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_12","text":"None.","title":"Return value"},{"location":"core_library/jspsych-core/#description_12","text":"Resumes the experiment after a call to jsPsych.pauseExperiment() . If the post trial delay ( post_trial_gap ) has not yet been reached, then the experiment will not continue until the delay is finished. For example, if post_trial_gap was 10,000ms and jsPsych.resumeExperiment() was called 6,000ms after the previous trial finished, then the experiment would not continue for another 4,000ms.","title":"Description"},{"location":"core_library/jspsych-core/#example_11","text":"var trial = { type : 'html-keyboard-response' , stimulus : 'Press p to take a 30 second break. Otherwise, press c to continue immediately.' , choices : [ 'p' , 'c' ], on_finish : function ( data ){ if ( data . key_press == 80 ) { // 80 = p jsPsych . pauseExperiment (); setTimeout ( jsPsych . resumeExperiment , 30000 ); } } }","title":"Example"},{"location":"core_library/jspsych-core/#jspsychsetprogressbar","text":"jsPsych.setProgressBar(value)","title":"jsPsych.setProgressBar"},{"location":"core_library/jspsych-core/#parameters_13","text":"Parameter Type Description value numeric Proprotion (between 0 and 1) to fill the progress bar.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_13","text":"None.","title":"Return value"},{"location":"core_library/jspsych-core/#description_13","text":"Set the progress bar to a custom amount. Proportion must be between 0 and 1. Values larger than 1 are treated as 1.","title":"Description"},{"location":"core_library/jspsych-core/#example_12","text":"jsPsych . setProgressBar ( 0.85 );","title":"Example"},{"location":"core_library/jspsych-core/#jspsychstarttime","text":"jsPsych.startTime()","title":"jsPsych.startTime"},{"location":"core_library/jspsych-core/#parameters_14","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_14","text":"Returns a Date object indicating when the experiment began.","title":"Return value"},{"location":"core_library/jspsych-core/#description_14","text":"Get the time that the experiment began.","title":"Description"},{"location":"core_library/jspsych-core/#example_13","text":"var start_time = jsPsych . startTime ();","title":"Example"},{"location":"core_library/jspsych-core/#jspsychtimelinevariable","text":"jsPsych.timelineVariable(variable, call_immediate)","title":"jsPsych.timelineVariable"},{"location":"core_library/jspsych-core/#parameters_15","text":"Parameter Type Description variable string Name of the timeline variable call_immediate bool Typically this parameter is false , or simply ommitted. When false , the return value is a function that returns the timeline variable. This makes jsPsych.timelineVariable suitable for dynamic parameters by default. If true the function returns the value of the timeline variable immediately.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_15","text":"Depends on the value of call_immediate parameter. See description above.","title":"Return value"},{"location":"core_library/jspsych-core/#description_15","text":"Timeline variables are a powerful technique for generating experiments with repetitive procedures but different parameter values. This function fetches the current value of a particular timeline variable. It must be used in conjunction with a timeline that has timeline variables. See the timeline variable section for details.","title":"Description"},{"location":"core_library/jspsych-core/#examples_1","text":"","title":"Examples"},{"location":"core_library/jspsych-core/#standard-use-as-a-parameter-for-a-trial","text":"var trial = { type : 'image-keyboard-response' , stimulus : jsPsych . timelineVariable ( 'image' ) } var procedure = { timeline : [ trial ], timeline_variables : [ { image : 'face1.png' }, { image : 'face2.png' }, { image : 'face3.png' }, { image : 'face4.png' } ] }","title":"Standard use as a parameter for a trial"},{"location":"core_library/jspsych-core/#invoking-immediately-in-a-function","text":"var trial = { type : 'html-keyboard-response' , stimulus : function (){ return \"<img style='width:100px; height:100px;' src='\" + jsPsych . timelineVariable ( 'image' , true ) + \"'></img>\" ; } } var procedure = { timeline : [ trial ], timeline_variables : [ { image : 'face1.png' }, { image : 'face2.png' }, { image : 'face3.png' }, { image : 'face4.png' } ] }","title":"Invoking immediately in a function"},{"location":"core_library/jspsych-core/#jspsychtotaltime","text":"jsPsych.totalTime()","title":"jsPsych.totalTime"},{"location":"core_library/jspsych-core/#parameters_16","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-core/#return-value_16","text":"Returns a numeric value indicating the number of milliseconds since jsPsych.init was called.","title":"Return value"},{"location":"core_library/jspsych-core/#description_16","text":"Gets the total time the subject has been in the experiment.","title":"Description"},{"location":"core_library/jspsych-core/#example_14","text":"var time = jsPsych . totalTime (); console . log ( time );","title":"Example"},{"location":"core_library/jspsych-data/","text":"jsPsych.data \u00b6 The jsPsych.data module contains functions for interacting with the data generated by jsPsych plugins. jsPsych.data.addProperties \u00b6 jsPsych.data.addProperties(properties) Parameters \u00b6 Parameter Type Description properties object Object of key: value pairs to add to the data. Return value \u00b6 Returns nothing. Description \u00b6 This method appends a set of properties to every trial in the data object, including trials that have already occurred and trials that have yet to occur. You can use this to record things like the subject ID or condition assignment. Examples \u00b6 Assigning a subject ID and condition code \u00b6 jsPsych . data . addProperties ({ subject : 1 , condition : 'control' }); jsPsych.data.displayData \u00b6 jsPsych.data.displayData(format) Parameters \u00b6 Parameter Type Description format string Specifies whether to display the data in 'csv' or 'json' format. Return value \u00b6 Returns nothing. Description \u00b6 Outputs all of the data collected in the experiment to the screen in either JSON or CSV format. This is a useful method for quick debugging when developing an experiment. Examples \u00b6 Using the on_finish callback function to show data at the end of the experiment \u00b6 jsPsych . init ({ experiment_structure : exp , on_finish : function () { jsPsych . data . displayData ( 'csv' ); } }) jsPsych.data.get \u00b6 jsPsych.data.get() Parameters \u00b6 None. Return value \u00b6 Returns the data collection of all data generated by the experiment. Description \u00b6 This function is the standard starting point for accessing the data generated by the experiment. It returns a DataCollection object, which has several methods that can be used to further filter, aggregate, and view the data. These methods are described under the DataCollection section on this page. Example \u00b6 // select all trials var all_data = jsPsych . data . get (); // get csv representation of data and log to console console . log ( all_data . csv ()); jsPsych.data.getDataByTimelineNode \u00b6 jsPsych.data.getDataByTimelineNode(node_id) Parameters \u00b6 Parameter Type Description node_id string The id of the TimelineNodes to get data from. Return value \u00b6 Returns a DataCollection of all of the data generated in a specified TimelineNode. Description \u00b6 Get all the data generated by a specified Timeline. Example \u00b6 var current_node_id = jsPsych . currentTimelineNodeID (); var data_from_current_node = jsPsych . data . getDataByTimelineNode ( current_node_id ); jsPsych.data.getInteractionData \u00b6 jsPsych.data.getInteractionData() Parameters \u00b6 None. Return value \u00b6 Returns a DataCollection object with all of the interaction events. Description \u00b6 jsPsych automatically records a few different kinds of user interaction events. blur events occur when the user clicks on another window or tab during the experiment, indicating that they are no longer interacting with the experiment. focus events occur when the user clicks on the experiment window after having clicked somewhere else first (i.e., generated a blur event). fullscreenenter and fullscreenexit events are triggered by the browser entering and exiting fullscreen mode. However, fullscreenenter events only occur when the script switches the browser to fullscreen mode, e.g., with the jspsych-fullscreen plugin. Manually entering fullscreen mode does not trigger this event. fullscreenexit events occur whether the user manually exits fullscreen mode or the script exits fullscreen mode. This method returns the DataCollection containing all interaction events. This is useful for tracking whether the participant completed the task without diverting attention to other windows. Events are in the form: { type : 'focus' or 'blur' or 'fullscreenenter' or 'fullscreenexit' , trial : 10 , // the trial number when the event happened time : 13042 // total time elapsed since the start of the experiment } Example \u00b6 var interaction_data = jsPsych . data . getInteractionData (); // log data to console in json format console . log ( interaction_data . json ()); jsPsych.data.getLastTimelineData \u00b6 jsPsych.data.getLastTimelineData() Return value \u00b6 Returns a DataCollection. Description \u00b6 Gets all of the data generated in the same timeline as the last trial. Example \u00b6 var lasttimelinedata = jsPsych . data . getLastTimelineData (); jsPsych.data.getLastTrialData \u00b6 jsPsych.data.getLastTrialData() Return value \u00b6 Returns a DataCollection Description \u00b6 Gets the data collection containing all data generated by the last trial. Example \u00b6 var lasttrialdata = jsPsych.data.getLastTrialData(); jsPsych.data.getURLVariable \u00b6 jsPsych.data.getURLVariable(var_name) Parameters \u00b6 Parameter Type Description var_name string Which variable to get the value of. Return value \u00b6 Returns the value of a variable passed in through the query string. Description \u00b6 For extracting a particular variable passed in through a URL query string. Examples \u00b6 // if the URL of the page is: experiment.html?subject=1234&condition=test console . log ( jsPsych . data . getURLVariable ( 'subject' )) // logs \"1234\" console . log ( jsPsych . data . getURLVariable ( 'condition' )) // logs \"test\" jsPsych.data.urlVariables \u00b6 jsPsych.data.urlVariables() Return value \u00b6 Returns an object (associative array) of the variables in the URL query string. Description \u00b6 For extracting variables passed in through a URL query string. Examples \u00b6 // if the URL of the page is: experiment.html?subject=1234&condition=test var urlvar = jsPsych . data . urlVariables (); console . log ( urlvar . subject ) // logs \"1234\" console . log ( urlvar . condition ) // logs \"test\" jsPsych.data.write \u00b6 jsPsych.data.write(data_object) Parameters \u00b6 Parameter Type Description data_object object Object of key: value pairs to store in jsPsych's data storage as a trial. Return value \u00b6 Returns nothing. Description \u00b6 This method is used by jsPsych.finishTrial for writing data. You should probably not use it to add data. Instead use jsPsych.data.addProperties . Examples \u00b6 // don't use this! data should only be written once per trial. use jsPsych.finishTrial to save data. var trial_data = { correct : true , rt : 487 } jsPsych . data . write ( trial_data ); DataCollection \u00b6 All data is stored in the DataCollection object. Using methods like jsPsych.data.get() and jsPsych.data.getLastTrialData() return DataCollections containing the experiment data. This is a list of all of the methods that are available to call on a DataCollection object. .addToAll() \u00b6 Adds a set of properties to all items in the DataCollection. Similar to jsPsych.data.addProperties() , except that it can be applied to a subset of the whole DataCollection by filtering down to a smaller DataCollection first. jsPsych . data . get (). addToAll ({ subject_id : 123 , condition : 'control' }); .addToLast() \u00b6 Adds a set of properties to the last trial in the DataCollection. jsPsych . data . get (). addToLast ({ success : true }); .count() \u00b6 Counts the number of trials in the DataCollection. jsPsych . data . get (). count () .csv() \u00b6 Generates a CSV string representing all of the data in the DataCollection. console . log ( jsPsych . data . get (). csv ()); .filter() \u00b6 Returns a subset of the DataCollection based on the filter. The filter is an object, and trials are only kept in the returned DataCollection if they contain the key: value pair(s) in the filter object. For example, the code below selects all of the trials with a correct response. var correct_trials = jsPsych . data . get (). filter ({ correct : true }); The object can have multiple key: value pairs, and the trials must match all of them in order to be included in the returned collection. // keep only correct trials from the practice phase var correct_practice_trials = jsPsych . data . get (). filter ({ correct : true , phase : 'practice' }); The filter can also be an array of objects. In this case each object in the array acts as an OR filter. As long as the trial has all the key: value pairs of one of the objects in the array, it will appear in the returned collection. // select trials from block 1 and block 5. var trials = jsPsych . data . get (). filter ([{ block : 1 }, { block : 5 }]); The filter method returns a DataCollection object, so methods can be chained onto a single statement. // count the number of correct trials in block 1 var block_1_correct = jsPsych . data . get (). filter ({ block : 1 , correct : true }). count (); .filterCustom() \u00b6 This method is similar to the .filter() method, except that it accepts a function as the filter. The function is passed a single argument, containing the data for a trial. If the function returns true the trial is included in the returned DataCollection. // count the number of trials with a response time greater than 2000ms. var too_long = jsPsych . data . get (). filterCustom ( function ( trial ){ return trial . rt > 2000 ; }). count () .first() / .last() \u00b6 Returns a DataCollection containing the first/last n trials. If n is greater than the number of trials in the DataCollection, then these functions will return an array of length equal to the number of trials. If there are no trials in the DataCollection, then these functions will return an empty array. If the n argument is omitted, then the functions will use the default value of 1. If n is zero or a negative number, then these functions will throw an error. var first_trial = jsPsych . data . get (). first ( 1 ); var last_trial_with_correct_response = jsPsych . data . get (). filter ({ correct : true }). last ( 1 ); var last_10_trials = jsPsych . data . get (). last ( 10 ); .ignore() \u00b6 Returns a DataCollection with all instances of a particular key removed from the dataset. // log a csv file that does not contain the internal_node_id values for each trial console . log ( jsPsych . data . get (). ignore ( 'internal_node_id' ). csv ()); .join() \u00b6 Appends one DataCollection onto another and returns the combined collection. // get a DataCollection with all trials that are either correct or // have a response time greater than 200ms. var dc1 = jsPsych . data . get (). filter ({ correct : true }); var dc2 = jsPsych . data . get (). filterCustom ( function ( trial ){ return trial . rt > 200 }); var data = dc1 . join ( dc2 ); .json() \u00b6 Generates a JSON string representing all of the data in the DataCollection. console . log ( jsPsych . data . get (). json ()); .localSave() \u00b6 Saves a CSV or JSON file on the computer running the experiment. If conducting an online experiment, this will download the file onto the subject's computer, and is therefore not a recommended data storage solution for online data collection. Warning: This function may not behave correctly in older browsers. Upgrading to the latest version of any major web browser should solve the problem. // first argument is the format, second is the filename. // the format can be either 'csv' or 'json'. jsPsych . data . get (). localSave ( 'csv' , 'mydata.csv' ); .push() \u00b6 Add a new entry to the DataCollection. This method is mostly used internally, and you shouldn't need to call it under normal circumstances. var data = { correct : true , rt : 500 } jsPsych . data . get (). push ( data ); .readOnly() \u00b6 Creates a copy of the DataCollection so that any modification of the values in the DataCollection will not affect the original. // this line edits the rt property of the first trial jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt = 100 ; // readOnly creates a copy that can be modified without affecting the original jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt // outputs 100 jsPsych . data . get (). readOnly (). first ( 1 ). values ()[ 0 ]. rt = 200 jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt // still outputs 100 .select() \u00b6 Returns a DataColumn object (see documentation below) of a single property from a DataCollection object. var rt_data = jsPsych . data . get (). select ( 'rt' ); rt_data . mean () .uniqueNames() \u00b6 Generates an array of all the unique key names in the set of trials contained in the DataCollection. This is especially useful when setting up a relational database (e.g., MySQL) where the column names need to be specified in advance. console . log ( jsPsych . data . get (). uniqueNames ()); .values() \u00b6 Returns the raw data array associated with the DataCollection. This array is modifiable, so changes to the array and values of objects in the array will change the DataCollection. var raw_data = jsPsych . data . get (). values (); // was response in first trial correct? if ( raw_data [ 0 ]. correct ){ console . log ( 'correct!' ); } else { console . log ( 'incorrect.' ); } DataColumn \u00b6 DataColumn objects represent all the values of a single property in a DataCollection. They are generated by using the .select() method on a DataCollection. Once a DataColumn is generated, the following methods can be used. .all() \u00b6 Checks if all values in the DataColumn return true when passed to a function. The function takes a single argument, which represents one value from the DataColumn. // check if all the response times in the practice phase were under 1000ms jsPsych . data . get (). filter ({ phase : 'practice' }). select ( 'correct' ). all ( function ( x ) { return x < 1000 ; }); .count() \u00b6 Counts the number of values in the DataColumn. // count how many response times there are jsPsych . data . get (). select ( 'rt' ). count (); .frequencies() \u00b6 Counts the number of occurrences of each unique value in the DataColumn. Returns this value as an object, where each key is a unique value and the value of each key is the number of occurrences of that key. // get frequencies of correct and incorrect responses jsPsych . data . get (). select ( 'correct' ). frequencies (); .max() / .min() \u00b6 Returns the maximum or minimum value in a DataColumn. jsPsych . data . get (). select ( 'rt' ). max (); jsPsych . data . get (). select ( 'rt' ). min (); .mean() \u00b6 Returns the average of all the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). mean (); .median() \u00b6 Returns the median of all the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). median (); .sd() \u00b6 Returns the standard deviation of the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). sd (); .subset() \u00b6 Filters the DataColumn to include only values that return true when passed through the specified function. // below results will be less than 200. jsPsych . data . get (). select ( 'rt' ). subset ( function ( x ){ return x < 200 ; }). max (); .sum() \u00b6 Returns the sum of the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). sum (); .values \u00b6 The raw array of values in the DataColumn. // note that this is not a function call. jsPsych . data . get (). select ( 'rt' ). values ; .variance() \u00b6 Returns the variance of the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). variance ();","title":"jsPsych.data"},{"location":"core_library/jspsych-data/#jspsychdata","text":"The jsPsych.data module contains functions for interacting with the data generated by jsPsych plugins.","title":"jsPsych.data"},{"location":"core_library/jspsych-data/#jspsychdataaddproperties","text":"jsPsych.data.addProperties(properties)","title":"jsPsych.data.addProperties"},{"location":"core_library/jspsych-data/#parameters","text":"Parameter Type Description properties object Object of key: value pairs to add to the data.","title":"Parameters"},{"location":"core_library/jspsych-data/#return-value","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-data/#description","text":"This method appends a set of properties to every trial in the data object, including trials that have already occurred and trials that have yet to occur. You can use this to record things like the subject ID or condition assignment.","title":"Description"},{"location":"core_library/jspsych-data/#examples","text":"","title":"Examples"},{"location":"core_library/jspsych-data/#assigning-a-subject-id-and-condition-code","text":"jsPsych . data . addProperties ({ subject : 1 , condition : 'control' });","title":"Assigning a subject ID and condition code"},{"location":"core_library/jspsych-data/#jspsychdatadisplaydata","text":"jsPsych.data.displayData(format)","title":"jsPsych.data.displayData"},{"location":"core_library/jspsych-data/#parameters_1","text":"Parameter Type Description format string Specifies whether to display the data in 'csv' or 'json' format.","title":"Parameters"},{"location":"core_library/jspsych-data/#return-value_1","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-data/#description_1","text":"Outputs all of the data collected in the experiment to the screen in either JSON or CSV format. This is a useful method for quick debugging when developing an experiment.","title":"Description"},{"location":"core_library/jspsych-data/#examples_1","text":"","title":"Examples"},{"location":"core_library/jspsych-data/#using-the-on_finish-callback-function-to-show-data-at-the-end-of-the-experiment","text":"jsPsych . init ({ experiment_structure : exp , on_finish : function () { jsPsych . data . displayData ( 'csv' ); } })","title":"Using the on_finish callback function to show data at the end of the experiment"},{"location":"core_library/jspsych-data/#jspsychdataget","text":"jsPsych.data.get()","title":"jsPsych.data.get"},{"location":"core_library/jspsych-data/#parameters_2","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-data/#return-value_2","text":"Returns the data collection of all data generated by the experiment.","title":"Return value"},{"location":"core_library/jspsych-data/#description_2","text":"This function is the standard starting point for accessing the data generated by the experiment. It returns a DataCollection object, which has several methods that can be used to further filter, aggregate, and view the data. These methods are described under the DataCollection section on this page.","title":"Description"},{"location":"core_library/jspsych-data/#example","text":"// select all trials var all_data = jsPsych . data . get (); // get csv representation of data and log to console console . log ( all_data . csv ());","title":"Example"},{"location":"core_library/jspsych-data/#jspsychdatagetdatabytimelinenode","text":"jsPsych.data.getDataByTimelineNode(node_id)","title":"jsPsych.data.getDataByTimelineNode"},{"location":"core_library/jspsych-data/#parameters_3","text":"Parameter Type Description node_id string The id of the TimelineNodes to get data from.","title":"Parameters"},{"location":"core_library/jspsych-data/#return-value_3","text":"Returns a DataCollection of all of the data generated in a specified TimelineNode.","title":"Return value"},{"location":"core_library/jspsych-data/#description_3","text":"Get all the data generated by a specified Timeline.","title":"Description"},{"location":"core_library/jspsych-data/#example_1","text":"var current_node_id = jsPsych . currentTimelineNodeID (); var data_from_current_node = jsPsych . data . getDataByTimelineNode ( current_node_id );","title":"Example"},{"location":"core_library/jspsych-data/#jspsychdatagetinteractiondata","text":"jsPsych.data.getInteractionData()","title":"jsPsych.data.getInteractionData"},{"location":"core_library/jspsych-data/#parameters_4","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-data/#return-value_4","text":"Returns a DataCollection object with all of the interaction events.","title":"Return value"},{"location":"core_library/jspsych-data/#description_4","text":"jsPsych automatically records a few different kinds of user interaction events. blur events occur when the user clicks on another window or tab during the experiment, indicating that they are no longer interacting with the experiment. focus events occur when the user clicks on the experiment window after having clicked somewhere else first (i.e., generated a blur event). fullscreenenter and fullscreenexit events are triggered by the browser entering and exiting fullscreen mode. However, fullscreenenter events only occur when the script switches the browser to fullscreen mode, e.g., with the jspsych-fullscreen plugin. Manually entering fullscreen mode does not trigger this event. fullscreenexit events occur whether the user manually exits fullscreen mode or the script exits fullscreen mode. This method returns the DataCollection containing all interaction events. This is useful for tracking whether the participant completed the task without diverting attention to other windows. Events are in the form: { type : 'focus' or 'blur' or 'fullscreenenter' or 'fullscreenexit' , trial : 10 , // the trial number when the event happened time : 13042 // total time elapsed since the start of the experiment }","title":"Description"},{"location":"core_library/jspsych-data/#example_2","text":"var interaction_data = jsPsych . data . getInteractionData (); // log data to console in json format console . log ( interaction_data . json ());","title":"Example"},{"location":"core_library/jspsych-data/#jspsychdatagetlasttimelinedata","text":"jsPsych.data.getLastTimelineData()","title":"jsPsych.data.getLastTimelineData"},{"location":"core_library/jspsych-data/#return-value_5","text":"Returns a DataCollection.","title":"Return value"},{"location":"core_library/jspsych-data/#description_5","text":"Gets all of the data generated in the same timeline as the last trial.","title":"Description"},{"location":"core_library/jspsych-data/#example_3","text":"var lasttimelinedata = jsPsych . data . getLastTimelineData ();","title":"Example"},{"location":"core_library/jspsych-data/#jspsychdatagetlasttrialdata","text":"jsPsych.data.getLastTrialData()","title":"jsPsych.data.getLastTrialData"},{"location":"core_library/jspsych-data/#return-value_6","text":"Returns a DataCollection","title":"Return value"},{"location":"core_library/jspsych-data/#description_6","text":"Gets the data collection containing all data generated by the last trial.","title":"Description"},{"location":"core_library/jspsych-data/#example_4","text":"var lasttrialdata = jsPsych.data.getLastTrialData();","title":"Example"},{"location":"core_library/jspsych-data/#jspsychdatageturlvariable","text":"jsPsych.data.getURLVariable(var_name)","title":"jsPsych.data.getURLVariable"},{"location":"core_library/jspsych-data/#parameters_5","text":"Parameter Type Description var_name string Which variable to get the value of.","title":"Parameters"},{"location":"core_library/jspsych-data/#return-value_7","text":"Returns the value of a variable passed in through the query string.","title":"Return value"},{"location":"core_library/jspsych-data/#description_7","text":"For extracting a particular variable passed in through a URL query string.","title":"Description"},{"location":"core_library/jspsych-data/#examples_2","text":"// if the URL of the page is: experiment.html?subject=1234&condition=test console . log ( jsPsych . data . getURLVariable ( 'subject' )) // logs \"1234\" console . log ( jsPsych . data . getURLVariable ( 'condition' )) // logs \"test\"","title":"Examples"},{"location":"core_library/jspsych-data/#jspsychdataurlvariables","text":"jsPsych.data.urlVariables()","title":"jsPsych.data.urlVariables"},{"location":"core_library/jspsych-data/#return-value_8","text":"Returns an object (associative array) of the variables in the URL query string.","title":"Return value"},{"location":"core_library/jspsych-data/#description_8","text":"For extracting variables passed in through a URL query string.","title":"Description"},{"location":"core_library/jspsych-data/#examples_3","text":"// if the URL of the page is: experiment.html?subject=1234&condition=test var urlvar = jsPsych . data . urlVariables (); console . log ( urlvar . subject ) // logs \"1234\" console . log ( urlvar . condition ) // logs \"test\"","title":"Examples"},{"location":"core_library/jspsych-data/#jspsychdatawrite","text":"jsPsych.data.write(data_object)","title":"jsPsych.data.write"},{"location":"core_library/jspsych-data/#parameters_6","text":"Parameter Type Description data_object object Object of key: value pairs to store in jsPsych's data storage as a trial.","title":"Parameters"},{"location":"core_library/jspsych-data/#return-value_9","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-data/#description_9","text":"This method is used by jsPsych.finishTrial for writing data. You should probably not use it to add data. Instead use jsPsych.data.addProperties .","title":"Description"},{"location":"core_library/jspsych-data/#examples_4","text":"// don't use this! data should only be written once per trial. use jsPsych.finishTrial to save data. var trial_data = { correct : true , rt : 487 } jsPsych . data . write ( trial_data );","title":"Examples"},{"location":"core_library/jspsych-data/#datacollection","text":"All data is stored in the DataCollection object. Using methods like jsPsych.data.get() and jsPsych.data.getLastTrialData() return DataCollections containing the experiment data. This is a list of all of the methods that are available to call on a DataCollection object.","title":"DataCollection"},{"location":"core_library/jspsych-data/#addtoall","text":"Adds a set of properties to all items in the DataCollection. Similar to jsPsych.data.addProperties() , except that it can be applied to a subset of the whole DataCollection by filtering down to a smaller DataCollection first. jsPsych . data . get (). addToAll ({ subject_id : 123 , condition : 'control' });","title":".addToAll()"},{"location":"core_library/jspsych-data/#addtolast","text":"Adds a set of properties to the last trial in the DataCollection. jsPsych . data . get (). addToLast ({ success : true });","title":".addToLast()"},{"location":"core_library/jspsych-data/#count","text":"Counts the number of trials in the DataCollection. jsPsych . data . get (). count ()","title":".count()"},{"location":"core_library/jspsych-data/#csv","text":"Generates a CSV string representing all of the data in the DataCollection. console . log ( jsPsych . data . get (). csv ());","title":".csv()"},{"location":"core_library/jspsych-data/#filter","text":"Returns a subset of the DataCollection based on the filter. The filter is an object, and trials are only kept in the returned DataCollection if they contain the key: value pair(s) in the filter object. For example, the code below selects all of the trials with a correct response. var correct_trials = jsPsych . data . get (). filter ({ correct : true }); The object can have multiple key: value pairs, and the trials must match all of them in order to be included in the returned collection. // keep only correct trials from the practice phase var correct_practice_trials = jsPsych . data . get (). filter ({ correct : true , phase : 'practice' }); The filter can also be an array of objects. In this case each object in the array acts as an OR filter. As long as the trial has all the key: value pairs of one of the objects in the array, it will appear in the returned collection. // select trials from block 1 and block 5. var trials = jsPsych . data . get (). filter ([{ block : 1 }, { block : 5 }]); The filter method returns a DataCollection object, so methods can be chained onto a single statement. // count the number of correct trials in block 1 var block_1_correct = jsPsych . data . get (). filter ({ block : 1 , correct : true }). count ();","title":".filter()"},{"location":"core_library/jspsych-data/#filtercustom","text":"This method is similar to the .filter() method, except that it accepts a function as the filter. The function is passed a single argument, containing the data for a trial. If the function returns true the trial is included in the returned DataCollection. // count the number of trials with a response time greater than 2000ms. var too_long = jsPsych . data . get (). filterCustom ( function ( trial ){ return trial . rt > 2000 ; }). count ()","title":".filterCustom()"},{"location":"core_library/jspsych-data/#first-last","text":"Returns a DataCollection containing the first/last n trials. If n is greater than the number of trials in the DataCollection, then these functions will return an array of length equal to the number of trials. If there are no trials in the DataCollection, then these functions will return an empty array. If the n argument is omitted, then the functions will use the default value of 1. If n is zero or a negative number, then these functions will throw an error. var first_trial = jsPsych . data . get (). first ( 1 ); var last_trial_with_correct_response = jsPsych . data . get (). filter ({ correct : true }). last ( 1 ); var last_10_trials = jsPsych . data . get (). last ( 10 );","title":".first() / .last()"},{"location":"core_library/jspsych-data/#ignore","text":"Returns a DataCollection with all instances of a particular key removed from the dataset. // log a csv file that does not contain the internal_node_id values for each trial console . log ( jsPsych . data . get (). ignore ( 'internal_node_id' ). csv ());","title":".ignore()"},{"location":"core_library/jspsych-data/#join","text":"Appends one DataCollection onto another and returns the combined collection. // get a DataCollection with all trials that are either correct or // have a response time greater than 200ms. var dc1 = jsPsych . data . get (). filter ({ correct : true }); var dc2 = jsPsych . data . get (). filterCustom ( function ( trial ){ return trial . rt > 200 }); var data = dc1 . join ( dc2 );","title":".join()"},{"location":"core_library/jspsych-data/#json","text":"Generates a JSON string representing all of the data in the DataCollection. console . log ( jsPsych . data . get (). json ());","title":".json()"},{"location":"core_library/jspsych-data/#localsave","text":"Saves a CSV or JSON file on the computer running the experiment. If conducting an online experiment, this will download the file onto the subject's computer, and is therefore not a recommended data storage solution for online data collection. Warning: This function may not behave correctly in older browsers. Upgrading to the latest version of any major web browser should solve the problem. // first argument is the format, second is the filename. // the format can be either 'csv' or 'json'. jsPsych . data . get (). localSave ( 'csv' , 'mydata.csv' );","title":".localSave()"},{"location":"core_library/jspsych-data/#push","text":"Add a new entry to the DataCollection. This method is mostly used internally, and you shouldn't need to call it under normal circumstances. var data = { correct : true , rt : 500 } jsPsych . data . get (). push ( data );","title":".push()"},{"location":"core_library/jspsych-data/#readonly","text":"Creates a copy of the DataCollection so that any modification of the values in the DataCollection will not affect the original. // this line edits the rt property of the first trial jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt = 100 ; // readOnly creates a copy that can be modified without affecting the original jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt // outputs 100 jsPsych . data . get (). readOnly (). first ( 1 ). values ()[ 0 ]. rt = 200 jsPsych . data . get (). first ( 1 ). values ()[ 0 ]. rt // still outputs 100","title":".readOnly()"},{"location":"core_library/jspsych-data/#select","text":"Returns a DataColumn object (see documentation below) of a single property from a DataCollection object. var rt_data = jsPsych . data . get (). select ( 'rt' ); rt_data . mean ()","title":".select()"},{"location":"core_library/jspsych-data/#uniquenames","text":"Generates an array of all the unique key names in the set of trials contained in the DataCollection. This is especially useful when setting up a relational database (e.g., MySQL) where the column names need to be specified in advance. console . log ( jsPsych . data . get (). uniqueNames ());","title":".uniqueNames()"},{"location":"core_library/jspsych-data/#values","text":"Returns the raw data array associated with the DataCollection. This array is modifiable, so changes to the array and values of objects in the array will change the DataCollection. var raw_data = jsPsych . data . get (). values (); // was response in first trial correct? if ( raw_data [ 0 ]. correct ){ console . log ( 'correct!' ); } else { console . log ( 'incorrect.' ); }","title":".values()"},{"location":"core_library/jspsych-data/#datacolumn","text":"DataColumn objects represent all the values of a single property in a DataCollection. They are generated by using the .select() method on a DataCollection. Once a DataColumn is generated, the following methods can be used.","title":"DataColumn"},{"location":"core_library/jspsych-data/#all","text":"Checks if all values in the DataColumn return true when passed to a function. The function takes a single argument, which represents one value from the DataColumn. // check if all the response times in the practice phase were under 1000ms jsPsych . data . get (). filter ({ phase : 'practice' }). select ( 'correct' ). all ( function ( x ) { return x < 1000 ; });","title":".all()"},{"location":"core_library/jspsych-data/#count_1","text":"Counts the number of values in the DataColumn. // count how many response times there are jsPsych . data . get (). select ( 'rt' ). count ();","title":".count()"},{"location":"core_library/jspsych-data/#frequencies","text":"Counts the number of occurrences of each unique value in the DataColumn. Returns this value as an object, where each key is a unique value and the value of each key is the number of occurrences of that key. // get frequencies of correct and incorrect responses jsPsych . data . get (). select ( 'correct' ). frequencies ();","title":".frequencies()"},{"location":"core_library/jspsych-data/#max-min","text":"Returns the maximum or minimum value in a DataColumn. jsPsych . data . get (). select ( 'rt' ). max (); jsPsych . data . get (). select ( 'rt' ). min ();","title":".max() / .min()"},{"location":"core_library/jspsych-data/#mean","text":"Returns the average of all the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). mean ();","title":".mean()"},{"location":"core_library/jspsych-data/#median","text":"Returns the median of all the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). median ();","title":".median()"},{"location":"core_library/jspsych-data/#sd","text":"Returns the standard deviation of the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). sd ();","title":".sd()"},{"location":"core_library/jspsych-data/#subset","text":"Filters the DataColumn to include only values that return true when passed through the specified function. // below results will be less than 200. jsPsych . data . get (). select ( 'rt' ). subset ( function ( x ){ return x < 200 ; }). max ();","title":".subset()"},{"location":"core_library/jspsych-data/#sum","text":"Returns the sum of the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). sum ();","title":".sum()"},{"location":"core_library/jspsych-data/#values_1","text":"The raw array of values in the DataColumn. // note that this is not a function call. jsPsych . data . get (). select ( 'rt' ). values ;","title":".values"},{"location":"core_library/jspsych-data/#variance","text":"Returns the variance of the values in a DataColumn. jsPsych . data . get (). select ( 'rt' ). variance ();","title":".variance()"},{"location":"core_library/jspsych-pluginAPI/","text":"jsPsych.pluginAPI \u00b6 The pluginAPI module contains functions that are useful when developing new plugins. jsPsych.pluginAPI.autoPreload \u00b6 jsPsych.pluginAPI.autoPreload(timeline, callback) Parameters \u00b6 Parameter Type Description timeline TimelineNode object A TimelineNode object that contains an arbitrary set of trials. callback function A function to execute when loading is complete Return value \u00b6 Returns nothing. Description \u00b6 Attempts to preload all image files and audio files that will be used to run the trials on the timeline. Content will only preload from plugins that have used the registerPreload method to define the media types of their parameters. The callback function executes once all of the files are preloaded. This method is used internally by the core jsPsych code. It is not recommended that you call it manually. Examples \u00b6 // you probably shouldn't use this method jsPsych.pluginAPI.cancelAllKeyboardResponses \u00b6 jsPsych.pluginAPI.cancelAllKeyboardResponses() Parameters \u00b6 None. Return value \u00b6 Returns nothing. Description \u00b6 Cancels all currently active keyboard listeners created by jsPsych.pluginAPI.getKeyboardResponse . Examples \u00b6 jsPsych . pluginAPI . cancelAllKeyboardResponses (); jsPsych.pluginAPI.cancelKeyboardResponse \u00b6 jsPsych.pluginAPI.cancelKeyboardResponse(listener_id) Parameters \u00b6 Parameter Type Description listener_id object The listener_id object generated by the call to jsPsych.pluginAPI.getKeyboardResponse . Return value \u00b6 Returns nothing. Description \u00b6 Cancels a specific keyboard listener created by jsPsych.pluginAPI.getKeyboardResponse . Examples \u00b6 // create a persistent keyboard listener var listener_id = jsPsych . pluginAPI . getKeyboardResponse ({ callback_function : after_response , valid_responses : [ 'p' , 'q' ], rt_method : 'performance' , persist : true , allow_held_key : false }); // cancel keyboard listener jsPsych . pluginAPI . cancelKeyboardResponse ( listener_id ); jsPsych.pluginAPI.clearAllTimeouts \u00b6 jsPsych.pluginAPI.clearAllTimeouts() Parameters \u00b6 None. Return value \u00b6 Returns nothing. Description \u00b6 Clears any pending timeouts that were set using jsPsych.pluginAPI.setTimeout() jsPsych.pluginAPI.compareKeys \u00b6 jsPsych.pluginAPI.compareKeys(key1, key2) Parameters \u00b6 Parameter Type Description key1 string or numeric The representation of a key, either string or keycode key2 string or numeric The representation of a key, either string or keycode Return value \u00b6 Returns true if keycodes or strings refer to the same key, regardless of type. Description \u00b6 Compares two keys to see if they are the same, ignoring differences in representational type. Examples \u00b6 jsPsych . pluginAPI . compareKeys ( 'a' , 65 ); // returns true jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'space' , 31 ) // returns false jsPsych.pluginAPI.convertKeyCharacterToKeyCode \u00b6 jsPsych.pluginAPI.convertKeyCharacterToKeyCode(character) Parameters \u00b6 Parameter Type Description character string The string representation of keyboard key. Return value \u00b6 Returns the numeric keycode associated with the character parameter. Description \u00b6 Converts between the string representation of a key and the numeric key code associated with that key. Examples \u00b6 var keycode = jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'a' ) // keycode is 65 keycode = jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'space' ) // keycode is 32 jsPsych.pluginAPI.convertKeyCodeToKeyCharacter \u00b6 jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(character) Parameters \u00b6 Parameter Type Description code numeric The numeric representation of keyboard key. Return value \u00b6 Returns the string representation of the key associated with the code parameter. Description \u00b6 Converts between the numeric key code of a key and the string representation associated with that key. Examples \u00b6 var keycode = jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 65 ) // key is 'a' keycode = jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 32 ) // keycode is 'space' jsPsych.pluginAPI.getAudioBuffer \u00b6 jsPsych.pluginAPI.getAudioBuffer(filepath) Parameters \u00b6 Parameter Type Description filepath string The path to the audio file that was preloaded. Return value \u00b6 Returns buffered audio file for playback. If the browser supports it the buffer will be playable with the WebAudio API. Otherwise, the returned buffer will be an HTML5 Audio object. Description \u00b6 Gets an AudioBuffer that can be played with the WebAudio API or an Audio object that can be played with HTML5 Audio. The file must be preloaded with preloadAudioFiles or the automatic preload ( autoPreload ). Examples \u00b6 // the code below is used to play audio in the audio-keyboard-response plugin var source = context . createBufferSource (); source . buffer = jsPsych . pluginAPI . getAudioBuffer ( trial . stimulus ); source . connect ( context . destination ); startTime = context . currentTime ; source . start ( startTime ); jsPsych.pluginAPI.getKeyboardResponse \u00b6 jsPsych.pluginAPI.getKeyboardResponse(parameters) Parameters \u00b6 The method accepts an object of parameter values (see example below). The valid keys for this object are listed in the table below. Parameter Type Description callback_function function The function to execute whenever a valid keyboard response is generated. valid_responses array An array of key codes or character strings representing valid responses. Responses not on the list will be ignored. An empty array indicates that all responses are acceptable. rt_method string Indicates which method of recording time to use. The 'performance' method uses calls to performance.now() , which is the standard way of measuring timing in jsPsych. It is supported by up-to-date versions of all the major browsers . The audio method is used in conjuction with an audio_context (set as an additional parameter). This uses the clock time of the audio_context when audio stimuli are being played. audio_context AudioContext object The AudioContext of the audio file that is being played. audio_context_start_time numeric The scheduled time of the sound file in the AudioContext. This will be used as the start time. allow_held_key boolean If true , then responses will be registered from keys that are being held down. If false , then a held key can only register a response the first time that getKeyboardResponse is called for that key. For example, if a participant holds down the A key before the experiment starts, then the first time getKeyboardResponse is called, the A will register as a key press. However, any future calls to getKeyboardResponse will not register the A until the participant releases the key and presses it again. persist boolean If false, then the keyboard listener will only trigger the first time a valid key is pressed. If true, then it will trigger every time a valid key is pressed until it is explicitly cancelled by jsPsych.pluginAPI.cancelKeyboardResponse or jsPsych.pluginAPI.cancelAllKeyboardResponses . Return value \u00b6 Return an object that uniquely identifies the keyboard listener. This object can be passed to jsPsych.pluginAPI.cancelKeyboardResponse to cancel the keyboard listener. Description \u00b6 Gets a keyboard response from the subject, recording the response time from when the function is first called until a valid response is generated. The keyboard event listener will be bound to the display_element declared in jsPsych.init() (or the <body> element if no display_element is specified). This allows jsPsych experiments to be embedded in websites with other content without disrupting the functionality of other UI elements. A valid response triggers the callback_function specified in the parameters. A single argument is passed to the callback function. The argument contains an object with the properties key and rt . key contains the numeric key code of the response, and rt contains the response time. Examples \u00b6 Get a single response from any key \u00b6 var after_response = function ( info ){ alert ( 'You pressed key ' + info . key + ' after ' + info . rt + 'ms' ); } jsPsych . pluginAPI . getKeyboardResponse ({ callback_function : after_response , valid_responses : jsPsych . ALL_KEYS , rt_method : 'performance' , persist : false }); Get a responses from a key until the letter Q is pressed \u00b6 var after_response = function ( info ){ alert ( 'You pressed key ' + info . key + ' after ' + info . rt + 'ms' ); if ( info . key == 81 ){ // the key code for 'Q' is 81. jsPsych . pluginAPI . cancelKeyboardResponse ( listener ); } } var listener = jsPsych . pluginAPI . getKeyboardResponse ({ callback_function : after_response , valid_responses : jsPsych . ALL_KEYS , rt_method : 'performance' , persist : true }); jsPsych.pluginAPI.preloadAudioFiles \u00b6 jsPsych.pluginAPI.preloadAudioFiles(files, callback_complete, callback_load) Parameters \u00b6 Parameter Type Description files array An array of audio file paths to load. The array can be nested (e.g., if images are in multiple arrays to help sort by condition or task). callback_complete function A function to execute when all the files have been loaded. callback_load function A function to execute after each file has been loaded. A single parameter is passed to this function which contains the number of files that have been loaded so far. Return value \u00b6 Returns nothing. Description \u00b6 Use this function to preload audio files that are not part of a plugin with automatic preloading. Audio files in official plugins will automatically preload. See Media Preloading for more information. It is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the files are loaded. Thus, it is possible that an audio file would be required for playing before it is done preloading. The callback_complete function will only execute after all the audio files are loaded, and can be used to control the flow of the experiment (e.g., by starting the experiment in the callback_complete function). The callback_load function can be used to indicate progress. See example below. Examples \u00b6 Basic use \u00b6 var sounds = [ 'file1.mp3' , 'file2.mp3' , 'file3.mp3' ]; jsPsych . pluginAPI . preloadAudioFiles ( sounds , function (){ startExperiment (); }); function startExperiment (){ jsPsych . init ({ timeline : exp }); } Show progress of loading \u00b6 var sounds = [ 'file1.mp3' , 'file2.mp3' , 'file3.mp3' ]; jsPsych . pluginAPI . preloadAudioFiles ( sounds , function (){ startExperiment (); }, function ( nLoaded ) { updateLoadedCount ( nLoaded ); }); function updateLoadedCount ( nLoaded ){ var percentcomplete = nLoaded / sounds . length * 100 ; // could put something fancier here, like a progress bar // or updating text in the DOM. console . log ( 'Loaded ' + percentcomplete + '% of audio files' ); } function startExperiment (){ jsPsych . init ({ timeline : exp }); } jsPsych.pluginAPI.preloadImages \u00b6 jsPsych.pluginAPI.preloadImages(images, callback_complete, callback_load) Parameters \u00b6 Parameter Type Description images array An array of image paths to load. The array can be nested (e.g., if images are in multiple arrays to help sort by condition or task). callback_complete function A function to execute when all the images have been loaded. callback_load function A function to execute after each image has been loaded. A single parameter is passed to this function which contains the number of images that have been loaded so far. Return value \u00b6 Returns nothing. Description \u00b6 Use this function to preload image files that are not part of a plugin with automatic preloading. Image files in official plugins will automatically preload. See Media Preloading for more information. It is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the images are loaded. Thus, it is possible that an image would be required for display before it is done preloading. The callback_complete function will only execute after all the images are loaded, and can be used to control the flow of the experiment (e.g., by starting the experiment in the callback_complete function). The callback_load function can be used to indicate progress, if the number of images to be loaded is known ahead of time. See example below. Examples \u00b6 Basic use \u00b6 var images = [ 'img/file1.png' , 'img/file2.png' , 'img/file3.png' ]; jsPsych . pluginAPI . preloadImages ( images , function (){ startExperiment (); }); function startExperiment (){ jsPsych . init ({ timeline : exp }); } Show progress of loading \u00b6 var images = [ 'img/file1.png' , 'img/file2.png' , 'img/file3.png' ]; jsPsych . pluginAPI . preloadImages ( images , function (){ startExperiment (); }, function ( nLoaded ) { updateLoadedCount ( nLoaded ); }); function updateLoadedCount ( nLoaded ){ var percentcomplete = nLoaded / images . length * 100 ; // could put something fancier here, like a progress bar // or updating text in the DOM. console . log ( 'Loaded ' + percentcomplete + '% of images' ); } function startExperiment (){ jsPsych . init ({ timeline : exp }); } jsPsych.pluginAPI.registerPreload \u00b6 jsPsych.pluginAPI.registerPreload(plugin_name, parameter, media_type, conditional_function) Parameters \u00b6 Parameter Type Description plugin_name string The name of the plugin. e.g., 'image-keyboard-response'. parameter string The name of the parameter that is a media file. e.g., 'stimulus' media_type string The type of media, either 'image', 'audio' or 'video'. conditional_function function Only run the preload for a trial if this function returns true, or if this function does not exist. Return value \u00b6 Nothing. Description \u00b6 Use this method in a plugin file to mark a parameter as containing an element that should be preloaded. The method should be called in the plugin file such that it gets called when the file is loaded. The conditional_function function is passed a single argument containing the trial object. Example \u00b6 For an example, see the image-keyboard-response and audio-keyboard-response plugins. jsPsych.pluginAPI.setTimeout \u00b6 jsPsych.pluginAPI.setTimeout(callback, delay) Parameters \u00b6 Parameter Type Description callback function A function to execute after waiting for delay. delay integer Time to wait in milliseconds. Return value \u00b6 Returns the ID of the setTimeout handle. Description \u00b6 This is simply a call to the standard setTimeout function in JavaScript with the added benefit of registering the setTimeout call in a central list. This is useful for scenarios where some other event (the trial ending, aborting the experiment) should stop the execution of queued timeouts. Examples \u00b6 // print the time console . log ( Date . now ()) // print the time 1s later jsPsych . pluginAPI . setTimeout ( function (){ console . log ( Date . now ()) }, 1000 );","title":"jsPsych.pluginAPI"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapi","text":"The pluginAPI module contains functions that are useful when developing new plugins.","title":"jsPsych.pluginAPI"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapiautopreload","text":"jsPsych.pluginAPI.autoPreload(timeline, callback)","title":"jsPsych.pluginAPI.autoPreload"},{"location":"core_library/jspsych-pluginAPI/#parameters","text":"Parameter Type Description timeline TimelineNode object A TimelineNode object that contains an arbitrary set of trials. callback function A function to execute when loading is complete","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description","text":"Attempts to preload all image files and audio files that will be used to run the trials on the timeline. Content will only preload from plugins that have used the registerPreload method to define the media types of their parameters. The callback function executes once all of the files are preloaded. This method is used internally by the core jsPsych code. It is not recommended that you call it manually.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples","text":"// you probably shouldn't use this method","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapicancelallkeyboardresponses","text":"jsPsych.pluginAPI.cancelAllKeyboardResponses()","title":"jsPsych.pluginAPI.cancelAllKeyboardResponses"},{"location":"core_library/jspsych-pluginAPI/#parameters_1","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_1","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_1","text":"Cancels all currently active keyboard listeners created by jsPsych.pluginAPI.getKeyboardResponse .","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_1","text":"jsPsych . pluginAPI . cancelAllKeyboardResponses ();","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapicancelkeyboardresponse","text":"jsPsych.pluginAPI.cancelKeyboardResponse(listener_id)","title":"jsPsych.pluginAPI.cancelKeyboardResponse"},{"location":"core_library/jspsych-pluginAPI/#parameters_2","text":"Parameter Type Description listener_id object The listener_id object generated by the call to jsPsych.pluginAPI.getKeyboardResponse .","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_2","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_2","text":"Cancels a specific keyboard listener created by jsPsych.pluginAPI.getKeyboardResponse .","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_2","text":"// create a persistent keyboard listener var listener_id = jsPsych . pluginAPI . getKeyboardResponse ({ callback_function : after_response , valid_responses : [ 'p' , 'q' ], rt_method : 'performance' , persist : true , allow_held_key : false }); // cancel keyboard listener jsPsych . pluginAPI . cancelKeyboardResponse ( listener_id );","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapiclearalltimeouts","text":"jsPsych.pluginAPI.clearAllTimeouts()","title":"jsPsych.pluginAPI.clearAllTimeouts"},{"location":"core_library/jspsych-pluginAPI/#parameters_3","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_3","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_3","text":"Clears any pending timeouts that were set using jsPsych.pluginAPI.setTimeout()","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapicomparekeys","text":"jsPsych.pluginAPI.compareKeys(key1, key2)","title":"jsPsych.pluginAPI.compareKeys"},{"location":"core_library/jspsych-pluginAPI/#parameters_4","text":"Parameter Type Description key1 string or numeric The representation of a key, either string or keycode key2 string or numeric The representation of a key, either string or keycode","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_4","text":"Returns true if keycodes or strings refer to the same key, regardless of type.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_4","text":"Compares two keys to see if they are the same, ignoring differences in representational type.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_3","text":"jsPsych . pluginAPI . compareKeys ( 'a' , 65 ); // returns true jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'space' , 31 ) // returns false","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapiconvertkeycharactertokeycode","text":"jsPsych.pluginAPI.convertKeyCharacterToKeyCode(character)","title":"jsPsych.pluginAPI.convertKeyCharacterToKeyCode"},{"location":"core_library/jspsych-pluginAPI/#parameters_5","text":"Parameter Type Description character string The string representation of keyboard key.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_5","text":"Returns the numeric keycode associated with the character parameter.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_5","text":"Converts between the string representation of a key and the numeric key code associated with that key.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_4","text":"var keycode = jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'a' ) // keycode is 65 keycode = jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'space' ) // keycode is 32","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapiconvertkeycodetokeycharacter","text":"jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(character)","title":"jsPsych.pluginAPI.convertKeyCodeToKeyCharacter"},{"location":"core_library/jspsych-pluginAPI/#parameters_6","text":"Parameter Type Description code numeric The numeric representation of keyboard key.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_6","text":"Returns the string representation of the key associated with the code parameter.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_6","text":"Converts between the numeric key code of a key and the string representation associated with that key.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_5","text":"var keycode = jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 65 ) // key is 'a' keycode = jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 32 ) // keycode is 'space'","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapigetaudiobuffer","text":"jsPsych.pluginAPI.getAudioBuffer(filepath)","title":"jsPsych.pluginAPI.getAudioBuffer"},{"location":"core_library/jspsych-pluginAPI/#parameters_7","text":"Parameter Type Description filepath string The path to the audio file that was preloaded.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_7","text":"Returns buffered audio file for playback. If the browser supports it the buffer will be playable with the WebAudio API. Otherwise, the returned buffer will be an HTML5 Audio object.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_7","text":"Gets an AudioBuffer that can be played with the WebAudio API or an Audio object that can be played with HTML5 Audio. The file must be preloaded with preloadAudioFiles or the automatic preload ( autoPreload ).","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_6","text":"// the code below is used to play audio in the audio-keyboard-response plugin var source = context . createBufferSource (); source . buffer = jsPsych . pluginAPI . getAudioBuffer ( trial . stimulus ); source . connect ( context . destination ); startTime = context . currentTime ; source . start ( startTime );","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapigetkeyboardresponse","text":"jsPsych.pluginAPI.getKeyboardResponse(parameters)","title":"jsPsych.pluginAPI.getKeyboardResponse"},{"location":"core_library/jspsych-pluginAPI/#parameters_8","text":"The method accepts an object of parameter values (see example below). The valid keys for this object are listed in the table below. Parameter Type Description callback_function function The function to execute whenever a valid keyboard response is generated. valid_responses array An array of key codes or character strings representing valid responses. Responses not on the list will be ignored. An empty array indicates that all responses are acceptable. rt_method string Indicates which method of recording time to use. The 'performance' method uses calls to performance.now() , which is the standard way of measuring timing in jsPsych. It is supported by up-to-date versions of all the major browsers . The audio method is used in conjuction with an audio_context (set as an additional parameter). This uses the clock time of the audio_context when audio stimuli are being played. audio_context AudioContext object The AudioContext of the audio file that is being played. audio_context_start_time numeric The scheduled time of the sound file in the AudioContext. This will be used as the start time. allow_held_key boolean If true , then responses will be registered from keys that are being held down. If false , then a held key can only register a response the first time that getKeyboardResponse is called for that key. For example, if a participant holds down the A key before the experiment starts, then the first time getKeyboardResponse is called, the A will register as a key press. However, any future calls to getKeyboardResponse will not register the A until the participant releases the key and presses it again. persist boolean If false, then the keyboard listener will only trigger the first time a valid key is pressed. If true, then it will trigger every time a valid key is pressed until it is explicitly cancelled by jsPsych.pluginAPI.cancelKeyboardResponse or jsPsych.pluginAPI.cancelAllKeyboardResponses .","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_8","text":"Return an object that uniquely identifies the keyboard listener. This object can be passed to jsPsych.pluginAPI.cancelKeyboardResponse to cancel the keyboard listener.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_8","text":"Gets a keyboard response from the subject, recording the response time from when the function is first called until a valid response is generated. The keyboard event listener will be bound to the display_element declared in jsPsych.init() (or the <body> element if no display_element is specified). This allows jsPsych experiments to be embedded in websites with other content without disrupting the functionality of other UI elements. A valid response triggers the callback_function specified in the parameters. A single argument is passed to the callback function. The argument contains an object with the properties key and rt . key contains the numeric key code of the response, and rt contains the response time.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_7","text":"","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#get-a-single-response-from-any-key","text":"var after_response = function ( info ){ alert ( 'You pressed key ' + info . key + ' after ' + info . rt + 'ms' ); } jsPsych . pluginAPI . getKeyboardResponse ({ callback_function : after_response , valid_responses : jsPsych . ALL_KEYS , rt_method : 'performance' , persist : false });","title":"Get a single response from any key"},{"location":"core_library/jspsych-pluginAPI/#get-a-responses-from-a-key-until-the-letter-q-is-pressed","text":"var after_response = function ( info ){ alert ( 'You pressed key ' + info . key + ' after ' + info . rt + 'ms' ); if ( info . key == 81 ){ // the key code for 'Q' is 81. jsPsych . pluginAPI . cancelKeyboardResponse ( listener ); } } var listener = jsPsych . pluginAPI . getKeyboardResponse ({ callback_function : after_response , valid_responses : jsPsych . ALL_KEYS , rt_method : 'performance' , persist : true });","title":"Get a responses from a key until the letter Q is pressed"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapipreloadaudiofiles","text":"jsPsych.pluginAPI.preloadAudioFiles(files, callback_complete, callback_load)","title":"jsPsych.pluginAPI.preloadAudioFiles"},{"location":"core_library/jspsych-pluginAPI/#parameters_9","text":"Parameter Type Description files array An array of audio file paths to load. The array can be nested (e.g., if images are in multiple arrays to help sort by condition or task). callback_complete function A function to execute when all the files have been loaded. callback_load function A function to execute after each file has been loaded. A single parameter is passed to this function which contains the number of files that have been loaded so far.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_9","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_9","text":"Use this function to preload audio files that are not part of a plugin with automatic preloading. Audio files in official plugins will automatically preload. See Media Preloading for more information. It is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the files are loaded. Thus, it is possible that an audio file would be required for playing before it is done preloading. The callback_complete function will only execute after all the audio files are loaded, and can be used to control the flow of the experiment (e.g., by starting the experiment in the callback_complete function). The callback_load function can be used to indicate progress. See example below.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_8","text":"","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#basic-use","text":"var sounds = [ 'file1.mp3' , 'file2.mp3' , 'file3.mp3' ]; jsPsych . pluginAPI . preloadAudioFiles ( sounds , function (){ startExperiment (); }); function startExperiment (){ jsPsych . init ({ timeline : exp }); }","title":"Basic use"},{"location":"core_library/jspsych-pluginAPI/#show-progress-of-loading","text":"var sounds = [ 'file1.mp3' , 'file2.mp3' , 'file3.mp3' ]; jsPsych . pluginAPI . preloadAudioFiles ( sounds , function (){ startExperiment (); }, function ( nLoaded ) { updateLoadedCount ( nLoaded ); }); function updateLoadedCount ( nLoaded ){ var percentcomplete = nLoaded / sounds . length * 100 ; // could put something fancier here, like a progress bar // or updating text in the DOM. console . log ( 'Loaded ' + percentcomplete + '% of audio files' ); } function startExperiment (){ jsPsych . init ({ timeline : exp }); }","title":"Show progress of loading"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapipreloadimages","text":"jsPsych.pluginAPI.preloadImages(images, callback_complete, callback_load)","title":"jsPsych.pluginAPI.preloadImages"},{"location":"core_library/jspsych-pluginAPI/#parameters_10","text":"Parameter Type Description images array An array of image paths to load. The array can be nested (e.g., if images are in multiple arrays to help sort by condition or task). callback_complete function A function to execute when all the images have been loaded. callback_load function A function to execute after each image has been loaded. A single parameter is passed to this function which contains the number of images that have been loaded so far.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_10","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_10","text":"Use this function to preload image files that are not part of a plugin with automatic preloading. Image files in official plugins will automatically preload. See Media Preloading for more information. It is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the images are loaded. Thus, it is possible that an image would be required for display before it is done preloading. The callback_complete function will only execute after all the images are loaded, and can be used to control the flow of the experiment (e.g., by starting the experiment in the callback_complete function). The callback_load function can be used to indicate progress, if the number of images to be loaded is known ahead of time. See example below.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_9","text":"","title":"Examples"},{"location":"core_library/jspsych-pluginAPI/#basic-use_1","text":"var images = [ 'img/file1.png' , 'img/file2.png' , 'img/file3.png' ]; jsPsych . pluginAPI . preloadImages ( images , function (){ startExperiment (); }); function startExperiment (){ jsPsych . init ({ timeline : exp }); }","title":"Basic use"},{"location":"core_library/jspsych-pluginAPI/#show-progress-of-loading_1","text":"var images = [ 'img/file1.png' , 'img/file2.png' , 'img/file3.png' ]; jsPsych . pluginAPI . preloadImages ( images , function (){ startExperiment (); }, function ( nLoaded ) { updateLoadedCount ( nLoaded ); }); function updateLoadedCount ( nLoaded ){ var percentcomplete = nLoaded / images . length * 100 ; // could put something fancier here, like a progress bar // or updating text in the DOM. console . log ( 'Loaded ' + percentcomplete + '% of images' ); } function startExperiment (){ jsPsych . init ({ timeline : exp }); }","title":"Show progress of loading"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapiregisterpreload","text":"jsPsych.pluginAPI.registerPreload(plugin_name, parameter, media_type, conditional_function)","title":"jsPsych.pluginAPI.registerPreload"},{"location":"core_library/jspsych-pluginAPI/#parameters_11","text":"Parameter Type Description plugin_name string The name of the plugin. e.g., 'image-keyboard-response'. parameter string The name of the parameter that is a media file. e.g., 'stimulus' media_type string The type of media, either 'image', 'audio' or 'video'. conditional_function function Only run the preload for a trial if this function returns true, or if this function does not exist.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_11","text":"Nothing.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_11","text":"Use this method in a plugin file to mark a parameter as containing an element that should be preloaded. The method should be called in the plugin file such that it gets called when the file is loaded. The conditional_function function is passed a single argument containing the trial object.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#example","text":"For an example, see the image-keyboard-response and audio-keyboard-response plugins.","title":"Example"},{"location":"core_library/jspsych-pluginAPI/#jspsychpluginapisettimeout","text":"jsPsych.pluginAPI.setTimeout(callback, delay)","title":"jsPsych.pluginAPI.setTimeout"},{"location":"core_library/jspsych-pluginAPI/#parameters_12","text":"Parameter Type Description callback function A function to execute after waiting for delay. delay integer Time to wait in milliseconds.","title":"Parameters"},{"location":"core_library/jspsych-pluginAPI/#return-value_12","text":"Returns the ID of the setTimeout handle.","title":"Return value"},{"location":"core_library/jspsych-pluginAPI/#description_12","text":"This is simply a call to the standard setTimeout function in JavaScript with the added benefit of registering the setTimeout call in a central list. This is useful for scenarios where some other event (the trial ending, aborting the experiment) should stop the execution of queued timeouts.","title":"Description"},{"location":"core_library/jspsych-pluginAPI/#examples_10","text":"// print the time console . log ( Date . now ()) // print the time 1s later jsPsych . pluginAPI . setTimeout ( function (){ console . log ( Date . now ()) }, 1000 );","title":"Examples"},{"location":"core_library/jspsych-randomization/","text":"jsPsych.randomization \u00b6 The jsPsych.randomization module contains methods that are useful for generating random lists of trial variables. jsPsych.randomization.factorial \u00b6 jsPsych.randomization.factorial(factors, repetitions, unpack) Parameters \u00b6 Parameter Type Description factors object The factors object should contain a property for each different factor. Each property-factor should have a value of an array, with each element of the array corresponding to a level of the factor. repetitions integer The number of times to repeat each unique combination of the factors in the output sample. unpack boolean If true then the output will be an object with a property for each factor in the original factors object. The value of each property-factor will be an array containing the levels of the factor in a random order. The order will be consistent across each property-factor (e.g., the first element of each property-factor will specify one unique combination of the factors). If false , then the return value will be an array of objects where each property-factor contains only a single value. Return value \u00b6 The return value depends on the unpack parameter. See description of the parameter above, and examples below. Description \u00b6 This method takes a list of factors and their levels, and creates a full factorial design by creating each unique combination of the factors. The returned set of combinations is in a random order. Examples \u00b6 Create full factorial design \u00b6 var factors = { stimulus : [ 'a.jpg' , 'b.jpg' ], ms_delay : [ 100 , 200 ] } var full_design = jsPsych . randomization . factorial ( factors , 1 ); /* output: full_design = [ {stimulus: 'a.jpg', ms_delay: 200}, {stimulus: 'b.jpg', ms_delay: 200}, {stimulus: 'b.jpg', ms_delay: 100}, {stimulus: 'a.jpg', ms_delay: 100}, ] */ Create full factorial design with repeats \u00b6 var factors = { stimulus : [ 'a.jpg' , 'b.jpg' ], ms_delay : [ 100 , 200 ] } var full_design = jsPsych . randomization . factorial ( factors , 2 ); /* output: full_design = [ {stimulus: 'b.jpg', ms_delay: 200}, {stimulus: 'b.jpg', ms_delay: 100}, {stimulus: 'b.jpg', ms_delay: 100}, {stimulus: 'a.jpg', ms_delay: 100}, {stimulus: 'a.jpg', ms_delay: 200}, {stimulus: 'b.jpg', ms_delay: 200}, {stimulus: 'a.jpg', ms_delay: 100}, {stimulus: 'a.jpg', ms_delay: 200}, ] */ Create full factorial design, unpacked \u00b6 var factors = { stimulus : [ 'a.jpg' , 'b.jpg' ], ms_delay : [ 100 , 200 ] } var full_design = jsPsych . randomization . factorial ( factors , 1 , true ); /* output: full_design = { stimulus: ['a.jpg','b.jpg','b.jpg','a.jpg'], ms_delay: [200, 100, 200, 100] ] */ jsPsych.randomization.randomID \u00b6 jsPsych.randomization.randomID(length) Parameters \u00b6 Parameter Type Description length integer The length of the randomly generated ID Return value \u00b6 Returns a string of length length where each character is randomly selected from the numbers 0-9 and all lowercase English letters a-z. Description \u00b6 Generates a random string that is likely to be unique. If length is undefined, then the string length is 32. Example \u00b6 console . log ( jsPsych . randomization . randomID ()); // outputs: \"t7dwz0e713pc8juuaayyfvpkdd9un239\" console . log ( jsPsych . randomization . randomID ( 8 )); // outputs: \"3xtpcbck\" jsPsych.randomization.repeat \u00b6 jsPsych.randomization.repeat(array, repetitions, unpack) Parameters \u00b6 Parameter Type Description array array The array of values to randomize & repeat. repetitions integer or array The number of times to repeat each element of the array in the final sample. If this parameter is defined as an integer, then each element of array is repeated the same number of times. This parameter can also be an array of the same length as array , in which case each element of array will be repeated the number of times defined in the corresponding position of the repetitions array. unpack boolean If each element of array is an object with an equivalent set of properties, then setting unpack to true will make the return value an object with a property for each of the unique properties among the elements of the array . Each property in the output object will be an array containing the values for that property in the randomized order. The order will be consistent across properties. If this is false then the output is just an array containing a randomized order of the original array elements. Return value \u00b6 The return value depends on the unpack parameter. See description of the parameter above, and examples below. Description \u00b6 This method takes an array of values and generates a new random order of the array, with the option of repeating each element of the array a specified number of times. If the array elements are objects with the same set of properties, then this method can optionally return a single object where each property is a randomized order of the properties defined in the original set of objects. This is useful for randomizing sets of parameters that are used to define a jsPsych block. Examples \u00b6 Shuffle an array, no repeats \u00b6 var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var shuffledArray = jsPsych . randomization . repeat ( myArray , 1 ); // output: shuffledArray = [3,2,4,1,5] Shuffle an array with repeats \u00b6 var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var shuffledArray = jsPsych . randomization . repeat ( myArray , 2 ); // output: shuffledArray = [1,3,4,2,2,4,5,1,5,3] Shuffle an array of objects \u00b6 var trial1 = { stimulus : 'img/faceA.jpg' , correct_key : 80 , person_name : 'Joe' } var trial2 = { stimulus : 'img/faceB.jpg' , correct_key : 80 , person_name : 'Fred' } var trial3 = { stimulus : 'img/faceC.jpg' , correct_key : 81 , person_name : 'Mary' } var myArray = [ trial1 , trial2 , trial3 ]; var shuffledArray = jsPsych . randomization . repeat ( myArray , 2 ); // output: shuffledArray = [ trial1, trial3, trial3, trial2, trial1, trial2 ] Shuffle an array of objects, with unpack \u00b6 var trial1 = { stimulus : 'img/faceA.jpg' , correct_key : 80 , person_name : 'Joe' } var trial2 = { stimulus : 'img/faceB.jpg' , correct_key : 80 , person_name : 'Fred' } var trial3 = { stimulus : 'img/faceC.jpg' , correct_key : 81 , person_name : 'Mary' } var myArray = [ trial1 , trial2 , trial3 ]; var shuffledArray = jsPsych . randomization . repeat ( myArray , 2 , true ); /* output: shuffledArray = { stimulus: ['img/faceB.jpg','img/faceA.jpg','img/faceC.jpg','img/faceA.jpg','img/faceC.jpg','img/faceB.jpg'], correct_key: [80, 80, 81, 80, 81, 80], person_name: ['Fred','Joe', 'Mary', 'Joe', 'Mary', 'Fred'] } */ jsPsych.randomization.sampleWithReplacement \u00b6 jsPsych.randomization.sampleWithReplacement(array, sampleSize, weights) Parameters \u00b6 Parameter Type Description array array The array of values to sample from sampleSize numeric The number of samples to draw weights array The relative weight of each element in array . This array is normalized, so the values do not need to sum to 1. The length must match the length of array . Return value \u00b6 An array containing the sample. Description \u00b6 This method returns a sample drawn at random from a set of values with replacement. The relative probability of drawing each item can be controlled by specifying the weights . Examples \u00b6 Sample with equal probability \u00b6 var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var sample = jsPsych . randomization . sampleWithReplacement ( myArray , 10 ); // output: sample = [3, 1, 2, 2, 5, 1, 4, 3, 1, 5]; Sample with unequal probability \u00b6 var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var sample = jsPsych . randomization . sampleWithReplacement ( myArray , 10 , [ 6 , 1 , 1 , 1 , 1 ]); // output: sample = [3, 4, 5, 1, 2, 1, 3, 1, 1, 1]; jsPsych.randomization.sampleWithoutReplacement \u00b6 jsPsych.randomization.sampleWithoutReplacement(array, sampleSize) Parameters \u00b6 Parameter Type Description array array The array of values to sample from sampleSize numeric The number of samples to draw Return value \u00b6 An array containing the sample. Description \u00b6 This method returns a sample drawn at random from a set of values without replacement. The sample size must be less than or equal to the length of the array. Examples \u00b6 Sample without replacement \u00b6 var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var sample = jsPsych . randomization . sampleWithoutReplacement ( myArray , 2 ); // output: sample = [3,2]; jsPsych.randomization.shuffle \u00b6 jsPsych.randomization.shuffle(array) Parameters \u00b6 Parameter Type Description array array The array of values to shuffle Return value \u00b6 Returns an array with the same elements as the input array in a random order. Description \u00b6 A simple method for shuffling the order of an array. Examples \u00b6 Shuffle an array \u00b6 var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var shuffledArray = jsPsych . randomization . shuffle ( myArray ); // output: shuffledArray = [3,2,4,1,5] jsPsych.randomization.shuffleNoRepeats \u00b6 jsPsych.randomization.shuffleNoRepeats(array, equalityTest) Parameters \u00b6 Parameter Type Description array array The array of values to shuffle equalityTest function A function to use to evaluate the equality of neighbors in the array. The function should accept two parameters, which are the two elements to be tested. It should return true if they are equal and false if not. The default function, if none is specified, is to use the === operator. This will work for primitive values, but fail for Objects and Arrays. An example function is given below in the examples. Return value \u00b6 Returns an array with the same elements as the input array in a random order, with no repeating neighbors. Description \u00b6 Shuffle an array, ensuring that neighboring elements in the array are different. Warning: if you provide an array that has very few valid permutations with no neighboring elements, then this method will fail and cause the browser to hang. Examples \u00b6 Basic example \u00b6 var myArray = [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 ]; var shuffledArray = jsPsych . randomization . shuffleNoRepeats ( myArray ); // output: shuffledArray = [2, 3, 5, 1, 2, 4, 1, 5, 4, 1, 3, 5, 4, 3, 2] Custom equalityTest \u00b6 var myObjects = [ { color : \"blue\" }, { color : \"red\" }, { color : \"yellow\" }, { color : \"orange\" } ]; var repeatedSet = jsPsych . randomization . repeat ( myObjects , 3 ); var shuffled = jsPsych . randomization . shuffleNoRepeats ( repeatedSet , function ( a , b ) { return a . color === b . color }); // console.log(JSON.stringify(shuffled)) // \"[{\"color\":\"red\"},{\"color\":\"yellow\"},{\"color\":\"blue\"},{\"color\":\"yellow\"},{\"color\":\"orange\"},{\"color\":\"red\"},{\"color\":\"yellow\"},{\"color\":\"orange\"},{\"color\":\"blue\"},{\"color\":\"orange\"},{\"color\":\"red\"},{\"color\":\"blue\"}]\"","title":"jsPsych.randomization"},{"location":"core_library/jspsych-randomization/#jspsychrandomization","text":"The jsPsych.randomization module contains methods that are useful for generating random lists of trial variables.","title":"jsPsych.randomization"},{"location":"core_library/jspsych-randomization/#jspsychrandomizationfactorial","text":"jsPsych.randomization.factorial(factors, repetitions, unpack)","title":"jsPsych.randomization.factorial"},{"location":"core_library/jspsych-randomization/#parameters","text":"Parameter Type Description factors object The factors object should contain a property for each different factor. Each property-factor should have a value of an array, with each element of the array corresponding to a level of the factor. repetitions integer The number of times to repeat each unique combination of the factors in the output sample. unpack boolean If true then the output will be an object with a property for each factor in the original factors object. The value of each property-factor will be an array containing the levels of the factor in a random order. The order will be consistent across each property-factor (e.g., the first element of each property-factor will specify one unique combination of the factors). If false , then the return value will be an array of objects where each property-factor contains only a single value.","title":"Parameters"},{"location":"core_library/jspsych-randomization/#return-value","text":"The return value depends on the unpack parameter. See description of the parameter above, and examples below.","title":"Return value"},{"location":"core_library/jspsych-randomization/#description","text":"This method takes a list of factors and their levels, and creates a full factorial design by creating each unique combination of the factors. The returned set of combinations is in a random order.","title":"Description"},{"location":"core_library/jspsych-randomization/#examples","text":"","title":"Examples"},{"location":"core_library/jspsych-randomization/#create-full-factorial-design","text":"var factors = { stimulus : [ 'a.jpg' , 'b.jpg' ], ms_delay : [ 100 , 200 ] } var full_design = jsPsych . randomization . factorial ( factors , 1 ); /* output: full_design = [ {stimulus: 'a.jpg', ms_delay: 200}, {stimulus: 'b.jpg', ms_delay: 200}, {stimulus: 'b.jpg', ms_delay: 100}, {stimulus: 'a.jpg', ms_delay: 100}, ] */","title":"Create full factorial design"},{"location":"core_library/jspsych-randomization/#create-full-factorial-design-with-repeats","text":"var factors = { stimulus : [ 'a.jpg' , 'b.jpg' ], ms_delay : [ 100 , 200 ] } var full_design = jsPsych . randomization . factorial ( factors , 2 ); /* output: full_design = [ {stimulus: 'b.jpg', ms_delay: 200}, {stimulus: 'b.jpg', ms_delay: 100}, {stimulus: 'b.jpg', ms_delay: 100}, {stimulus: 'a.jpg', ms_delay: 100}, {stimulus: 'a.jpg', ms_delay: 200}, {stimulus: 'b.jpg', ms_delay: 200}, {stimulus: 'a.jpg', ms_delay: 100}, {stimulus: 'a.jpg', ms_delay: 200}, ] */","title":"Create full factorial design with repeats"},{"location":"core_library/jspsych-randomization/#create-full-factorial-design-unpacked","text":"var factors = { stimulus : [ 'a.jpg' , 'b.jpg' ], ms_delay : [ 100 , 200 ] } var full_design = jsPsych . randomization . factorial ( factors , 1 , true ); /* output: full_design = { stimulus: ['a.jpg','b.jpg','b.jpg','a.jpg'], ms_delay: [200, 100, 200, 100] ] */","title":"Create full factorial design, unpacked"},{"location":"core_library/jspsych-randomization/#jspsychrandomizationrandomid","text":"jsPsych.randomization.randomID(length)","title":"jsPsych.randomization.randomID"},{"location":"core_library/jspsych-randomization/#parameters_1","text":"Parameter Type Description length integer The length of the randomly generated ID","title":"Parameters"},{"location":"core_library/jspsych-randomization/#return-value_1","text":"Returns a string of length length where each character is randomly selected from the numbers 0-9 and all lowercase English letters a-z.","title":"Return value"},{"location":"core_library/jspsych-randomization/#description_1","text":"Generates a random string that is likely to be unique. If length is undefined, then the string length is 32.","title":"Description"},{"location":"core_library/jspsych-randomization/#example","text":"console . log ( jsPsych . randomization . randomID ()); // outputs: \"t7dwz0e713pc8juuaayyfvpkdd9un239\" console . log ( jsPsych . randomization . randomID ( 8 )); // outputs: \"3xtpcbck\"","title":"Example"},{"location":"core_library/jspsych-randomization/#jspsychrandomizationrepeat","text":"jsPsych.randomization.repeat(array, repetitions, unpack)","title":"jsPsych.randomization.repeat"},{"location":"core_library/jspsych-randomization/#parameters_2","text":"Parameter Type Description array array The array of values to randomize & repeat. repetitions integer or array The number of times to repeat each element of the array in the final sample. If this parameter is defined as an integer, then each element of array is repeated the same number of times. This parameter can also be an array of the same length as array , in which case each element of array will be repeated the number of times defined in the corresponding position of the repetitions array. unpack boolean If each element of array is an object with an equivalent set of properties, then setting unpack to true will make the return value an object with a property for each of the unique properties among the elements of the array . Each property in the output object will be an array containing the values for that property in the randomized order. The order will be consistent across properties. If this is false then the output is just an array containing a randomized order of the original array elements.","title":"Parameters"},{"location":"core_library/jspsych-randomization/#return-value_2","text":"The return value depends on the unpack parameter. See description of the parameter above, and examples below.","title":"Return value"},{"location":"core_library/jspsych-randomization/#description_2","text":"This method takes an array of values and generates a new random order of the array, with the option of repeating each element of the array a specified number of times. If the array elements are objects with the same set of properties, then this method can optionally return a single object where each property is a randomized order of the properties defined in the original set of objects. This is useful for randomizing sets of parameters that are used to define a jsPsych block.","title":"Description"},{"location":"core_library/jspsych-randomization/#examples_1","text":"","title":"Examples"},{"location":"core_library/jspsych-randomization/#shuffle-an-array-no-repeats","text":"var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var shuffledArray = jsPsych . randomization . repeat ( myArray , 1 ); // output: shuffledArray = [3,2,4,1,5]","title":"Shuffle an array, no repeats"},{"location":"core_library/jspsych-randomization/#shuffle-an-array-with-repeats","text":"var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var shuffledArray = jsPsych . randomization . repeat ( myArray , 2 ); // output: shuffledArray = [1,3,4,2,2,4,5,1,5,3]","title":"Shuffle an array with repeats"},{"location":"core_library/jspsych-randomization/#shuffle-an-array-of-objects","text":"var trial1 = { stimulus : 'img/faceA.jpg' , correct_key : 80 , person_name : 'Joe' } var trial2 = { stimulus : 'img/faceB.jpg' , correct_key : 80 , person_name : 'Fred' } var trial3 = { stimulus : 'img/faceC.jpg' , correct_key : 81 , person_name : 'Mary' } var myArray = [ trial1 , trial2 , trial3 ]; var shuffledArray = jsPsych . randomization . repeat ( myArray , 2 ); // output: shuffledArray = [ trial1, trial3, trial3, trial2, trial1, trial2 ]","title":"Shuffle an array of objects"},{"location":"core_library/jspsych-randomization/#shuffle-an-array-of-objects-with-unpack","text":"var trial1 = { stimulus : 'img/faceA.jpg' , correct_key : 80 , person_name : 'Joe' } var trial2 = { stimulus : 'img/faceB.jpg' , correct_key : 80 , person_name : 'Fred' } var trial3 = { stimulus : 'img/faceC.jpg' , correct_key : 81 , person_name : 'Mary' } var myArray = [ trial1 , trial2 , trial3 ]; var shuffledArray = jsPsych . randomization . repeat ( myArray , 2 , true ); /* output: shuffledArray = { stimulus: ['img/faceB.jpg','img/faceA.jpg','img/faceC.jpg','img/faceA.jpg','img/faceC.jpg','img/faceB.jpg'], correct_key: [80, 80, 81, 80, 81, 80], person_name: ['Fred','Joe', 'Mary', 'Joe', 'Mary', 'Fred'] } */","title":"Shuffle an array of objects, with unpack"},{"location":"core_library/jspsych-randomization/#jspsychrandomizationsamplewithreplacement","text":"jsPsych.randomization.sampleWithReplacement(array, sampleSize, weights)","title":"jsPsych.randomization.sampleWithReplacement"},{"location":"core_library/jspsych-randomization/#parameters_3","text":"Parameter Type Description array array The array of values to sample from sampleSize numeric The number of samples to draw weights array The relative weight of each element in array . This array is normalized, so the values do not need to sum to 1. The length must match the length of array .","title":"Parameters"},{"location":"core_library/jspsych-randomization/#return-value_3","text":"An array containing the sample.","title":"Return value"},{"location":"core_library/jspsych-randomization/#description_3","text":"This method returns a sample drawn at random from a set of values with replacement. The relative probability of drawing each item can be controlled by specifying the weights .","title":"Description"},{"location":"core_library/jspsych-randomization/#examples_2","text":"","title":"Examples"},{"location":"core_library/jspsych-randomization/#sample-with-equal-probability","text":"var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var sample = jsPsych . randomization . sampleWithReplacement ( myArray , 10 ); // output: sample = [3, 1, 2, 2, 5, 1, 4, 3, 1, 5];","title":"Sample with equal probability"},{"location":"core_library/jspsych-randomization/#sample-with-unequal-probability","text":"var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var sample = jsPsych . randomization . sampleWithReplacement ( myArray , 10 , [ 6 , 1 , 1 , 1 , 1 ]); // output: sample = [3, 4, 5, 1, 2, 1, 3, 1, 1, 1];","title":"Sample with unequal probability"},{"location":"core_library/jspsych-randomization/#jspsychrandomizationsamplewithoutreplacement","text":"jsPsych.randomization.sampleWithoutReplacement(array, sampleSize)","title":"jsPsych.randomization.sampleWithoutReplacement"},{"location":"core_library/jspsych-randomization/#parameters_4","text":"Parameter Type Description array array The array of values to sample from sampleSize numeric The number of samples to draw","title":"Parameters"},{"location":"core_library/jspsych-randomization/#return-value_4","text":"An array containing the sample.","title":"Return value"},{"location":"core_library/jspsych-randomization/#description_4","text":"This method returns a sample drawn at random from a set of values without replacement. The sample size must be less than or equal to the length of the array.","title":"Description"},{"location":"core_library/jspsych-randomization/#examples_3","text":"","title":"Examples"},{"location":"core_library/jspsych-randomization/#sample-without-replacement","text":"var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var sample = jsPsych . randomization . sampleWithoutReplacement ( myArray , 2 ); // output: sample = [3,2];","title":"Sample without replacement"},{"location":"core_library/jspsych-randomization/#jspsychrandomizationshuffle","text":"jsPsych.randomization.shuffle(array)","title":"jsPsych.randomization.shuffle"},{"location":"core_library/jspsych-randomization/#parameters_5","text":"Parameter Type Description array array The array of values to shuffle","title":"Parameters"},{"location":"core_library/jspsych-randomization/#return-value_5","text":"Returns an array with the same elements as the input array in a random order.","title":"Return value"},{"location":"core_library/jspsych-randomization/#description_5","text":"A simple method for shuffling the order of an array.","title":"Description"},{"location":"core_library/jspsych-randomization/#examples_4","text":"","title":"Examples"},{"location":"core_library/jspsych-randomization/#shuffle-an-array","text":"var myArray = [ 1 , 2 , 3 , 4 , 5 ]; var shuffledArray = jsPsych . randomization . shuffle ( myArray ); // output: shuffledArray = [3,2,4,1,5]","title":"Shuffle an array"},{"location":"core_library/jspsych-randomization/#jspsychrandomizationshufflenorepeats","text":"jsPsych.randomization.shuffleNoRepeats(array, equalityTest)","title":"jsPsych.randomization.shuffleNoRepeats"},{"location":"core_library/jspsych-randomization/#parameters_6","text":"Parameter Type Description array array The array of values to shuffle equalityTest function A function to use to evaluate the equality of neighbors in the array. The function should accept two parameters, which are the two elements to be tested. It should return true if they are equal and false if not. The default function, if none is specified, is to use the === operator. This will work for primitive values, but fail for Objects and Arrays. An example function is given below in the examples.","title":"Parameters"},{"location":"core_library/jspsych-randomization/#return-value_6","text":"Returns an array with the same elements as the input array in a random order, with no repeating neighbors.","title":"Return value"},{"location":"core_library/jspsych-randomization/#description_6","text":"Shuffle an array, ensuring that neighboring elements in the array are different. Warning: if you provide an array that has very few valid permutations with no neighboring elements, then this method will fail and cause the browser to hang.","title":"Description"},{"location":"core_library/jspsych-randomization/#examples_5","text":"","title":"Examples"},{"location":"core_library/jspsych-randomization/#basic-example","text":"var myArray = [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 ]; var shuffledArray = jsPsych . randomization . shuffleNoRepeats ( myArray ); // output: shuffledArray = [2, 3, 5, 1, 2, 4, 1, 5, 4, 1, 3, 5, 4, 3, 2]","title":"Basic example"},{"location":"core_library/jspsych-randomization/#custom-equalitytest","text":"var myObjects = [ { color : \"blue\" }, { color : \"red\" }, { color : \"yellow\" }, { color : \"orange\" } ]; var repeatedSet = jsPsych . randomization . repeat ( myObjects , 3 ); var shuffled = jsPsych . randomization . shuffleNoRepeats ( repeatedSet , function ( a , b ) { return a . color === b . color }); // console.log(JSON.stringify(shuffled)) // \"[{\"color\":\"red\"},{\"color\":\"yellow\"},{\"color\":\"blue\"},{\"color\":\"yellow\"},{\"color\":\"orange\"},{\"color\":\"red\"},{\"color\":\"yellow\"},{\"color\":\"orange\"},{\"color\":\"blue\"},{\"color\":\"orange\"},{\"color\":\"red\"},{\"color\":\"blue\"}]\"","title":"Custom equalityTest"},{"location":"core_library/jspsych-turk/","text":"jsPsych.turk \u00b6 The jsPsych.turk module contains functions for interacting with Mechanical Turk. jsPsych.turk.submitToTurk \u00b6 jsPsych.turk.submitToTurk(data) Parameters \u00b6 Parameter Type Description data object The data parameter is an object of key: value pairs. Any pairs in the data parameter will be saved by Mechanical Turk, and can be downloaded in a CSV file through the Mechanical Turk interface. Important : the data parameter must contain at least one key: value pair, even just a dummy value, or the HIT will not be submitted correctly. Return value \u00b6 Returns nothing. Description \u00b6 This method will submit a HIT to Mechanical Turk, causing the HIT to finish. This method will only work when called from within the mechanical turk website. If you are using an external HIT to send workers to your own server, this method will not work on an externally hosted page. It will work if your external content is loaded in the iframe on the Mechanical Turk website. Example \u00b6 < p > Enter the code you were given: </ p > < input type = \"text\" id = \"code\" ></ input > < button onclick = \"sendData();\" > Submit HIT </ button > < script > // this content must be loaded in the iframe on the mechanical turk website. // usually, this means that the content is part of your 'recruitment ad', the // page the workers can see when they are deciding whether or not to accept a HIT. // one option is to include a simple form on this page that workers submit, with a // special code that they get at the end of the experiment. function sendData () { jsPsych . turk . submitToTurk ({ code : document . getElementById ( 'code' ). value }); } </ script > jsPsych.turk.turkInfo \u00b6 jsPsych.turk.turkInfo() Parameters \u00b6 None. Return value \u00b6 Returns an object with six properties: .assignmentId contains the assignment ID string of the HIT. .hitId contains the HIT ID. .workerId contains the worker ID of the worker completing the HIT. .turkSubmitTo contains the URL for submitting the HIT. This parameter is used in the jsPsych.turk.submitToTurk method, and is probably not useful outside of that context. .previewMode is a boolean value indicating whether or not the worker has accepted the HIT yet. If the page is viewed inside Mechancial Turk and the worker has not clicked 'Accept HIT' then this will be true. If the page is viewed outside Mechanical Turk or the worker has acccepted the HIT, then it will be false. .outsideTurk is a boolean value indicating if the page is being viewed within Mechanical Turk, or if it is being viewed from another source (e.g., someone directly going to the page URL instead of going through mturk). Description \u00b6 This method returns basic information about the current Mechanical Turk session, including the worker ID, assignment ID, and HIT ID. Example \u00b6 var turkInfo = jsPsych . turk . turkInfo (); alert ( 'Worker ID is: ' + turkInfo . workerId ); alert ( 'Assignment ID is: ' + turkInfo . assignmentId ); alert ( 'HIT ID is: ' + turkInfo . hitId ); // true if the page is viewed within Mechanical Turk, // but worker has not accepted the HIT yet. // false if the page is viewed outside Mechanical Turk, // OR the worker has accepted the HIT. alert ( 'Preview mode? ' + turkInfo . previewMode ); // true if the page is viewed outside mechanical turk, // false otherwise. alert ( 'Outside turk? ' + turkInfo . outsideTurk );","title":"jsPsych.turk"},{"location":"core_library/jspsych-turk/#jspsychturk","text":"The jsPsych.turk module contains functions for interacting with Mechanical Turk.","title":"jsPsych.turk"},{"location":"core_library/jspsych-turk/#jspsychturksubmittoturk","text":"jsPsych.turk.submitToTurk(data)","title":"jsPsych.turk.submitToTurk"},{"location":"core_library/jspsych-turk/#parameters","text":"Parameter Type Description data object The data parameter is an object of key: value pairs. Any pairs in the data parameter will be saved by Mechanical Turk, and can be downloaded in a CSV file through the Mechanical Turk interface. Important : the data parameter must contain at least one key: value pair, even just a dummy value, or the HIT will not be submitted correctly.","title":"Parameters"},{"location":"core_library/jspsych-turk/#return-value","text":"Returns nothing.","title":"Return value"},{"location":"core_library/jspsych-turk/#description","text":"This method will submit a HIT to Mechanical Turk, causing the HIT to finish. This method will only work when called from within the mechanical turk website. If you are using an external HIT to send workers to your own server, this method will not work on an externally hosted page. It will work if your external content is loaded in the iframe on the Mechanical Turk website.","title":"Description"},{"location":"core_library/jspsych-turk/#example","text":"< p > Enter the code you were given: </ p > < input type = \"text\" id = \"code\" ></ input > < button onclick = \"sendData();\" > Submit HIT </ button > < script > // this content must be loaded in the iframe on the mechanical turk website. // usually, this means that the content is part of your 'recruitment ad', the // page the workers can see when they are deciding whether or not to accept a HIT. // one option is to include a simple form on this page that workers submit, with a // special code that they get at the end of the experiment. function sendData () { jsPsych . turk . submitToTurk ({ code : document . getElementById ( 'code' ). value }); } </ script >","title":"Example"},{"location":"core_library/jspsych-turk/#jspsychturkturkinfo","text":"jsPsych.turk.turkInfo()","title":"jsPsych.turk.turkInfo"},{"location":"core_library/jspsych-turk/#parameters_1","text":"None.","title":"Parameters"},{"location":"core_library/jspsych-turk/#return-value_1","text":"Returns an object with six properties: .assignmentId contains the assignment ID string of the HIT. .hitId contains the HIT ID. .workerId contains the worker ID of the worker completing the HIT. .turkSubmitTo contains the URL for submitting the HIT. This parameter is used in the jsPsych.turk.submitToTurk method, and is probably not useful outside of that context. .previewMode is a boolean value indicating whether or not the worker has accepted the HIT yet. If the page is viewed inside Mechancial Turk and the worker has not clicked 'Accept HIT' then this will be true. If the page is viewed outside Mechanical Turk or the worker has acccepted the HIT, then it will be false. .outsideTurk is a boolean value indicating if the page is being viewed within Mechanical Turk, or if it is being viewed from another source (e.g., someone directly going to the page URL instead of going through mturk).","title":"Return value"},{"location":"core_library/jspsych-turk/#description_1","text":"This method returns basic information about the current Mechanical Turk session, including the worker ID, assignment ID, and HIT ID.","title":"Description"},{"location":"core_library/jspsych-turk/#example_1","text":"var turkInfo = jsPsych . turk . turkInfo (); alert ( 'Worker ID is: ' + turkInfo . workerId ); alert ( 'Assignment ID is: ' + turkInfo . assignmentId ); alert ( 'HIT ID is: ' + turkInfo . hitId ); // true if the page is viewed within Mechanical Turk, // but worker has not accepted the HIT yet. // false if the page is viewed outside Mechanical Turk, // OR the worker has accepted the HIT. alert ( 'Preview mode? ' + turkInfo . previewMode ); // true if the page is viewed outside mechanical turk, // false otherwise. alert ( 'Outside turk? ' + turkInfo . outsideTurk );","title":"Example"},{"location":"overview/browser-device-support/","text":"Browser and Device Support \u00b6 Desktop and Laptop Browsers \u00b6 Supported jsPsych supports recent versions of the four most commonly-used web browsers: Chrome Firefox Safari Edge This means that jsPsych should work on these browsers. If something doesn't work as you expect on one of the browsers above, it might be a bug that should be fixed. You can search for and report bugs on the jsPsych GitHub Issues page . We're very grateful for anyone who takes the time to report bugs - it helps improve the library for everyone! Unsupported There are many other web browsers that are available, but that are not commonly used. The most well-known of these are Internet Explorer and Opera. jsPsych is not tested on these and other browsers not listed in the Supported section above. jsPsych experiments might work in these browsers, but they might not . If you want to give participants the option to use unsupported browsers, then we recommend carefully testing your experiment to make sure that everything works as expected. Otherwise, we suggest asking your participants to only use a supported browser, or incorporating browser, device, and/or feature checks at the start of your experiment. jsPsych offers built-in methods for exclusion based on minimum browser size and WebAudio API compatibility . You can incorporate other browser/device/feature checks into your experiment by adding custom JavaScript code. Mobile Devices \u00b6 In general, jsPsych experiments can be run on mobile devices (smartphones and tablets). However, certain plugins will not work on mobile. For instance, any plugin that requires a keyboard response without a text input box, such as the *-keyboard-response plugins, will not work. Even plugins that do work on mobile might work differently than they do on desktop and laptop computers. For instance, on mobile devices, a text input box will cause an on-screen keyboard to pop up, which affects the visible content on the screen. If you plan to run an experiment that allows people to use mobile devices, we recommend doing some extra testing to make sure that everything works as expected. In particular, you may want to check that: * Font sizes are readable on smaller screens * Stimuli sizes are large enough and appropriate for the task * Page is laid out as intended (e.g. elements are centered and do not overlap) * Response options are touchscreen-friendly (e.g. buttons rather than key presses) * Response options (e.g. buttons, text boxes, radio buttons) are large enough and far enough apart to be easily selected with a finger tap It's possible to use your browser's developer tools to emulate mobile devices ( this page shows how to do it in Chrome ), which is useful for getting a sense of how your experiment will look on mobile devices. Just be aware that there are limitations to emulator tools, and there are some aspects of mobile devices/browsers that a desktop browser will not be able to simulate. Mobile Browsers \u00b6 The browser options for mobile phones and tablets are slightly different than those for desktop and laptop computers. In addition to mobile versions of Chrome, Firefox, Safari, and Edge, other notable mobile browsers include Opera Mobile, Samsung Internet, UC Browser, and Dolphin. Because of the greater diversity of mobile browsers and volatility in their usage statistics, jsPsych does not officially support any particular set of mobile browsers. However, we do anticipate that most experiments should work in most mobile browsers, especially the mobile versions of browsers that we do support in Desktop mode. If you run into a problem using jsPsych in mobile browsers, please report it on the jsPsych GitHub Issues page ! We do our best to fix browser incompatibilities that are not specific to a single experiment.","title":"Browser and Device Support"},{"location":"overview/browser-device-support/#browser-and-device-support","text":"","title":"Browser and Device Support"},{"location":"overview/browser-device-support/#desktop-and-laptop-browsers","text":"Supported jsPsych supports recent versions of the four most commonly-used web browsers: Chrome Firefox Safari Edge This means that jsPsych should work on these browsers. If something doesn't work as you expect on one of the browsers above, it might be a bug that should be fixed. You can search for and report bugs on the jsPsych GitHub Issues page . We're very grateful for anyone who takes the time to report bugs - it helps improve the library for everyone! Unsupported There are many other web browsers that are available, but that are not commonly used. The most well-known of these are Internet Explorer and Opera. jsPsych is not tested on these and other browsers not listed in the Supported section above. jsPsych experiments might work in these browsers, but they might not . If you want to give participants the option to use unsupported browsers, then we recommend carefully testing your experiment to make sure that everything works as expected. Otherwise, we suggest asking your participants to only use a supported browser, or incorporating browser, device, and/or feature checks at the start of your experiment. jsPsych offers built-in methods for exclusion based on minimum browser size and WebAudio API compatibility . You can incorporate other browser/device/feature checks into your experiment by adding custom JavaScript code.","title":"Desktop and Laptop Browsers"},{"location":"overview/browser-device-support/#mobile-devices","text":"In general, jsPsych experiments can be run on mobile devices (smartphones and tablets). However, certain plugins will not work on mobile. For instance, any plugin that requires a keyboard response without a text input box, such as the *-keyboard-response plugins, will not work. Even plugins that do work on mobile might work differently than they do on desktop and laptop computers. For instance, on mobile devices, a text input box will cause an on-screen keyboard to pop up, which affects the visible content on the screen. If you plan to run an experiment that allows people to use mobile devices, we recommend doing some extra testing to make sure that everything works as expected. In particular, you may want to check that: * Font sizes are readable on smaller screens * Stimuli sizes are large enough and appropriate for the task * Page is laid out as intended (e.g. elements are centered and do not overlap) * Response options are touchscreen-friendly (e.g. buttons rather than key presses) * Response options (e.g. buttons, text boxes, radio buttons) are large enough and far enough apart to be easily selected with a finger tap It's possible to use your browser's developer tools to emulate mobile devices ( this page shows how to do it in Chrome ), which is useful for getting a sense of how your experiment will look on mobile devices. Just be aware that there are limitations to emulator tools, and there are some aspects of mobile devices/browsers that a desktop browser will not be able to simulate.","title":"Mobile Devices"},{"location":"overview/browser-device-support/#mobile-browsers","text":"The browser options for mobile phones and tablets are slightly different than those for desktop and laptop computers. In addition to mobile versions of Chrome, Firefox, Safari, and Edge, other notable mobile browsers include Opera Mobile, Samsung Internet, UC Browser, and Dolphin. Because of the greater diversity of mobile browsers and volatility in their usage statistics, jsPsych does not officially support any particular set of mobile browsers. However, we do anticipate that most experiments should work in most mobile browsers, especially the mobile versions of browsers that we do support in Desktop mode. If you run into a problem using jsPsych in mobile browsers, please report it on the jsPsych GitHub Issues page ! We do our best to fix browser incompatibilities that are not specific to a single experiment.","title":"Mobile Browsers"},{"location":"overview/callbacks/","text":"Event-related callback functions \u00b6 jsPsych offers the ability to call arbitrary functions in response to certain events occurring, like the end of a trial or when new data is saved. This page summarizes the different opportunities for callback functions and how to specify them. on_close \u00b6 The on_close callback can be declared in the jsPsych.init method. The callback triggers when the user leaves the page, but before any content on the page is removed from the browser's memory. This can be used, for example, to save data as the user is leaving the page. Sample use \u00b6 jsPsych . init ({ timeline : exp , on_close : function (){ var data = jsPsych . data . get (). json (); save_data_to_server ( data ); } }); on_data_update \u00b6 The on_data_update callback can be declared in the jsPsych.init method. The callback triggers at the end of a data update cycle. This happens after every trial, after the on_finish (trial) and on_trial_finish events execute, allowing you to modify the data in those callbacks, and then use this callback to store the data. The function will be passed a single argument, which contains the data that was written. Sample use \u00b6 jsPsych . init ({ timeline : exp , on_data_update : function ( data ) { console . log ( 'Just added new data. The contents of the data are: ' + JSON . stringify ( data )); } }); on_finish (trial) \u00b6 The on_finish callback can be added to any trial. The callback will trigger whenever the trial ends. The callback function will be passed a single argument, containing the data object from the trial. This data object is editable . Any changes made in the on_finish function will be stored in the internal data collection. Sample use \u00b6 var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.png' , on_finish : function ( data ) { if ( data . key_press == 85 ){ data . correct = true ; } else { data . correct = false ; } } }; on_finish (experiment) \u00b6 The on_finish callback can be declared in the jsPsych.init method. The callback will trigger once all trials in the experiment have been run. The method will be passed a single argument, containing all of the data generated in the experiment. Sample use \u00b6 jsPsych . init ({ timeline : exp , on_finish : function ( data ) { console . log ( 'The experiment is over! Here is all the data: ' + JSON . stringify ( data )); } }); on_load \u00b6 The on_load callback can be added to any trial. The callback will trigger once the trial has completed loading. For most plugins, this will occur once the display has been initially updated but before any user interactions or timed events (e.g., animations) have occurred. Sample use \u00b6 var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.png' , on_load : function () { console . log ( 'The trial just finished loading.' ); } }; on_start (trial) \u00b6 The on_start callback can be added to any trial. The callback will trigger right before the trial begins. The callback function will be passed a single argument, containing the trial object. If any of the parameters of the trial are functions or timeline variables, these will be evaluated before on_start is called, and the trial object will contain the evaluated value. The trial object is modifiable, and any changes made will affect the trial. Sample use \u00b6 var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.png' , on_start : function ( trial ) { console . log ( 'The trial is about to start.' ); trial . stimulus = 'imgB.png' ; // this will change what stimulus is displayed in the trial } }; on_trial_finish \u00b6 The on_trial_finish callback can be declared in the jsPsych.init method. The callback will trigger at the end of every trial in the experiment. If you want a callback to trigger only for the end of certain trials, use the on_finish callback on the trial object. The callback function will be passed a single argument, containing the data object from the trial. Sample use \u00b6 jsPsych . init ({ timeline : exp , on_trial_finish : function ( data ) { console . log ( 'A trial just ended.' ); console . log ( JSON . stringify ( data )); } }); on_trial_start \u00b6 The on_trial_start callback can be declared in the jsPsych.init method. The callback will trigger at the start of every trial in the experiment. The function receives a single argument: a modifiable copy of the trial object that will be used to run the next trial. Changes can be made to this object to alter the parameters of the upcoming trial. Sample use \u00b6 var current_score = 0 ; // a variable that is updated throughout the experiment to keep track of the current score. jsPsych . init ({ timeline : exp , on_trial_start : function ( trial ) { trial . data . score_at_start_of_trial = current_score ; console . log ( 'A trial just started.' ); } });","title":"Event-related Callback Functions"},{"location":"overview/callbacks/#event-related-callback-functions","text":"jsPsych offers the ability to call arbitrary functions in response to certain events occurring, like the end of a trial or when new data is saved. This page summarizes the different opportunities for callback functions and how to specify them.","title":"Event-related callback functions"},{"location":"overview/callbacks/#on_close","text":"The on_close callback can be declared in the jsPsych.init method. The callback triggers when the user leaves the page, but before any content on the page is removed from the browser's memory. This can be used, for example, to save data as the user is leaving the page.","title":"on_close"},{"location":"overview/callbacks/#sample-use","text":"jsPsych . init ({ timeline : exp , on_close : function (){ var data = jsPsych . data . get (). json (); save_data_to_server ( data ); } });","title":"Sample use"},{"location":"overview/callbacks/#on_data_update","text":"The on_data_update callback can be declared in the jsPsych.init method. The callback triggers at the end of a data update cycle. This happens after every trial, after the on_finish (trial) and on_trial_finish events execute, allowing you to modify the data in those callbacks, and then use this callback to store the data. The function will be passed a single argument, which contains the data that was written.","title":"on_data_update"},{"location":"overview/callbacks/#sample-use_1","text":"jsPsych . init ({ timeline : exp , on_data_update : function ( data ) { console . log ( 'Just added new data. The contents of the data are: ' + JSON . stringify ( data )); } });","title":"Sample use"},{"location":"overview/callbacks/#on_finish-trial","text":"The on_finish callback can be added to any trial. The callback will trigger whenever the trial ends. The callback function will be passed a single argument, containing the data object from the trial. This data object is editable . Any changes made in the on_finish function will be stored in the internal data collection.","title":"on_finish (trial)"},{"location":"overview/callbacks/#sample-use_2","text":"var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.png' , on_finish : function ( data ) { if ( data . key_press == 85 ){ data . correct = true ; } else { data . correct = false ; } } };","title":"Sample use"},{"location":"overview/callbacks/#on_finish-experiment","text":"The on_finish callback can be declared in the jsPsych.init method. The callback will trigger once all trials in the experiment have been run. The method will be passed a single argument, containing all of the data generated in the experiment.","title":"on_finish (experiment)"},{"location":"overview/callbacks/#sample-use_3","text":"jsPsych . init ({ timeline : exp , on_finish : function ( data ) { console . log ( 'The experiment is over! Here is all the data: ' + JSON . stringify ( data )); } });","title":"Sample use"},{"location":"overview/callbacks/#on_load","text":"The on_load callback can be added to any trial. The callback will trigger once the trial has completed loading. For most plugins, this will occur once the display has been initially updated but before any user interactions or timed events (e.g., animations) have occurred.","title":"on_load"},{"location":"overview/callbacks/#sample-use_4","text":"var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.png' , on_load : function () { console . log ( 'The trial just finished loading.' ); } };","title":"Sample use"},{"location":"overview/callbacks/#on_start-trial","text":"The on_start callback can be added to any trial. The callback will trigger right before the trial begins. The callback function will be passed a single argument, containing the trial object. If any of the parameters of the trial are functions or timeline variables, these will be evaluated before on_start is called, and the trial object will contain the evaluated value. The trial object is modifiable, and any changes made will affect the trial.","title":"on_start (trial)"},{"location":"overview/callbacks/#sample-use_5","text":"var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.png' , on_start : function ( trial ) { console . log ( 'The trial is about to start.' ); trial . stimulus = 'imgB.png' ; // this will change what stimulus is displayed in the trial } };","title":"Sample use"},{"location":"overview/callbacks/#on_trial_finish","text":"The on_trial_finish callback can be declared in the jsPsych.init method. The callback will trigger at the end of every trial in the experiment. If you want a callback to trigger only for the end of certain trials, use the on_finish callback on the trial object. The callback function will be passed a single argument, containing the data object from the trial.","title":"on_trial_finish"},{"location":"overview/callbacks/#sample-use_6","text":"jsPsych . init ({ timeline : exp , on_trial_finish : function ( data ) { console . log ( 'A trial just ended.' ); console . log ( JSON . stringify ( data )); } });","title":"Sample use"},{"location":"overview/callbacks/#on_trial_start","text":"The on_trial_start callback can be declared in the jsPsych.init method. The callback will trigger at the start of every trial in the experiment. The function receives a single argument: a modifiable copy of the trial object that will be used to run the next trial. Changes can be made to this object to alter the parameters of the upcoming trial.","title":"on_trial_start"},{"location":"overview/callbacks/#sample-use_7","text":"var current_score = 0 ; // a variable that is updated throughout the experiment to keep track of the current score. jsPsych . init ({ timeline : exp , on_trial_start : function ( trial ) { trial . data . score_at_start_of_trial = current_score ; console . log ( 'A trial just started.' ); } });","title":"Sample use"},{"location":"overview/data/","text":"Data in jsPsych: permanent and non-permanent data. \u00b6 There are two very different kinds of data storage: data stored in memory and data stored permanently . Data stored permanently exists even after the browser running jsPsych closes, typically in a database or in a file on a server. Data stored in memory exists only as long the browser window running jsPsych is open. jsPsych has many features for interacting with data stored in memory, but few for permanent data storage. This is a deliberate choice, as there are dozens of ways that data could be stored permanently. jsPsych does not lock you into one particular solution. However, saving data permanently is obviously a crucial component of any experiment, and the second half of this page contains a few suggestions on how to accomplish permanent data storage. Storing data in jsPsych's data structure \u00b6 jsPsych has a centralized collection of data that is built as the experiment runs. Each trial adds to the collection, and you can access the data with various functions, including jsPsych.data.get() , which returns the entire set of data. In most cases, data collection will be automatic and hidden. Plugins save data on their own so it is not uncommon to have the only interaction with the data be at the end of the experiment when it is time to save it in a permanent manner (see sections below about how to do this). However, there are some situations in which you may want to interact with the data; in particular, you may want to store additional data that the plugins are not recording, like a subject identifier or condition assignment. You may also want to add data on a trial by trial basis. For example, in a Stroop paradigm you would want to label which trials are congruent and which are incongruent. These scenarios are explored below. Adding data to all trials \u00b6 Often it is useful to add a piece of data to all of the trials in the experiment. For example, appending the subject ID to each trial. This can be done with the jsPsych.data.addProperties() function. Here is an example: // generate a random subject ID with 15 characters var subject_id = jsPsych . randomization . randomID ( 15 ); // pick a random condition for the subject at the start of the experiment var condition_assignment = jsPsych . randomization . sampleWithoutReplacement ([ 'conditionA' , 'conditionB' , 'conditionC' ], 1 )[ 0 ]; // record the condition assignment in the jsPsych data // this adds a property called 'subject' and a property called 'condition' to every trial jsPsych . data . addProperties ({ subject : subject_id , condition : condition_assignment }); Adding data to a particular trial or set of trials \u00b6 Data can be added to a particular trial by setting the data parameter for the trial. The data parameter is an object of key-value pairs, and each pair is added to the data for that trial. var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.jpg' , data : { image_type : 'A' } } Data declared in this way is also saved in the trials on any nested timelines: var block = { type : 'image-keyboard-response' , data : { image_type : 'A' }, timeline : [ { stimulus : 'imgA1.jpg' }, { stimulus : 'imgA2.jpg' } ] } The data object for a trial can also be updated in the on_finish event handler. You can override properties or add new ones. This is particularly useful for cases where the value depends on something that happened during the trial. var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.jpg' , on_finish : function ( data ){ if ( data . key_press == 65 ){ data . correct = true ; } else { data . correct = false ; } } } Aggregating and manipulating jsPsych data \u00b6 When accessing the data with jsPsych.data.get() the returned object is a special data collection object that exposes a number of methods for aggregating and manipulating the data. The full list of methods is detailed in the data module documentation . Here are some examples of data collection manipulation. All data generated by the image-keyboard-response plugin: var data = jsPsych . data . get (). filter ({ trial_type : 'image-keyboard-response' }); All data generated by the categorize-image plugin with a correct response: var data = jsPsych . data . get (). filter ({ trial_type : 'categorize-image' , correct : true }); All data with a response time between 100 and 500ms: var data = jsPsych . data . get (). filterCustom ( function ( x ){ return x . rt >= 100 && x . rt <= 500 }); Applying filters consecutively to get all trials from a particular plugin with a response time above 100ms: var data = jsPsych . data . get (). filter ({ trial_type : 'image-keyboard-response' }). filterCustom ( function ( x ){ return x . rt > 100 ; }); Getting the data from the last n trials: var n = 3 ; var data = jsPsych . data . get (). last ( n ); Getting the data from the last n trials with a correct response: var n = 3 ; var data = jsPsych . data . get (). filter ({ correct : true }). last ( n ); Getting the data from the first n trials: var n = 3 ; var data = jsPsych . data . get (). first ( n ); Counting the number of trials in a data collection: var count = jsPsych . data . get (). filter ({ correct : true }). count (); Selecting all of the response times from a data collection: var response_times = jsPsych . data . get (). select ( 'rt' ); Calculating various descriptive statistics on the response times in a data collection: jsPsych . data . get (). select ( 'rt' ). mean (); jsPsych . data . get (). select ( 'rt' ). sum (); jsPsych . data . get (). select ( 'rt' ). min (); jsPsych . data . get (). select ( 'rt' ). max (); jsPsych . data . get (). select ( 'rt' ). variance (); jsPsych . data . get (). select ( 'rt' ). sd (); jsPsych . data . get (). select ( 'rt' ). median (); jsPsych . data . get (). select ( 'rt' ). count (); Storing data permanently as a file \u00b6 This is one of the simplest methods for saving jsPsych data on the server that is running the experiment. It involves a short PHP script and a few lines of JavaScript code. This method will save each participant's data as a CSV file on the server. This method will only work if you are running on a web server with PHP installed, or a local server with PHP (e.g., XAMPP ). This method uses a simple PHP script to write files to the server: <?php $post_data = json_decode ( file_get_contents ( 'php://input' ), true ); // the directory \"data\" must be writable by the server $name = \"data/\" . $post_data [ 'filename' ] . \".csv\" ; $data = $post_data [ 'filedata' ]; // write the file to disk file_put_contents ( $name , $data ); ?> The file_put_contents($filename, $data) method requires permission to write new files. An easy way to solve this is to create a directory on the server that will store the data and use the chmod command to give all users write permission to that directory. In the above example, the directory data/ is used to store files. To use the PHP script, the JavaScript that runs jsPsych needs to send the filename and filedata information. This is done through an AJAX call. function saveData ( name , data ){ var xhr = new XMLHttpRequest (); xhr . open ( 'POST' , 'write_data.php' ); // 'write_data.php' is the path to the php file described above. xhr . setRequestHeader ( 'Content-Type' , 'application/json' ); xhr . send ( JSON . stringify ({ filename : name , filedata : data })); } // call the saveData function after the experiment is over jsPsych . init ({ // code to define the experiment structure would go here... on_finish : function (){ saveData ( \"experiment_data\" , jsPsych . data . get (). csv ()); } }); To use this in an actual experiment, it would be important to tie the filename to some unique identifier like a subject number. Otherwise the file may be overwritten by collecting new data. Note that, depending on file permissions, storing the CSV files this way may make them publicly accessible. One fix is to store the CSV files outside the web directory on the server. This requires changing the path in the PHP script above from /data to a non-accessible folder. You should only use this solution if you have access to more than just the web directory on your server. Storing data permanently in a MySQL database \u00b6 The ideal solution for storing data generated by jsPsych is to write it to a database. There are dozens of database options. MySQL is one of the most popular relational databases , is free to use, and relatively easy to install . This code will assume that you have a MySQL database installed on your server that is hosting the jsPsych experiment, and that your server is able to execute PHP code. If you are trying to run on a local machine, you'll need to install a local server environment like XAMPP . You'll need two PHP scripts. The first is a configuration file for your database. Save it as database_config.php on your server. Within this file are configuration options for the database. You'll need to change these according to how you have configured your MySQL installation. <?php $servername = \"localhost\" ; $port = 3306 ; $username = \"username\" ; $password = \"password\" ; $dbname = \"database\" ; $table = \"tablename\" ; ?> The second PHP file will write data to the database. This script reads the database to discover what columns are in the table, and then only allows data to be entered in that matches those columns. This is a security feature. Save this file as write_data.php on your server. <?php // this path should point to your configuration file. include ( 'database_config.php' ); $data_array = json_decode ( file_get_contents ( 'php://input' ), true ); try { $conn = new PDO ( \"mysql:host= $servername ;port= $port ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // First stage is to get all column names from the table and store // them in $col_names array. $stmt = $conn -> prepare ( \"SHOW COLUMNS FROM ` $table `\" ); $stmt -> execute (); $col_names = array (); while ( $row = $stmt -> fetchColumn ()) { $col_names [] = $row ; } // Second stage is to create prepared SQL statement using the column // names as a guide to what values might be in the JSON. // If a value is missing from a particular trial, then NULL is inserted $sql = \"INSERT INTO $table VALUES(\" ; for ( $i = 0 ; $i < count ( $col_names ); $i ++ ){ $name = $col_names [ $i ]; $sql .= \": $name \" ; if ( $i != count ( $col_names ) - 1 ){ $sql .= \", \" ; } } $sql .= \");\" ; $insertstmt = $conn -> prepare ( $sql ); for ( $i = 0 ; $i < count ( $data_array ); $i ++ ){ for ( $j = 0 ; $j < count ( $col_names ); $j ++ ){ $colname = $col_names [ $j ]; if ( ! isset ( $data_array [ $i ][ $colname ])){ $insertstmt -> bindValue ( \": $colname \" , null , PDO :: PARAM_NULL ); } else { $insertstmt -> bindValue ( \": $colname \" , $data_array [ $i ][ $colname ]); } } $insertstmt -> execute (); } echo '{\"success\": true}' ; } catch ( PDOException $e ) { echo '{\"success\": false, \"message\": ' . $e -> getMessage (); } $conn = null ; ?> To send the data, we use an AJAX request in JavaScript. function saveData () { var xhr = new XMLHttpRequest (); xhr . open ( 'POST' , 'write_data.php' ); // change 'write_data.php' to point to php script. xhr . setRequestHeader ( 'Content-Type' , 'application/json' ); xhr . onload = function () { if ( xhr . status == 200 ){ var response = JSON . parse ( xhr . responseText ); console . log ( response . success ); } }; xhr . send ( jsPsych . data . get (). json ()); } You can call the saveData() function using the on_finish handler for the experiment, or by using the call-function plugin. // with on_finish handler jsPsych . init ({ on_finish : saveData }); // with call-function plugin timeline . push ({ type : 'call-function' , func : saveData });","title":"Data Storage, Aggregation, and Manipulation"},{"location":"overview/data/#data-in-jspsych-permanent-and-non-permanent-data","text":"There are two very different kinds of data storage: data stored in memory and data stored permanently . Data stored permanently exists even after the browser running jsPsych closes, typically in a database or in a file on a server. Data stored in memory exists only as long the browser window running jsPsych is open. jsPsych has many features for interacting with data stored in memory, but few for permanent data storage. This is a deliberate choice, as there are dozens of ways that data could be stored permanently. jsPsych does not lock you into one particular solution. However, saving data permanently is obviously a crucial component of any experiment, and the second half of this page contains a few suggestions on how to accomplish permanent data storage.","title":"Data in jsPsych: permanent and non-permanent data."},{"location":"overview/data/#storing-data-in-jspsychs-data-structure","text":"jsPsych has a centralized collection of data that is built as the experiment runs. Each trial adds to the collection, and you can access the data with various functions, including jsPsych.data.get() , which returns the entire set of data. In most cases, data collection will be automatic and hidden. Plugins save data on their own so it is not uncommon to have the only interaction with the data be at the end of the experiment when it is time to save it in a permanent manner (see sections below about how to do this). However, there are some situations in which you may want to interact with the data; in particular, you may want to store additional data that the plugins are not recording, like a subject identifier or condition assignment. You may also want to add data on a trial by trial basis. For example, in a Stroop paradigm you would want to label which trials are congruent and which are incongruent. These scenarios are explored below.","title":"Storing data in jsPsych's data structure"},{"location":"overview/data/#adding-data-to-all-trials","text":"Often it is useful to add a piece of data to all of the trials in the experiment. For example, appending the subject ID to each trial. This can be done with the jsPsych.data.addProperties() function. Here is an example: // generate a random subject ID with 15 characters var subject_id = jsPsych . randomization . randomID ( 15 ); // pick a random condition for the subject at the start of the experiment var condition_assignment = jsPsych . randomization . sampleWithoutReplacement ([ 'conditionA' , 'conditionB' , 'conditionC' ], 1 )[ 0 ]; // record the condition assignment in the jsPsych data // this adds a property called 'subject' and a property called 'condition' to every trial jsPsych . data . addProperties ({ subject : subject_id , condition : condition_assignment });","title":"Adding data to all trials"},{"location":"overview/data/#adding-data-to-a-particular-trial-or-set-of-trials","text":"Data can be added to a particular trial by setting the data parameter for the trial. The data parameter is an object of key-value pairs, and each pair is added to the data for that trial. var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.jpg' , data : { image_type : 'A' } } Data declared in this way is also saved in the trials on any nested timelines: var block = { type : 'image-keyboard-response' , data : { image_type : 'A' }, timeline : [ { stimulus : 'imgA1.jpg' }, { stimulus : 'imgA2.jpg' } ] } The data object for a trial can also be updated in the on_finish event handler. You can override properties or add new ones. This is particularly useful for cases where the value depends on something that happened during the trial. var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.jpg' , on_finish : function ( data ){ if ( data . key_press == 65 ){ data . correct = true ; } else { data . correct = false ; } } }","title":"Adding data to a particular trial or set of trials"},{"location":"overview/data/#aggregating-and-manipulating-jspsych-data","text":"When accessing the data with jsPsych.data.get() the returned object is a special data collection object that exposes a number of methods for aggregating and manipulating the data. The full list of methods is detailed in the data module documentation . Here are some examples of data collection manipulation. All data generated by the image-keyboard-response plugin: var data = jsPsych . data . get (). filter ({ trial_type : 'image-keyboard-response' }); All data generated by the categorize-image plugin with a correct response: var data = jsPsych . data . get (). filter ({ trial_type : 'categorize-image' , correct : true }); All data with a response time between 100 and 500ms: var data = jsPsych . data . get (). filterCustom ( function ( x ){ return x . rt >= 100 && x . rt <= 500 }); Applying filters consecutively to get all trials from a particular plugin with a response time above 100ms: var data = jsPsych . data . get (). filter ({ trial_type : 'image-keyboard-response' }). filterCustom ( function ( x ){ return x . rt > 100 ; }); Getting the data from the last n trials: var n = 3 ; var data = jsPsych . data . get (). last ( n ); Getting the data from the last n trials with a correct response: var n = 3 ; var data = jsPsych . data . get (). filter ({ correct : true }). last ( n ); Getting the data from the first n trials: var n = 3 ; var data = jsPsych . data . get (). first ( n ); Counting the number of trials in a data collection: var count = jsPsych . data . get (). filter ({ correct : true }). count (); Selecting all of the response times from a data collection: var response_times = jsPsych . data . get (). select ( 'rt' ); Calculating various descriptive statistics on the response times in a data collection: jsPsych . data . get (). select ( 'rt' ). mean (); jsPsych . data . get (). select ( 'rt' ). sum (); jsPsych . data . get (). select ( 'rt' ). min (); jsPsych . data . get (). select ( 'rt' ). max (); jsPsych . data . get (). select ( 'rt' ). variance (); jsPsych . data . get (). select ( 'rt' ). sd (); jsPsych . data . get (). select ( 'rt' ). median (); jsPsych . data . get (). select ( 'rt' ). count ();","title":"Aggregating and manipulating jsPsych data"},{"location":"overview/data/#storing-data-permanently-as-a-file","text":"This is one of the simplest methods for saving jsPsych data on the server that is running the experiment. It involves a short PHP script and a few lines of JavaScript code. This method will save each participant's data as a CSV file on the server. This method will only work if you are running on a web server with PHP installed, or a local server with PHP (e.g., XAMPP ). This method uses a simple PHP script to write files to the server: <?php $post_data = json_decode ( file_get_contents ( 'php://input' ), true ); // the directory \"data\" must be writable by the server $name = \"data/\" . $post_data [ 'filename' ] . \".csv\" ; $data = $post_data [ 'filedata' ]; // write the file to disk file_put_contents ( $name , $data ); ?> The file_put_contents($filename, $data) method requires permission to write new files. An easy way to solve this is to create a directory on the server that will store the data and use the chmod command to give all users write permission to that directory. In the above example, the directory data/ is used to store files. To use the PHP script, the JavaScript that runs jsPsych needs to send the filename and filedata information. This is done through an AJAX call. function saveData ( name , data ){ var xhr = new XMLHttpRequest (); xhr . open ( 'POST' , 'write_data.php' ); // 'write_data.php' is the path to the php file described above. xhr . setRequestHeader ( 'Content-Type' , 'application/json' ); xhr . send ( JSON . stringify ({ filename : name , filedata : data })); } // call the saveData function after the experiment is over jsPsych . init ({ // code to define the experiment structure would go here... on_finish : function (){ saveData ( \"experiment_data\" , jsPsych . data . get (). csv ()); } }); To use this in an actual experiment, it would be important to tie the filename to some unique identifier like a subject number. Otherwise the file may be overwritten by collecting new data. Note that, depending on file permissions, storing the CSV files this way may make them publicly accessible. One fix is to store the CSV files outside the web directory on the server. This requires changing the path in the PHP script above from /data to a non-accessible folder. You should only use this solution if you have access to more than just the web directory on your server.","title":"Storing data permanently as a file"},{"location":"overview/data/#storing-data-permanently-in-a-mysql-database","text":"The ideal solution for storing data generated by jsPsych is to write it to a database. There are dozens of database options. MySQL is one of the most popular relational databases , is free to use, and relatively easy to install . This code will assume that you have a MySQL database installed on your server that is hosting the jsPsych experiment, and that your server is able to execute PHP code. If you are trying to run on a local machine, you'll need to install a local server environment like XAMPP . You'll need two PHP scripts. The first is a configuration file for your database. Save it as database_config.php on your server. Within this file are configuration options for the database. You'll need to change these according to how you have configured your MySQL installation. <?php $servername = \"localhost\" ; $port = 3306 ; $username = \"username\" ; $password = \"password\" ; $dbname = \"database\" ; $table = \"tablename\" ; ?> The second PHP file will write data to the database. This script reads the database to discover what columns are in the table, and then only allows data to be entered in that matches those columns. This is a security feature. Save this file as write_data.php on your server. <?php // this path should point to your configuration file. include ( 'database_config.php' ); $data_array = json_decode ( file_get_contents ( 'php://input' ), true ); try { $conn = new PDO ( \"mysql:host= $servername ;port= $port ;dbname= $dbname \" , $username , $password ); $conn -> setAttribute ( PDO :: ATTR_ERRMODE , PDO :: ERRMODE_EXCEPTION ); // First stage is to get all column names from the table and store // them in $col_names array. $stmt = $conn -> prepare ( \"SHOW COLUMNS FROM ` $table `\" ); $stmt -> execute (); $col_names = array (); while ( $row = $stmt -> fetchColumn ()) { $col_names [] = $row ; } // Second stage is to create prepared SQL statement using the column // names as a guide to what values might be in the JSON. // If a value is missing from a particular trial, then NULL is inserted $sql = \"INSERT INTO $table VALUES(\" ; for ( $i = 0 ; $i < count ( $col_names ); $i ++ ){ $name = $col_names [ $i ]; $sql .= \": $name \" ; if ( $i != count ( $col_names ) - 1 ){ $sql .= \", \" ; } } $sql .= \");\" ; $insertstmt = $conn -> prepare ( $sql ); for ( $i = 0 ; $i < count ( $data_array ); $i ++ ){ for ( $j = 0 ; $j < count ( $col_names ); $j ++ ){ $colname = $col_names [ $j ]; if ( ! isset ( $data_array [ $i ][ $colname ])){ $insertstmt -> bindValue ( \": $colname \" , null , PDO :: PARAM_NULL ); } else { $insertstmt -> bindValue ( \": $colname \" , $data_array [ $i ][ $colname ]); } } $insertstmt -> execute (); } echo '{\"success\": true}' ; } catch ( PDOException $e ) { echo '{\"success\": false, \"message\": ' . $e -> getMessage (); } $conn = null ; ?> To send the data, we use an AJAX request in JavaScript. function saveData () { var xhr = new XMLHttpRequest (); xhr . open ( 'POST' , 'write_data.php' ); // change 'write_data.php' to point to php script. xhr . setRequestHeader ( 'Content-Type' , 'application/json' ); xhr . onload = function () { if ( xhr . status == 200 ){ var response = JSON . parse ( xhr . responseText ); console . log ( response . success ); } }; xhr . send ( jsPsych . data . get (). json ()); } You can call the saveData() function using the on_finish handler for the experiment, or by using the call-function plugin. // with on_finish handler jsPsych . init ({ on_finish : saveData }); // with call-function plugin timeline . push ({ type : 'call-function' , func : saveData });","title":"Storing data permanently in a MySQL database"},{"location":"overview/exclude-browser/","text":"Exclude Participants Based on Browser Features \u00b6 Online subjects will use many different kinds of browsers. Depending on the experiment, it may be important to specify a minimum feature set of the browser. jsPsych makes this straightforward. Simply specify certain exclusion criteria in the jsPsych.init method call. If a subject's browser doesn't meet the criteria the experiment will not start and the subject will see a message explaining the problem. For size restrictions the subject will see a message that displays the current size of their browser window and the minimum size needed to start the experiment, giving the subject an opportunity to enlarge the browser window to continue. Current exclusion options: * Minimum browser width & height * Support for the WebAudio API Examples \u00b6 Exclude browsers that are not at least 800x600 pixels \u00b6 jsPsych . init ({ timeline : exp , exclusions : { min_width : 800 , min_height : 600 } }); Exclude browsers that do not have access to the WebAudio API \u00b6 jsPsych . init ({ timeline : exp , exclusions : { audio : true } });","title":"Exclude Participants Based on Browser Features"},{"location":"overview/exclude-browser/#exclude-participants-based-on-browser-features","text":"Online subjects will use many different kinds of browsers. Depending on the experiment, it may be important to specify a minimum feature set of the browser. jsPsych makes this straightforward. Simply specify certain exclusion criteria in the jsPsych.init method call. If a subject's browser doesn't meet the criteria the experiment will not start and the subject will see a message explaining the problem. For size restrictions the subject will see a message that displays the current size of their browser window and the minimum size needed to start the experiment, giving the subject an opportunity to enlarge the browser window to continue. Current exclusion options: * Minimum browser width & height * Support for the WebAudio API","title":"Exclude Participants Based on Browser Features"},{"location":"overview/exclude-browser/#examples","text":"","title":"Examples"},{"location":"overview/exclude-browser/#exclude-browsers-that-are-not-at-least-800x600-pixels","text":"jsPsych . init ({ timeline : exp , exclusions : { min_width : 800 , min_height : 600 } });","title":"Exclude browsers that are not at least 800x600 pixels"},{"location":"overview/exclude-browser/#exclude-browsers-that-do-not-have-access-to-the-webaudio-api","text":"jsPsych . init ({ timeline : exp , exclusions : { audio : true } });","title":"Exclude browsers that do not have access to the WebAudio API"},{"location":"overview/experiment-options/","text":"Experiment-wide settings \u00b6 There are several options that can be set when calling jsPsych.init() to launch the experiment. Options are specified in the object passed to jsPsych.init . For example, to specify a set of images to preload and the default inter-trial interval the object would contain: jsPsych . init ({ timeline : [...], preload_images : [ 'img1.png' , 'img2.png' ], default_iti : 500 }); Controlling where jsPsych renders on the page \u00b6 By default, jsPsych will render the experiment in the <body> element of a page. It is possible to display the experiment in a different element (e.g., a <div> ) by specifying the display_element parameter. < body > < div id = \"jspsych-target\" ></ div > </ body > < script > // ... // jsPsych . init ({ timeline : [...], display_element : 'jspsych-target' }) </ script > This option is useful if the experiment needs to be rendered on a page with other content (e.g., a demo version of the experiment with annotation text), or if additional control over the display element is desired. Custom CSS rules can be applied to position, size, scale, etc. the display element. Experiment events \u00b6 Several experiment-wide events can trigger functions. This is documented in more detail on the event-related callback functions page . The events that trigger functions are: on_finish : Called at the end of the experiment. on_trial_start : Called at the beginning of every trial. on_trial_finish : Called at the end of every trial. on_data_update : Called whenever new data is added to the jsPsych data object. on_interaction_data_update : Called whenever new interaction data (e.g., the subject enters or exits fullscreen mode) is added. on_close : Called right before the page closes, such as when a subject closes the experiment early. Specify exclusion criteria \u00b6 Exclusion criteria can be specified based on features of the user's web browser, such as the display size and whether certain features are reported. See the page on excluding subjects based on browser features . Display a progress bar \u00b6 An automatic or manually updated progress bar can be displayed at the top of the screen. By default, the text next to the progress bar is \"Completion Progress\", but this text can be changed with the message_progress_bar parameter in jsPsych.init . See the progress bar page for more details. Preload media elements \u00b6 Images, audio files, and movies can be preloaded to reduce latency during the experiment. In many cases, this preloading is automatic. In certain situations, such as using a custom plugin, using timeline variables , or using functions to determine which stimulus to show , it is necessary to provide jsPsych with a list of media elements to preload. The media preloading page describes this process in detail. Choose the method for playing audio files \u00b6 Specifying the use_webaudio parameter in jsPsych.init() allows you to choose whether to use the WebAudio API or HTML5 audio for playing audio files during your experiment. By default, jsPsych uses the WebAudio API to play audio files. Among other features, the WebAudio API allows for more precise measurement of response times relative to the onset of the audio. However, loading files through the WebAudio API causes errors when running an experiment offline (i.e., by double-clicking on the HTML file, rather than hosting it on a web server). This is due to the cross-origin security policy implemented by web browsers. For this reason, jsPsych switches to a 'safe mode' when it detects that the webpage is running offline, and automatically uses HTML5 audio to prevent errors, even when use_webaudio has been explicitly set to true . For more information, see the section Cross-origin requests (CORS) and safe mode on the Running Experiments page. jsPsych . init ({ timeline : [...], use_webaudio : false }); Set the default intertrial interval \u00b6 By default the next trial in a timeline will begin immediately after the conclusion of the previous trial. An experiment-wide delay can be specified using the default_iti parameter to jsPsych.init() . jsPsych . init ({ timeline : [...], default_iti : 500 }); This parameter is specified in milliseconds. A blank screen will display between each trial for the duration of the ITI. Specify the maximum width of the experiment \u00b6 The experiment will, by default, take up 100% of the display element. Usually the display element is the <body> , and the experiment is the full width of the screen. (This can be overridden by specifying the display_element parameter described above). Specifying the experiment_width parameter will set a maximum width for the display. The parameter is specified in pixels. jsPsych . init ({ timeline : [...], experiment_width : 750 }); Specify a minimum valid response time \u00b6 By default, jsPsych will treat any keyboard response time as valid. However, it's possible to specify a minimum valid response time (in ms) for key presses. Any key press that is less than this value will be treated as invalid and ignored. Note that this parameter only applies to keyboard responses , and not to other response types such as buttons and sliders. The default value is 0. // ignore any keyboard responses that are less than 100 ms jsPsych . init ({ timeline : [...], minimum_valid_rt : 100 }); Override 'safe mode' when running experiments offline \u00b6 By default, jsPsych switches to a 'safe mode' when it detects that the webpage is running offline (via the file:// protocol) in order to prevent certain errors. Specifically, in safe mode, HTML5 audio is used to play audio files (even when use_webaudio has been explicitly set to true ) and video preloading is disabled (both automatic and manual preloading). For more information, see the Cross-origin requests (CORS) and safe mode section on the Running Experiments page. It's possible to override this safe mode feature by setting the override_safe_mode parameter to true in jsPsych.init . This is something you might do if you've disabled certain security settings in your browser for testing purposes. This parameter has no effect when your experiment is running online (on a server), because it will be using the http:// or https:// protocol, which does not trigger safe mode. jsPsych . init ({ timeline : [...], override_safe_mode : true });","title":"Experiment Settings"},{"location":"overview/experiment-options/#experiment-wide-settings","text":"There are several options that can be set when calling jsPsych.init() to launch the experiment. Options are specified in the object passed to jsPsych.init . For example, to specify a set of images to preload and the default inter-trial interval the object would contain: jsPsych . init ({ timeline : [...], preload_images : [ 'img1.png' , 'img2.png' ], default_iti : 500 });","title":"Experiment-wide settings"},{"location":"overview/experiment-options/#controlling-where-jspsych-renders-on-the-page","text":"By default, jsPsych will render the experiment in the <body> element of a page. It is possible to display the experiment in a different element (e.g., a <div> ) by specifying the display_element parameter. < body > < div id = \"jspsych-target\" ></ div > </ body > < script > // ... // jsPsych . init ({ timeline : [...], display_element : 'jspsych-target' }) </ script > This option is useful if the experiment needs to be rendered on a page with other content (e.g., a demo version of the experiment with annotation text), or if additional control over the display element is desired. Custom CSS rules can be applied to position, size, scale, etc. the display element.","title":"Controlling where jsPsych renders on the page"},{"location":"overview/experiment-options/#experiment-events","text":"Several experiment-wide events can trigger functions. This is documented in more detail on the event-related callback functions page . The events that trigger functions are: on_finish : Called at the end of the experiment. on_trial_start : Called at the beginning of every trial. on_trial_finish : Called at the end of every trial. on_data_update : Called whenever new data is added to the jsPsych data object. on_interaction_data_update : Called whenever new interaction data (e.g., the subject enters or exits fullscreen mode) is added. on_close : Called right before the page closes, such as when a subject closes the experiment early.","title":"Experiment events"},{"location":"overview/experiment-options/#specify-exclusion-criteria","text":"Exclusion criteria can be specified based on features of the user's web browser, such as the display size and whether certain features are reported. See the page on excluding subjects based on browser features .","title":"Specify exclusion criteria"},{"location":"overview/experiment-options/#display-a-progress-bar","text":"An automatic or manually updated progress bar can be displayed at the top of the screen. By default, the text next to the progress bar is \"Completion Progress\", but this text can be changed with the message_progress_bar parameter in jsPsych.init . See the progress bar page for more details.","title":"Display a progress bar"},{"location":"overview/experiment-options/#preload-media-elements","text":"Images, audio files, and movies can be preloaded to reduce latency during the experiment. In many cases, this preloading is automatic. In certain situations, such as using a custom plugin, using timeline variables , or using functions to determine which stimulus to show , it is necessary to provide jsPsych with a list of media elements to preload. The media preloading page describes this process in detail.","title":"Preload media elements"},{"location":"overview/experiment-options/#choose-the-method-for-playing-audio-files","text":"Specifying the use_webaudio parameter in jsPsych.init() allows you to choose whether to use the WebAudio API or HTML5 audio for playing audio files during your experiment. By default, jsPsych uses the WebAudio API to play audio files. Among other features, the WebAudio API allows for more precise measurement of response times relative to the onset of the audio. However, loading files through the WebAudio API causes errors when running an experiment offline (i.e., by double-clicking on the HTML file, rather than hosting it on a web server). This is due to the cross-origin security policy implemented by web browsers. For this reason, jsPsych switches to a 'safe mode' when it detects that the webpage is running offline, and automatically uses HTML5 audio to prevent errors, even when use_webaudio has been explicitly set to true . For more information, see the section Cross-origin requests (CORS) and safe mode on the Running Experiments page. jsPsych . init ({ timeline : [...], use_webaudio : false });","title":"Choose the method for playing audio files"},{"location":"overview/experiment-options/#set-the-default-intertrial-interval","text":"By default the next trial in a timeline will begin immediately after the conclusion of the previous trial. An experiment-wide delay can be specified using the default_iti parameter to jsPsych.init() . jsPsych . init ({ timeline : [...], default_iti : 500 }); This parameter is specified in milliseconds. A blank screen will display between each trial for the duration of the ITI.","title":"Set the default intertrial interval"},{"location":"overview/experiment-options/#specify-the-maximum-width-of-the-experiment","text":"The experiment will, by default, take up 100% of the display element. Usually the display element is the <body> , and the experiment is the full width of the screen. (This can be overridden by specifying the display_element parameter described above). Specifying the experiment_width parameter will set a maximum width for the display. The parameter is specified in pixels. jsPsych . init ({ timeline : [...], experiment_width : 750 });","title":"Specify the maximum width of the experiment"},{"location":"overview/experiment-options/#specify-a-minimum-valid-response-time","text":"By default, jsPsych will treat any keyboard response time as valid. However, it's possible to specify a minimum valid response time (in ms) for key presses. Any key press that is less than this value will be treated as invalid and ignored. Note that this parameter only applies to keyboard responses , and not to other response types such as buttons and sliders. The default value is 0. // ignore any keyboard responses that are less than 100 ms jsPsych . init ({ timeline : [...], minimum_valid_rt : 100 });","title":"Specify a minimum valid response time"},{"location":"overview/experiment-options/#override-safe-mode-when-running-experiments-offline","text":"By default, jsPsych switches to a 'safe mode' when it detects that the webpage is running offline (via the file:// protocol) in order to prevent certain errors. Specifically, in safe mode, HTML5 audio is used to play audio files (even when use_webaudio has been explicitly set to true ) and video preloading is disabled (both automatic and manual preloading). For more information, see the Cross-origin requests (CORS) and safe mode section on the Running Experiments page. It's possible to override this safe mode feature by setting the override_safe_mode parameter to true in jsPsych.init . This is something you might do if you've disabled certain security settings in your browser for testing purposes. This parameter has no effect when your experiment is running online (on a server), because it will be using the http:// or https:// protocol, which does not trigger safe mode. jsPsych . init ({ timeline : [...], override_safe_mode : true });","title":"Override 'safe mode' when running experiments offline"},{"location":"overview/fullscreen/","text":"Fullscreen Experiments \u00b6 You can run your experiment in fullscreen mode by using the jspsych-fullscreen plugin. var timeline = []; timeline . push ({ type : 'fullscreen' , fullscreen_mode : true }); timeline . push ({ type : 'html-keyboard-response' , stimulus : 'This trial will be in fullscreen mode.' }); // exit fullscreen mode timeline . push ({ type : 'fullscreen' , fullscreen_mode : false }); timeline . push ({ type : 'html-keyboard-response' , stimulus : 'This trial will NOT be in fullscreen mode.' }); jsPsych . init ({ timeline : timeline }); For security reasons, web browsers require that users initiate an action to launch fullscreen mode. The fullscreen plugin displays a button that the user must click to change the display to fullscreen. Safari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari. The experiment will ignore any trials using the fullscreen plugin in Safari.","title":"Fullscreen Experiments"},{"location":"overview/fullscreen/#fullscreen-experiments","text":"You can run your experiment in fullscreen mode by using the jspsych-fullscreen plugin. var timeline = []; timeline . push ({ type : 'fullscreen' , fullscreen_mode : true }); timeline . push ({ type : 'html-keyboard-response' , stimulus : 'This trial will be in fullscreen mode.' }); // exit fullscreen mode timeline . push ({ type : 'fullscreen' , fullscreen_mode : false }); timeline . push ({ type : 'html-keyboard-response' , stimulus : 'This trial will NOT be in fullscreen mode.' }); jsPsych . init ({ timeline : timeline }); For security reasons, web browsers require that users initiate an action to launch fullscreen mode. The fullscreen plugin displays a button that the user must click to change the display to fullscreen. Safari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari. The experiment will ignore any trials using the fullscreen plugin in Safari.","title":"Fullscreen Experiments"},{"location":"overview/media-preloading/","text":"Media Preloading \u00b6 If an experiment uses image, audio, or video files as stimuli, it is a good idea to preload the files before running the experiment. Preloading files means that the subject's browser will download all of the files and store them in local memory on the subject's computer. This is important because loading a file is much faster if it is already in memory on the subject's computer. Without preloading, there will be noticeable delays in the display of media, which will affect any timing measurements (such as how long an image is displayed, or a subject's response time since first viewing an image). For particularly large files, like video, preloading content avoids lengthy pauses in the middle of the experiment that can be disruptive to the flow of the experiment. Note that video preloading will not work when you run your experiment offline (e.g., by double-clicking on the HTML file), but it will work once your experiment is running online (hosted on a server). The Cross-origin requests (CORS) and safe mode section on the Running Experiments page contains more information about this. Automatic Preloading \u00b6 jsPsych will automatically preload audio, video, and image files that are used as parameters for the standard set of plugins. // the image file img/file1.png is // automatically preloaded before the experiment begins var trial = { type : 'image-keyboard-response' , stimulus : 'img/file1.png' } // the sound file is also preloaded automatically var sound_trial = { type : 'audio-keyboard-response' , stimulus : 'audio/hello.mp3' } // the video file is preloaded automatically (as long as the experiment is running on a server) var video_trial = { type : 'video' , stimulus : [ 'video/sample_video.mp4' ] } jsPsych . init ({ timeline : [ trial ] }); Manual preloading \u00b6 If you are using media files in your experiment but they are not being passed directly as parameters to the trials (e.g., because you are using functions as parameters that return the audio, video, or images, or you are using timeline variables), then you can manually specify the files to preload. You can specify an array of image files ( preload_images ) and an array of audio files ( preload_audio ) for preloading in the jsPsych.init() method. These files will load before the experiment starts. // this trial will not preload the images, because the image file is being used // in an HTML string var trial = { type : 'html-keyboard-response' , stimulus : '<img src=\"img/file1.png\"></img>' , } var audio_trial = { type : 'audio-keyboard-response' , stimulus : function () { return 'audio/foo.mp3' } } var video_timline = { timeline : [ { type : 'video' , stimulus : jsPsych . timelineVariable ( 'video' ) } ], timeline_variables : [ { video : [ 'video/1.mp4' ]}, { video : [ 'video/2.mp4' ]} ] } // an array of paths to images that need to be loaded var images = [ 'img/file1.png' ]; var audio = [ 'audio/foo.mp3' ]; var video = [ 'video/1.mp4' , 'video/2.mp4' ]; jsPsych . init ({ timeline : [ trial ], preload_audio : audio , preload_images : images , preload_video : video }); Preloading progress bar \u00b6 By default, jsPsych will display a small progress bar while files are being preloaded. This progress bar represents all files that are being automatically preloaded or preloaded from the preload_audio , preload_video , and preload_images arrays. You may wish to turn this off if you are only loading a small number of files, as it will disappear so quickly that the participant may be confused about what it was. You can control whether the preloading progress bar appears by setting the show_preload_progress_bar parameter in jsPsych.init() jsPsych . init ({ timeline : timeline , show_preload_progress_bar : false // hide preload progress bar });","title":"Media Preloading"},{"location":"overview/media-preloading/#media-preloading","text":"If an experiment uses image, audio, or video files as stimuli, it is a good idea to preload the files before running the experiment. Preloading files means that the subject's browser will download all of the files and store them in local memory on the subject's computer. This is important because loading a file is much faster if it is already in memory on the subject's computer. Without preloading, there will be noticeable delays in the display of media, which will affect any timing measurements (such as how long an image is displayed, or a subject's response time since first viewing an image). For particularly large files, like video, preloading content avoids lengthy pauses in the middle of the experiment that can be disruptive to the flow of the experiment. Note that video preloading will not work when you run your experiment offline (e.g., by double-clicking on the HTML file), but it will work once your experiment is running online (hosted on a server). The Cross-origin requests (CORS) and safe mode section on the Running Experiments page contains more information about this.","title":"Media Preloading"},{"location":"overview/media-preloading/#automatic-preloading","text":"jsPsych will automatically preload audio, video, and image files that are used as parameters for the standard set of plugins. // the image file img/file1.png is // automatically preloaded before the experiment begins var trial = { type : 'image-keyboard-response' , stimulus : 'img/file1.png' } // the sound file is also preloaded automatically var sound_trial = { type : 'audio-keyboard-response' , stimulus : 'audio/hello.mp3' } // the video file is preloaded automatically (as long as the experiment is running on a server) var video_trial = { type : 'video' , stimulus : [ 'video/sample_video.mp4' ] } jsPsych . init ({ timeline : [ trial ] });","title":"Automatic Preloading"},{"location":"overview/media-preloading/#manual-preloading","text":"If you are using media files in your experiment but they are not being passed directly as parameters to the trials (e.g., because you are using functions as parameters that return the audio, video, or images, or you are using timeline variables), then you can manually specify the files to preload. You can specify an array of image files ( preload_images ) and an array of audio files ( preload_audio ) for preloading in the jsPsych.init() method. These files will load before the experiment starts. // this trial will not preload the images, because the image file is being used // in an HTML string var trial = { type : 'html-keyboard-response' , stimulus : '<img src=\"img/file1.png\"></img>' , } var audio_trial = { type : 'audio-keyboard-response' , stimulus : function () { return 'audio/foo.mp3' } } var video_timline = { timeline : [ { type : 'video' , stimulus : jsPsych . timelineVariable ( 'video' ) } ], timeline_variables : [ { video : [ 'video/1.mp4' ]}, { video : [ 'video/2.mp4' ]} ] } // an array of paths to images that need to be loaded var images = [ 'img/file1.png' ]; var audio = [ 'audio/foo.mp3' ]; var video = [ 'video/1.mp4' , 'video/2.mp4' ]; jsPsych . init ({ timeline : [ trial ], preload_audio : audio , preload_images : images , preload_video : video });","title":"Manual preloading"},{"location":"overview/media-preloading/#preloading-progress-bar","text":"By default, jsPsych will display a small progress bar while files are being preloaded. This progress bar represents all files that are being automatically preloaded or preloaded from the preload_audio , preload_video , and preload_images arrays. You may wish to turn this off if you are only loading a small number of files, as it will disappear so quickly that the participant may be confused about what it was. You can control whether the preloading progress bar appears by setting the show_preload_progress_bar parameter in jsPsych.init() jsPsych . init ({ timeline : timeline , show_preload_progress_bar : false // hide preload progress bar });","title":"Preloading progress bar"},{"location":"overview/mturk/","text":"Integrating with Mechanical Turk \u00b6 A common use of jsPsych is to build an online experiment and find subjects using Mechanical Turk . Once an experiment is available through a web server and data is being saved on the server , connecting the experiment with Mechanical Turk takes only a few additional steps. jsPsych has some built-in functionality to assist with this process. The jsPsych.turk module \u00b6 The jsPsych.turk module contains functions that are relevant for experiments running on Mechanical Turk. Creating an advertisement page \u00b6 When potential subjects view your experiment on Mechanical Turk, they will be able to see a single webpage before deciding whether or not to accept the HIT (start the experiment). This first page is often used as an advertisement for the experiment, similar to posting a flier in a department hallway. The important thing to remember about this page is that potential subjects will be able to interact with it even if they haven't accepted the HIT. Therefore, it can be useful to change the content of the page depending on whether the HIT has been accepted or not. This is relatively easy to do: < div id = \"experiment_link\" > You must accept the HIT to begin the experiment </ div > . < script > // jsPsych has a method turkInfo() which can determine whether or not the // HIT has been accepted. var turkInfo = jsPsych . turkInfo (); // turkInfo.previewMode is true in two cases: when the HIT has not been // accepted yet OR when the page is viewed outside of mechanical turk. // The second property, outsideTurk, is true when the page is viewed // outside of mechanical turk, so together, the statement will be true // only when in Turk and when the HIT is not accepted yet. if ( ! turkInfo . previewMode && ! turkInfo . outsideTurk ) { document . querySelector ( '#experiment_link' ). innerHMTL = '<a href=\"link_to_experiment.html\" target=\"_blank\">Click Here to Start Experiment</a>' ; } </ script > One important issue with advertisement pages is that they must be served using the https protocol, which requires having an SSL certificate on the web server hosting the page. Instructions for how to do this vary depending on what kind of server you are using, so the best advice is to simply Google for instructions on how to acquire and install an SSL certificate on your particular server. Getting the worker ID \u00b6 Every account on Mechanical Turk is given a unique identification string. Recording this ID is a useful way to keep track of who is doing your experiment. In particular, while Turk has built in tools for preventing the same person from doing a HIT more than once, there may be cases where you don't want subjects to complete related experiments. If you store the worker ID of every person who starts an experiment in a database, then you can exclude people by running a query on the database to check for the ID. jsPsych can get the workerID, assignmentID, and hitID with the turkInfo method. var turkInfo = jsPsych . turk . turkInfo (); // workerID turkInfo . workerId // hitID turkInfo . hitId // assignmentID turkInfo . assignmentId Recording the workerId at the start of the experiment is also a good way to track dropouts. Submitting results to Mechanical Turk \u00b6 If you are running a HIT on Mechanical Turk using the ExternalQuestion template, then you'll need to provide a way for subjects to indicate that they have completed the HIT. (If you are using another template, then the template will provide this code for you). jsPSych makes this a relatively easy task. A common strategy for external HITs is to display an HTML page on the Mechanical Turk website that links to your HIT. Subjects click the link, which opens the actual experiment content in a new browser window or tab, allowing the experiment to take up the whole browser window instead of just the iframe that displays content on Mechanical Turk. On this page, you might include a submit button for workers to indicate that they have finished the experiment. The page would look something like this: < p > Enter the code you were given: </ p > < input type = \"text\" id = \"code\" ></ input > < button onclick = \"sendData();\" > Submit HIT </ button > < script > function sendData () { jsPsych . turk . submitToTurk ({ code : document . getElementById ( 'code' ). value }); } </ script > When workers click the button, the contents of the code text field will be sent to Mechanical Turk, and you'll be able to view the subjects and the codes that they entered in the Mechanical Turk GUI. You can then approve or reject work using the Mechanical Turk website. Limitations \u00b6 jsPsych is not designed to communicate with the Mechanical Turk API in a comprehensive manner. If you are looking for software to help you post and manage HITs, then you may want to look at PsiTurk . jsPsych and PsiTurk complement each other nicely, and there is an example of combining the two platforms on PsiTurk's experiment exchange.","title":"Integrating with Mechanical Turk"},{"location":"overview/mturk/#integrating-with-mechanical-turk","text":"A common use of jsPsych is to build an online experiment and find subjects using Mechanical Turk . Once an experiment is available through a web server and data is being saved on the server , connecting the experiment with Mechanical Turk takes only a few additional steps. jsPsych has some built-in functionality to assist with this process.","title":"Integrating with Mechanical Turk"},{"location":"overview/mturk/#the-jspsychturk-module","text":"The jsPsych.turk module contains functions that are relevant for experiments running on Mechanical Turk.","title":"The jsPsych.turk module"},{"location":"overview/mturk/#creating-an-advertisement-page","text":"When potential subjects view your experiment on Mechanical Turk, they will be able to see a single webpage before deciding whether or not to accept the HIT (start the experiment). This first page is often used as an advertisement for the experiment, similar to posting a flier in a department hallway. The important thing to remember about this page is that potential subjects will be able to interact with it even if they haven't accepted the HIT. Therefore, it can be useful to change the content of the page depending on whether the HIT has been accepted or not. This is relatively easy to do: < div id = \"experiment_link\" > You must accept the HIT to begin the experiment </ div > . < script > // jsPsych has a method turkInfo() which can determine whether or not the // HIT has been accepted. var turkInfo = jsPsych . turkInfo (); // turkInfo.previewMode is true in two cases: when the HIT has not been // accepted yet OR when the page is viewed outside of mechanical turk. // The second property, outsideTurk, is true when the page is viewed // outside of mechanical turk, so together, the statement will be true // only when in Turk and when the HIT is not accepted yet. if ( ! turkInfo . previewMode && ! turkInfo . outsideTurk ) { document . querySelector ( '#experiment_link' ). innerHMTL = '<a href=\"link_to_experiment.html\" target=\"_blank\">Click Here to Start Experiment</a>' ; } </ script > One important issue with advertisement pages is that they must be served using the https protocol, which requires having an SSL certificate on the web server hosting the page. Instructions for how to do this vary depending on what kind of server you are using, so the best advice is to simply Google for instructions on how to acquire and install an SSL certificate on your particular server.","title":"Creating an advertisement page"},{"location":"overview/mturk/#getting-the-worker-id","text":"Every account on Mechanical Turk is given a unique identification string. Recording this ID is a useful way to keep track of who is doing your experiment. In particular, while Turk has built in tools for preventing the same person from doing a HIT more than once, there may be cases where you don't want subjects to complete related experiments. If you store the worker ID of every person who starts an experiment in a database, then you can exclude people by running a query on the database to check for the ID. jsPsych can get the workerID, assignmentID, and hitID with the turkInfo method. var turkInfo = jsPsych . turk . turkInfo (); // workerID turkInfo . workerId // hitID turkInfo . hitId // assignmentID turkInfo . assignmentId Recording the workerId at the start of the experiment is also a good way to track dropouts.","title":"Getting the worker ID"},{"location":"overview/mturk/#submitting-results-to-mechanical-turk","text":"If you are running a HIT on Mechanical Turk using the ExternalQuestion template, then you'll need to provide a way for subjects to indicate that they have completed the HIT. (If you are using another template, then the template will provide this code for you). jsPSych makes this a relatively easy task. A common strategy for external HITs is to display an HTML page on the Mechanical Turk website that links to your HIT. Subjects click the link, which opens the actual experiment content in a new browser window or tab, allowing the experiment to take up the whole browser window instead of just the iframe that displays content on Mechanical Turk. On this page, you might include a submit button for workers to indicate that they have finished the experiment. The page would look something like this: < p > Enter the code you were given: </ p > < input type = \"text\" id = \"code\" ></ input > < button onclick = \"sendData();\" > Submit HIT </ button > < script > function sendData () { jsPsych . turk . submitToTurk ({ code : document . getElementById ( 'code' ). value }); } </ script > When workers click the button, the contents of the code text field will be sent to Mechanical Turk, and you'll be able to view the subjects and the codes that they entered in the Mechanical Turk GUI. You can then approve or reject work using the Mechanical Turk website.","title":"Submitting results to Mechanical Turk"},{"location":"overview/mturk/#limitations","text":"jsPsych is not designed to communicate with the Mechanical Turk API in a comprehensive manner. If you are looking for software to help you post and manage HITs, then you may want to look at PsiTurk . jsPsych and PsiTurk complement each other nicely, and there is an example of combining the two platforms on PsiTurk's experiment exchange.","title":"Limitations"},{"location":"overview/progress-bar/","text":"Automatic Progress Bar \u00b6 jsPsych can show a progress bar at the top of the experiment page indicating the subject's overall completion progress. The progress bar is rendered outside the jsPsych display element, and it requires the jspsych.css file to be loaded on the page. As of version 6.0, the progress bar looks like this: To show the progress bar, set the show_progress_bar option in jsPsych.init to true : jsPsych . init ({ timeline : exp , show_progress_bar : true }); The progress bar updates after every node on the top-level timeline updates. This avoids distracting updates in the middle of trials that are composed of multiple plugins, or confusing updates due to looping or conditional structures that may or may not execute depending on the actions of the subject. This also allows some flexibility for the programmer; by nesting timelines in a deliberate manner, the timing of progress bar updates can be controlled. Manual Control \u00b6 The progress bar can also be manually controlled using the function jsPsych.setProgressBar() . This function takes a numeric value between 0 and 1, representing the proportion of the progress bar to fill. var trial = { type : 'html-keyboard-response' , stimulus : 'Almost done...' , on_finish : function (){ jsPsych . setProgressBar ( 0.85 ); // set progress bar to 85% full. } } You can also get the current value of the progress bar with jsPsych.getProgressBarCompleted() . var proportion_complete = jsPsych . getProgressBarCompleted (); If you are going to use manual progress bar control, you may want to disable the automatic progress bar updates by setting the auto_update_progress_bar property in jsPsych.init() to false . jsPsych . init ({ timeline : exp , show_progress_bar : true , auto_update_progress_bar : false }); Here's a complete example showing how to use these functions and jsPsych.init() settings to manually update the progress bar: var n_trials = 5 ; var start = { type : 'html-keyboard-response' , stimulus : 'Press any key to start!' , on_start : function () { // set progress bar to 0 at the start of experiment jsPsych . setProgressBar ( 0 ); } }; var trial = { type : 'html-keyboard-response' , stimulus : 'This is a trial!' , on_finish : function () { // at the end of each trial, update the progress bar // based on the current value and the proportion to update for each trial var curr_progress_bar_value = jsPsych . getProgressBarCompleted (); jsPsych . setProgressBar ( curr_progress_bar_value + ( 1 / n_trials )); } }; var trials = { timeline : [ trial ], repetitions : n_trials }; var done = { type : 'html-keyboard-response' , stimulus : 'Done!' }; jsPsych . init ({ timeline : [ start , trials , done ], show_progress_bar : true , auto_update_progress_bar : false }); Custom Text \u00b6 By default, jsPsych adds the text \"Completion Progress\" to the left of the progress bar. You can specify custom text using the message_progress_bar parameter in jsPsych.init . // support for different spoken languages jsPsych . init ({ timeline : [...], show_progress_bar : true , message_progress_bar : 'Porcentaje completo' }); // no message jsPsych . init ({ timeline : [...], show_progress_bar : true , message_progress_bar : '' });","title":"Automatic Progress Bar"},{"location":"overview/progress-bar/#automatic-progress-bar","text":"jsPsych can show a progress bar at the top of the experiment page indicating the subject's overall completion progress. The progress bar is rendered outside the jsPsych display element, and it requires the jspsych.css file to be loaded on the page. As of version 6.0, the progress bar looks like this: To show the progress bar, set the show_progress_bar option in jsPsych.init to true : jsPsych . init ({ timeline : exp , show_progress_bar : true }); The progress bar updates after every node on the top-level timeline updates. This avoids distracting updates in the middle of trials that are composed of multiple plugins, or confusing updates due to looping or conditional structures that may or may not execute depending on the actions of the subject. This also allows some flexibility for the programmer; by nesting timelines in a deliberate manner, the timing of progress bar updates can be controlled.","title":"Automatic Progress Bar"},{"location":"overview/progress-bar/#manual-control","text":"The progress bar can also be manually controlled using the function jsPsych.setProgressBar() . This function takes a numeric value between 0 and 1, representing the proportion of the progress bar to fill. var trial = { type : 'html-keyboard-response' , stimulus : 'Almost done...' , on_finish : function (){ jsPsych . setProgressBar ( 0.85 ); // set progress bar to 85% full. } } You can also get the current value of the progress bar with jsPsych.getProgressBarCompleted() . var proportion_complete = jsPsych . getProgressBarCompleted (); If you are going to use manual progress bar control, you may want to disable the automatic progress bar updates by setting the auto_update_progress_bar property in jsPsych.init() to false . jsPsych . init ({ timeline : exp , show_progress_bar : true , auto_update_progress_bar : false }); Here's a complete example showing how to use these functions and jsPsych.init() settings to manually update the progress bar: var n_trials = 5 ; var start = { type : 'html-keyboard-response' , stimulus : 'Press any key to start!' , on_start : function () { // set progress bar to 0 at the start of experiment jsPsych . setProgressBar ( 0 ); } }; var trial = { type : 'html-keyboard-response' , stimulus : 'This is a trial!' , on_finish : function () { // at the end of each trial, update the progress bar // based on the current value and the proportion to update for each trial var curr_progress_bar_value = jsPsych . getProgressBarCompleted (); jsPsych . setProgressBar ( curr_progress_bar_value + ( 1 / n_trials )); } }; var trials = { timeline : [ trial ], repetitions : n_trials }; var done = { type : 'html-keyboard-response' , stimulus : 'Done!' }; jsPsych . init ({ timeline : [ start , trials , done ], show_progress_bar : true , auto_update_progress_bar : false });","title":"Manual Control"},{"location":"overview/progress-bar/#custom-text","text":"By default, jsPsych adds the text \"Completion Progress\" to the left of the progress bar. You can specify custom text using the message_progress_bar parameter in jsPsych.init . // support for different spoken languages jsPsych . init ({ timeline : [...], show_progress_bar : true , message_progress_bar : 'Porcentaje completo' }); // no message jsPsych . init ({ timeline : [...], show_progress_bar : true , message_progress_bar : '' });","title":"Custom Text"},{"location":"overview/record-browser-interactions/","text":"Record browser interactions \u00b6 Participants in an online experiment have the freedom to multitask while performing an experiment. jsPsych automatically records information about when the user clicks on a window that is not the experiment, and about when the user exits full screen mode if the experiment is running in full screen mode. This data is stored separately from the main experiment data, and can be accessed with jsPsych.data.getInteractionData() . Each time the user leaves the experiment window, returns to the experiment window, exits full screen mode, or enters full screen mode, the event is recorded in the interaction data. Each event has the following structure. { event : 'focus' , // 'focus' or 'blur' or 'fullscreenenter' or 'fullscreenexit' trial : 12 , // the index of the active trial when the event happened time : 1240543 // time in ms since the start of the experiment } You can specify a custom function, in the jsPsych.init() method, that is called whenever one of these events occurs jsPsych . init ({ on_interaction_data_update : function ( data ) { console . log ( JSON . stringify ( data )) } });","title":"Record Browser Interactions"},{"location":"overview/record-browser-interactions/#record-browser-interactions","text":"Participants in an online experiment have the freedom to multitask while performing an experiment. jsPsych automatically records information about when the user clicks on a window that is not the experiment, and about when the user exits full screen mode if the experiment is running in full screen mode. This data is stored separately from the main experiment data, and can be accessed with jsPsych.data.getInteractionData() . Each time the user leaves the experiment window, returns to the experiment window, exits full screen mode, or enters full screen mode, the event is recorded in the interaction data. Each event has the following structure. { event : 'focus' , // 'focus' or 'blur' or 'fullscreenenter' or 'fullscreenexit' trial : 12 , // the index of the active trial when the event happened time : 1240543 // time in ms since the start of the experiment } You can specify a custom function, in the jsPsych.init() method, that is called whenever one of these events occurs jsPsych . init ({ on_interaction_data_update : function ( data ) { console . log ( JSON . stringify ( data )) } });","title":"Record browser interactions"},{"location":"overview/running-experiments/","text":"Running Experiments \u00b6 You can run your jsPsych experiment: offline , by opening the HTML file directly in the browser using the file:// protocol online , by hosting the files on a web server using the http:// or https:// protocol The way that you run your experiment will have consequences for certain aspects about how the experiment works, and what your experiment will be able to do. This page explains what you need to know about both of these options. Offline \u00b6 You can run your jsPsych experiment offline by opening the HTML file directly in a web browser, for instance by double-clicking on it. This uses the file:// protocol. It's usually the fastest and easiest way to run through an experiment, and is very useful while writing and testing the code. At some point you will need to move your experiment files onto a server and send the data to a database, since this is how you will ultimately collect the data (unless you're planning to collect data on your local computer). There are some important differences between the way the experiment runs offline compared to online via a web server. Note that, unless noted, here we're using the word \"server\" to mean either a local server (which runs on your computer and only makes the experiment files available from within that computer, and is often used during development), or a remote server (which does not run on your computer and does share your experiment files over the internet). Cross-origin requests (CORS) and safe mode \u00b6 Web browsers have a security policy called cross-origin resource sharing (CORS) that determines whether the webpage can request files that come from a different origin (i.e. protocol, host/domain, and port). This isn't a problem when your study runs online , because in that case your experiment files all have the same origin. However, when you run your experiment offline , the CORS policy blocks some jsPsych features that require loading local files . If your experiment uses these features, then CORS errors will prevent the experiment from running. To prevent these errors, jsPsych uses a 'safe mode' when it detects that the HTML page is running via the file:// protocol, and if so, automatically disables the features that don't work in that context. Specifically, when a jsPsych experiment runs offline: Web Audio is disabled (even if use_webaudio is set to true in jsPsych.init ). The WebAudio API option is used by default because it allows more precise measurement of response times relative to the onset of the audio. But because WebAudio doesn't work offline, audio will be played using HTML5 audio instead. This is equivalent to setting use_webaudio to false in jsPsych.init . Video preloading is disabled (both automatic preloading via plugins, and manual preloading via preload_video in jsPsych.init ). Videos will still play when you run your experiment offline, but they will load during the experiment, which might cause noticeable delays before video playback starts. This safe mode feature is controlled by the override_safe_mode parameter in jsPsych.init , which defaults to false . If you leave this setting as the default, then you won't need to worry about CORS errors while running your experiment offline, or remembering to change your jsPsych.init settings when you move the experiment online. It's possible to override jsPsych's safe mode by setting override_safe_mode to true in jsPsych.init . One reason you might do this is if you've disabled web security features in your browser (see here and here for instructions in Chrome), which is safe to do if you know what you're doing. If your experiment does not use Web Audio or preloaded videos, then jsPsych's safe mode feature will not have any effect. The override_safe_mode parameter also has no effect when your experiment is running online a web server, because the page will be loaded via the http:// or https:// protocol. Media loading \u00b6 While running your experiment offline, any media files are likely to load very quickly because they are stored on your own computer's disk. Therefore you may not notice problems with file loading delays while running your experiment locally (either offline or on a local server) because the files will load fast enough that they never cause disruption. However, when your experiment is hosted on a remote server, the files will need to be transferred over the internet, which means they will take longer to load - in some cases much longer. Loading delays are most noticeable with media files: images, audio, and video. As explained on the Media Preloading page, loading delays during your experiment can cause problems for stimulus display and response times. It is important to test your experiment to ensure that any media files are preloading successfully and not being requested again during the experiment. You can use the Network tab in your browser's developer tools to see when files are loaded and to simulate a slow internet connection (see here for Chrome Network tab documentation). If you are preloading many and/or large files, such as videos, you may want to increase the max_load_time parameter in jsPsych.init so that participants with slow/unreliable internet connections will be able to take part in your experiment. Permanent data storage \u00b6 As explained in the Data Storage, Aggregation, and Manipulation page, jsPsych stores information in the participant's browser. While running an experiment offline, you won't be able to send the data to a database. However you can still see the data that jsPsych collects by saving it as a local file (using jsPsych.data.get().localSave ), displaying it in the webpage at the end of the experiment (using jsPsych.data.displayData ), or printing it to the browser's console (using console.log ). Permanent data storage is also necessary when the code that runs the experiment depends on information that can't be known in advance, and that changes throughout data collection. Some common examples of this in cognitive behavioral research are version counterbalancing , where the experiment code needs to access and update the history of version assignment in order to determine which version should be assigned, and multi-session/training studies , where the experiment might need to access and update information about each participant like their current session number, task difficulty level, etc. Doing these things in an automated way requires the use of a server. While developing and testing your experiment offline, you might choose to simulate some of these things and then implement them properly once you move your experiment online. For instance, you could randomize instead of counterbalancing version assignment: var versions = [ 1 , 2 ]; var random_version = jsPsych . randomization . sampleWithoutReplacement ( versions , 1 )[ 0 ]; And use URL query parameters to pass in variables like session number and difficulty level: // add the variables onto the end of the URL that appears in the browser when you open the file // e.g., file:///C:/my_experiment.html?id=1&sess=2&diff=3 var participant_id = jsPsych . data . getURLVariable ( 'id' ); var session = jsPsych . data . getURLVariable ( 'sess' ); var difficulty = jsPsych . data . getURLVariable ( 'diff' ); Online \u00b6 Hosting the Experiment and Saving the Data \u00b6 jsPsych is a front-end JavaScript library that runs entirely on the participant's computer. To run a jsPsych experiment over the internet, the files need to be hosted on a public web server so that participants can access the experiment using a web browser. When the participant completes the experiment in the browser, all of the data that jsPsych collects is stored on the participant's computer in the browser's memory. To get access to this data, it needs to be sent from the participant's browser back to the web server and stored in a database or a file. To be maximally flexible, jsPsych doesn't provide a single built-in solution for the web server component of your experiment. This makes jsPsych compatible with a wide range of hosting services and tools, allowing researchers to choose the web server option that best suit their needs. Some options for running your jsPsych experiment online include: Cognition.run - A free service designed specifically for hosting jsPsych experiments, with an easy-to-use interface. JATOS - A free program that runs on your own server and provides a GUI for setting up experiments and accessing the data. Offers lots of features for creating more complex experiments and managing multiple researchers. Pavlovia - A paid hosting service for web-based experiments, run by the PsychoPy team. Experiment files are managed on a GitLab repository. Participants will access the experiment through a link to Pavlovia. PsiTurk - Python-based program to help you host your experiment on your own computer and collect data from MTurk (see Recruiting Participants below). Relatively easy for a DIY option. Pushkin - A set of tools to help you set up your own virtual laboratory for online experiments. This option differs from the others in that it helps you set up a complete website that may contain many different experiments, information about the laboratory, participant logins, and other features that are targeted at hosting large-scale data collection efforts. Full DIY - You can setup your own web server and database and handle the communication yourself. Traditional web server 'stacks' include LAMP / LEMP (Linux operating system, Apache or Nginx server application, MySQL database, and PHP programming language). Other common web server frameworks include Flask (Python) and Node.js (JavaScript). Recruiting Participants \u00b6 Once your experiment is running online, you could recruit participants in the same way that you would for lab-based studies. For instance, if your institution uses SONA, you can advertise your web-based study link on SONA. SONA allows you to automactically embed a unique ID in online study URLs, which you can then save in your data using jsPsych's URL query parameters function . SONA will also generate a completion URL that you can redirect participants to at the end of the study, and this will mark them as having completed the study in SONA. To take full advantage of hosting an experiment online, many researchers advertise their experiments more widely. Social media and other media outlets provide one option for reaching a large number of potential participants. There are also some commercial platforms that you can use to advertise your study and pay anonymous online participants. These recruitment platforms charge a fee for use. The advantages of these platforms are that they handle the participant payments and allow you to specify pre-screening criteria. The most commonly used recruitment platforms in online behavioral research are: Prolific : An online labor market designed specifically for web-based research. Amazon Mechanical Turk (MTurk) : An online labor market designed for advertising paid 'human intelligence tasks'. This service was designed for use by commercial businesses but has been used by behavioral researchers for many years. Like SONA, Prolific and MTurk use URL query parameters to get participant information, and redirection to specific URLs to mark participants as having finished the study. jsPsych includes convenience functions for interacting with MTurk participants . Information about integrating with Prolific can be found in the researcher support section of their website.","title":"Running Experiments"},{"location":"overview/running-experiments/#running-experiments","text":"You can run your jsPsych experiment: offline , by opening the HTML file directly in the browser using the file:// protocol online , by hosting the files on a web server using the http:// or https:// protocol The way that you run your experiment will have consequences for certain aspects about how the experiment works, and what your experiment will be able to do. This page explains what you need to know about both of these options.","title":"Running Experiments"},{"location":"overview/running-experiments/#offline","text":"You can run your jsPsych experiment offline by opening the HTML file directly in a web browser, for instance by double-clicking on it. This uses the file:// protocol. It's usually the fastest and easiest way to run through an experiment, and is very useful while writing and testing the code. At some point you will need to move your experiment files onto a server and send the data to a database, since this is how you will ultimately collect the data (unless you're planning to collect data on your local computer). There are some important differences between the way the experiment runs offline compared to online via a web server. Note that, unless noted, here we're using the word \"server\" to mean either a local server (which runs on your computer and only makes the experiment files available from within that computer, and is often used during development), or a remote server (which does not run on your computer and does share your experiment files over the internet).","title":"Offline"},{"location":"overview/running-experiments/#cross-origin-requests-cors-and-safe-mode","text":"Web browsers have a security policy called cross-origin resource sharing (CORS) that determines whether the webpage can request files that come from a different origin (i.e. protocol, host/domain, and port). This isn't a problem when your study runs online , because in that case your experiment files all have the same origin. However, when you run your experiment offline , the CORS policy blocks some jsPsych features that require loading local files . If your experiment uses these features, then CORS errors will prevent the experiment from running. To prevent these errors, jsPsych uses a 'safe mode' when it detects that the HTML page is running via the file:// protocol, and if so, automatically disables the features that don't work in that context. Specifically, when a jsPsych experiment runs offline: Web Audio is disabled (even if use_webaudio is set to true in jsPsych.init ). The WebAudio API option is used by default because it allows more precise measurement of response times relative to the onset of the audio. But because WebAudio doesn't work offline, audio will be played using HTML5 audio instead. This is equivalent to setting use_webaudio to false in jsPsych.init . Video preloading is disabled (both automatic preloading via plugins, and manual preloading via preload_video in jsPsych.init ). Videos will still play when you run your experiment offline, but they will load during the experiment, which might cause noticeable delays before video playback starts. This safe mode feature is controlled by the override_safe_mode parameter in jsPsych.init , which defaults to false . If you leave this setting as the default, then you won't need to worry about CORS errors while running your experiment offline, or remembering to change your jsPsych.init settings when you move the experiment online. It's possible to override jsPsych's safe mode by setting override_safe_mode to true in jsPsych.init . One reason you might do this is if you've disabled web security features in your browser (see here and here for instructions in Chrome), which is safe to do if you know what you're doing. If your experiment does not use Web Audio or preloaded videos, then jsPsych's safe mode feature will not have any effect. The override_safe_mode parameter also has no effect when your experiment is running online a web server, because the page will be loaded via the http:// or https:// protocol.","title":"Cross-origin requests (CORS) and safe mode"},{"location":"overview/running-experiments/#media-loading","text":"While running your experiment offline, any media files are likely to load very quickly because they are stored on your own computer's disk. Therefore you may not notice problems with file loading delays while running your experiment locally (either offline or on a local server) because the files will load fast enough that they never cause disruption. However, when your experiment is hosted on a remote server, the files will need to be transferred over the internet, which means they will take longer to load - in some cases much longer. Loading delays are most noticeable with media files: images, audio, and video. As explained on the Media Preloading page, loading delays during your experiment can cause problems for stimulus display and response times. It is important to test your experiment to ensure that any media files are preloading successfully and not being requested again during the experiment. You can use the Network tab in your browser's developer tools to see when files are loaded and to simulate a slow internet connection (see here for Chrome Network tab documentation). If you are preloading many and/or large files, such as videos, you may want to increase the max_load_time parameter in jsPsych.init so that participants with slow/unreliable internet connections will be able to take part in your experiment.","title":"Media loading"},{"location":"overview/running-experiments/#permanent-data-storage","text":"As explained in the Data Storage, Aggregation, and Manipulation page, jsPsych stores information in the participant's browser. While running an experiment offline, you won't be able to send the data to a database. However you can still see the data that jsPsych collects by saving it as a local file (using jsPsych.data.get().localSave ), displaying it in the webpage at the end of the experiment (using jsPsych.data.displayData ), or printing it to the browser's console (using console.log ). Permanent data storage is also necessary when the code that runs the experiment depends on information that can't be known in advance, and that changes throughout data collection. Some common examples of this in cognitive behavioral research are version counterbalancing , where the experiment code needs to access and update the history of version assignment in order to determine which version should be assigned, and multi-session/training studies , where the experiment might need to access and update information about each participant like their current session number, task difficulty level, etc. Doing these things in an automated way requires the use of a server. While developing and testing your experiment offline, you might choose to simulate some of these things and then implement them properly once you move your experiment online. For instance, you could randomize instead of counterbalancing version assignment: var versions = [ 1 , 2 ]; var random_version = jsPsych . randomization . sampleWithoutReplacement ( versions , 1 )[ 0 ]; And use URL query parameters to pass in variables like session number and difficulty level: // add the variables onto the end of the URL that appears in the browser when you open the file // e.g., file:///C:/my_experiment.html?id=1&sess=2&diff=3 var participant_id = jsPsych . data . getURLVariable ( 'id' ); var session = jsPsych . data . getURLVariable ( 'sess' ); var difficulty = jsPsych . data . getURLVariable ( 'diff' );","title":"Permanent data storage"},{"location":"overview/running-experiments/#online","text":"","title":"Online"},{"location":"overview/running-experiments/#hosting-the-experiment-and-saving-the-data","text":"jsPsych is a front-end JavaScript library that runs entirely on the participant's computer. To run a jsPsych experiment over the internet, the files need to be hosted on a public web server so that participants can access the experiment using a web browser. When the participant completes the experiment in the browser, all of the data that jsPsych collects is stored on the participant's computer in the browser's memory. To get access to this data, it needs to be sent from the participant's browser back to the web server and stored in a database or a file. To be maximally flexible, jsPsych doesn't provide a single built-in solution for the web server component of your experiment. This makes jsPsych compatible with a wide range of hosting services and tools, allowing researchers to choose the web server option that best suit their needs. Some options for running your jsPsych experiment online include: Cognition.run - A free service designed specifically for hosting jsPsych experiments, with an easy-to-use interface. JATOS - A free program that runs on your own server and provides a GUI for setting up experiments and accessing the data. Offers lots of features for creating more complex experiments and managing multiple researchers. Pavlovia - A paid hosting service for web-based experiments, run by the PsychoPy team. Experiment files are managed on a GitLab repository. Participants will access the experiment through a link to Pavlovia. PsiTurk - Python-based program to help you host your experiment on your own computer and collect data from MTurk (see Recruiting Participants below). Relatively easy for a DIY option. Pushkin - A set of tools to help you set up your own virtual laboratory for online experiments. This option differs from the others in that it helps you set up a complete website that may contain many different experiments, information about the laboratory, participant logins, and other features that are targeted at hosting large-scale data collection efforts. Full DIY - You can setup your own web server and database and handle the communication yourself. Traditional web server 'stacks' include LAMP / LEMP (Linux operating system, Apache or Nginx server application, MySQL database, and PHP programming language). Other common web server frameworks include Flask (Python) and Node.js (JavaScript).","title":"Hosting the Experiment and Saving the Data"},{"location":"overview/running-experiments/#recruiting-participants","text":"Once your experiment is running online, you could recruit participants in the same way that you would for lab-based studies. For instance, if your institution uses SONA, you can advertise your web-based study link on SONA. SONA allows you to automactically embed a unique ID in online study URLs, which you can then save in your data using jsPsych's URL query parameters function . SONA will also generate a completion URL that you can redirect participants to at the end of the study, and this will mark them as having completed the study in SONA. To take full advantage of hosting an experiment online, many researchers advertise their experiments more widely. Social media and other media outlets provide one option for reaching a large number of potential participants. There are also some commercial platforms that you can use to advertise your study and pay anonymous online participants. These recruitment platforms charge a fee for use. The advantages of these platforms are that they handle the participant payments and allow you to specify pre-screening criteria. The most commonly used recruitment platforms in online behavioral research are: Prolific : An online labor market designed specifically for web-based research. Amazon Mechanical Turk (MTurk) : An online labor market designed for advertising paid 'human intelligence tasks'. This service was designed for use by commercial businesses but has been used by behavioral researchers for many years. Like SONA, Prolific and MTurk use URL query parameters to get participant information, and redirection to specific URLs to mark participants as having finished the study. jsPsych includes convenience functions for interacting with MTurk participants . Information about integrating with Prolific can be found in the researcher support section of their website.","title":"Recruiting Participants"},{"location":"overview/timeline/","text":"Creating an Experiment: The Timeline \u00b6 To create an experiment using jsPsych, you need to specify a timeline that describes the structure of the experiment. The timeline is an ordered set of trials. You must create the timeline before launching the experiment. Most of the code you will write for an experiment will be code to create the timeline. This page walks through the creation of timelines, including very basic examples and more advanced features. A single trial \u00b6 To create a trial, you need to create an object that describes the trial. The most important feature of this object is the type parameter. This tells jsPsych which plugin file to use to run the trial. For example, if you want to use the text plugin to display a short message, the trial object would look like this: var trial = { type : 'html-keyboard-response' , stimulus : 'hello world!' } The parameters for this object will depend on the plugin that you choose. Each plugin defines the set of parameters that are needed to run a trial with that plugin. Visit the documentation for a plugin to learn about the parameters that you can use with that plugin. To create a timeline with the single trial and run the experiment, just embed the trial object in an array. A timeline is simply an array of trials. var timeline = [ trial ]; jsPsych . init ({ timeline : timeline }); To actually create and run this simple example, complete the hello world tutorial . Multiple trials \u00b6 Scaling up to multiple trials is straightforward. Just create an object for each trial, and add each object to the timeline array. // with lots of trials, it might be easier to add the trials // to the timeline array as they are defined. var timeline = []; var trial_1 = { type : 'html-keyboard-response' , stimulus : 'This is trial 1.' } timeline . push ( trial_1 ); var trial_2 = { type : 'html-keyboard-response' , stimulus : 'This is trial 2.' } timeline . push ( trial_2 ); var trial_3 = { type : 'html-keyboard-response' , stimulus : 'This is trial 3.' } timeline . push ( trial_3 ); Nested timelines \u00b6 Each object on the timeline can also have it's own timeline. This is useful for many reasons. One is that it allows you to define common parameters across trials once and have them apply to all the trials on the nested timeline. The example below creates a series of trials using the image-keyboard-response plugin, where the only thing that changes from trial-to-trial is the image file being displayed on the screen. var judgment_trials = { type : 'image-keyboard-response' , prompt : '<p>Press a number 1-7 to indicate how unusual the image is.</p>' , choices : [ '1' , '2' , '3' , '4' , '5' , '6' , '7' ], timeline : [ { stimulus : 'image1.png' }, { stimulus : 'image2.png' }, { stimulus : 'image3.png' } ] } In the above code, the type , prompt , and choices parameters are automatically applied to all of the objects in the timeline array. This creates three trials with the same type , prompt , and choices parameters, but different values for the stimulus parameter. You can also override the values by declaring a new value in the timeline array. In the example below, the second trial will display a different prompt message. var judgment_trials = { type : 'image-keyboard-response' , prompt : '<p>Press a number 1-7 to indicate how unusual the image is.</p>' , choices : [ '1' , '2' , '3' , '4' , '5' , '6' , '7' ], timeline : [ { stimulus : 'image1.png' }, { stimulus : 'image2.png' , prompt : '<p>Press 1 for this trial.</p>' }, { stimulus : 'image3.png' } ] } Timelines can be nested any number of times. Timeline variables \u00b6 A common pattern in behavioral experiments is to repeat the same procedure many times with slightly different parameters. A procedure might be a single trial, but it also might be a series of trials. One shortcut to implement this pattern is with the approach described in the previous section, but this only works if all the trials use the same plugin type. Timeline variables are a more general solution. With timeline variables you define the procedure once (as a timeline) and specify a set of parameters and their values for each iteration through the timeline. What follows is an example of how to use timeline variables. The simple reaction time tutorial also explains how to use timeline variables. Suppose we want to create an experiment where people see a set of faces. Perhaps this is a memory experiment and this is the phase of the experiment where the faces are being presented for the first time. In between each face, a fixation cross is displayed on the screen. Without timeline variables, we would need to add many trials to the timeline, alternating between trials showing the fixation cross and trials showing the face and name. This could be done efficiently using a loop or function, but timeline variables make it even easier - as well as adding extra features like sampling and randomization. Here's a basic version of the task with timeline variables. var face_name_procedure = { timeline : [ { type : 'html-keyboard-response' , stimulus : '+' , choices : jsPsych . NO_KEYS , trial_duration : 500 }, { type : 'image-keyboard-response' , stimulus : jsPsych . timelineVariable ( 'face' ), choices : jsPsych . NO_KEYS , trial_duration : 2500 } ], timeline_variables : [ { face : 'person-1.jpg' }, { face : 'person-2.jpg' }, { face : 'person-3.jpg' }, { face : 'person-4.jpg' } ] } In the above version, there are four separate trials defined in the timeline_variables parameter. Each trial has a variable face and a variable name . The timeline defines a procedure of showing a fixation cross for 500ms followed by the face and name for 2500ms. This procedure will repeat four times, with the first trial showing Alex, the second Beth, and so on. The variables are referenced within the procedure by calling the jsPsych.timelineVariable() method and passing in the name of the variable. What if we wanted the stimuli to be a little more complex, with a name displayed below each face? And let's add an additional step where the name is displayed prior to the face appearing. (Maybe this is one condition of an experiment investigating whether the order of name-face or face-name affects retention.) To do this, we will need to use the jsPsych.timelineVariable() method in a slightly different way. Instead of using it as the parameter, we are going to create a dynamic parameter using a function and place the call to jsPsych.timelineVariable() inside this function. This will allow us to create an HTML string that has both the image and the name. Note that there is a subtle syntax difference: there is an extra parameter when jsPsych.timelineVariable() is called within a function. This true value causes the jsPsych.timelineVariable() to immediately return the value of the timeline variable. In a normal context, the function jsPsych.timelineVariable() returns a function. This is why jsPsych.timelineVariable() can be used directly as a parameter even though the parameter is dynamic. var face_name_procedure = { timeline : [ { type : 'html-keyboard-response' , stimulus : '+' , choices : jsPsych . NO_KEYS , trial_duration : 500 }, { type : 'html-keyboard-response' , stimulus : jsPsych . timelineVariable ( 'name' ), trial_duration : 1000 , choices : jsPsych . NO_KEYS }, { type : 'html-keyboard-response' , stimulus : function (){ var html = \"<img src='\" + jsPsych . timelineVariable ( 'face' , true ) + \"'>\" ; html += \"<p>\" + jsPsych . timelineVariable ( 'name' , true ) + \"</p>\" ; return html ; }, choices : jsPsych . NO_KEYS , trial_duration : 2500 } ], timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ] } Random orders of trials \u00b6 If we want to randomize the order of the trials, we can set randomize_order to true . var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], randomize_order : true } Repeating trials \u00b6 If we want to repeat the set of trials multiple times, then we can set repetitions to an integer. If randomize_order is also true , the order will re-randomize before every repetition. var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], randomize_order : true , repetitions : 3 } Sampling methods \u00b6 There are also a set of sampling methods that can be used to select a set of trials from the timeline_variables. Sampling is declared by creating a sample parameter. The sample parameter is given an object of arguments. The type parameter in this object controls the type of sampling that is done. Valid values for type are \"with-replacement\" : Sample size items from the timeline variables with the possibility of choosing the same item multiple time. \"without-replacement\" : Sample size itesm from timeline variables, with each item being selected a maximum of 1 time. \"fixed-repetitons\" : Repeat each item in the timeline variables size times, in a random order. Unlike using the repetitons parameter, this method allows for consecutive trials to use the same timeline variable set. \"alternate-groups\" : Sample in an alternating order based on a declared group membership. Groups are defined by the groups parameter. This parameter takes an array of arrays, where each inner array is a group and the items in the inner array are the indices of the timeline variables in the timeline_variables array that belong to that group. \"custom\" : Write a function that returns a custom order of the timeline variables. Sampling with replacement \u00b6 var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'with-replacement' , size : 10 , // 10 trials, with replacement } } Sampling with replacement, unequal probabilities \u00b6 var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'with-replacement' , size : 10 , // 10 trials, with replacement weights : [ 3 , 1 , 1 , 1 ], // The Alex trial is three times as likely to be sampled as the others. } } Sampling without replacement \u00b6 var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'without-replacement' , size : 3 , // 3 trials, without replacement } } Repeating each trial a fixed number of times in a random order \u00b6 var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'fixed-repetitions' , size : 3 , // 3 repetitions of each trial, 12 total trials, order is randomized. } } Alternating groups \u00b6 var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'alternate-groups' , groups : [[ 0 , 2 ],[ 1 , 3 ]], // Alex and Chad are in group 1. Beth and Dave are in group 2. randomize_group_order : false // The first trial will be an item from group 1. } } Custom sampling function \u00b6 var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'custom' , fn : function ( t ){ // the first parameter to this function call is an array of integers // from 0 to n-1, where n is the number of trials. // the method needs to return an array of integers specifying the order // that the trials should be executed. this array does not need to // contain all of the integers. return t . reverse (); // show the trials in the reverse order } } } Looping timelines \u00b6 Any timeline can be looped using the loop_function option. The loop function should be a function that evaluates to true if the timeline should repeat, and false if the timeline should end. It receives a single parameter: the DataCollection object with all of the data from the trials executed in the last iteration of the timeline. The loop function will be evaluated after the timeline is completed. var trial = { type : 'html-keyboard-response' , stimulus : 'This trial is in a loop. Press R to repeat this trial, or C to continue.' } var loop_node = { timeline : [ trial ], loop_function : function ( data ){ if ( jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'r' ) == data . values ()[ 0 ]. key_press ){ return true ; } else { return false ; } } } Conditional timelines \u00b6 A timeline can be skipped based on the evaluation of a function using the conditional_function option. If the conditional function evaluates to true , the timeline will execute normally. If the conditional function evaluates to false , then the timeline will be skipped. The conditional function is evaluated whenever the timeline is about to run the first trial. var pre_if_trial = { type : 'html-keyboard-response' , stimulus : 'The next trial is in a conditional statement. Press S to skip it, or V to view it.' } var if_trial = { type : 'html-keyboard-response' , stimulus : 'You chose to view the trial. Press any key to continue.' } var if_node = { timeline : [ if_trial ], conditional_function : function (){ // get the data from the previous trial, // and check which key was pressed var data = jsPsych . data . get (). last ( 1 ). values ()[ 0 ]; if ( data . key_press == jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 's' )){ return false ; } else { return true ; } } } var after_if_trial = { type : 'html-keyboard-response' , stimulus : 'This is the trial after the conditional.' } jsPsych . init ({ timeline : [ pre_if_trial , if_node , after_if_trial ], on_finish : function (){ jsPsych . data . displayData (); } });","title":"Creating an Experiment: The Timeline"},{"location":"overview/timeline/#creating-an-experiment-the-timeline","text":"To create an experiment using jsPsych, you need to specify a timeline that describes the structure of the experiment. The timeline is an ordered set of trials. You must create the timeline before launching the experiment. Most of the code you will write for an experiment will be code to create the timeline. This page walks through the creation of timelines, including very basic examples and more advanced features.","title":"Creating an Experiment: The Timeline"},{"location":"overview/timeline/#a-single-trial","text":"To create a trial, you need to create an object that describes the trial. The most important feature of this object is the type parameter. This tells jsPsych which plugin file to use to run the trial. For example, if you want to use the text plugin to display a short message, the trial object would look like this: var trial = { type : 'html-keyboard-response' , stimulus : 'hello world!' } The parameters for this object will depend on the plugin that you choose. Each plugin defines the set of parameters that are needed to run a trial with that plugin. Visit the documentation for a plugin to learn about the parameters that you can use with that plugin. To create a timeline with the single trial and run the experiment, just embed the trial object in an array. A timeline is simply an array of trials. var timeline = [ trial ]; jsPsych . init ({ timeline : timeline }); To actually create and run this simple example, complete the hello world tutorial .","title":"A single trial"},{"location":"overview/timeline/#multiple-trials","text":"Scaling up to multiple trials is straightforward. Just create an object for each trial, and add each object to the timeline array. // with lots of trials, it might be easier to add the trials // to the timeline array as they are defined. var timeline = []; var trial_1 = { type : 'html-keyboard-response' , stimulus : 'This is trial 1.' } timeline . push ( trial_1 ); var trial_2 = { type : 'html-keyboard-response' , stimulus : 'This is trial 2.' } timeline . push ( trial_2 ); var trial_3 = { type : 'html-keyboard-response' , stimulus : 'This is trial 3.' } timeline . push ( trial_3 );","title":"Multiple trials"},{"location":"overview/timeline/#nested-timelines","text":"Each object on the timeline can also have it's own timeline. This is useful for many reasons. One is that it allows you to define common parameters across trials once and have them apply to all the trials on the nested timeline. The example below creates a series of trials using the image-keyboard-response plugin, where the only thing that changes from trial-to-trial is the image file being displayed on the screen. var judgment_trials = { type : 'image-keyboard-response' , prompt : '<p>Press a number 1-7 to indicate how unusual the image is.</p>' , choices : [ '1' , '2' , '3' , '4' , '5' , '6' , '7' ], timeline : [ { stimulus : 'image1.png' }, { stimulus : 'image2.png' }, { stimulus : 'image3.png' } ] } In the above code, the type , prompt , and choices parameters are automatically applied to all of the objects in the timeline array. This creates three trials with the same type , prompt , and choices parameters, but different values for the stimulus parameter. You can also override the values by declaring a new value in the timeline array. In the example below, the second trial will display a different prompt message. var judgment_trials = { type : 'image-keyboard-response' , prompt : '<p>Press a number 1-7 to indicate how unusual the image is.</p>' , choices : [ '1' , '2' , '3' , '4' , '5' , '6' , '7' ], timeline : [ { stimulus : 'image1.png' }, { stimulus : 'image2.png' , prompt : '<p>Press 1 for this trial.</p>' }, { stimulus : 'image3.png' } ] } Timelines can be nested any number of times.","title":"Nested timelines"},{"location":"overview/timeline/#timeline-variables","text":"A common pattern in behavioral experiments is to repeat the same procedure many times with slightly different parameters. A procedure might be a single trial, but it also might be a series of trials. One shortcut to implement this pattern is with the approach described in the previous section, but this only works if all the trials use the same plugin type. Timeline variables are a more general solution. With timeline variables you define the procedure once (as a timeline) and specify a set of parameters and their values for each iteration through the timeline. What follows is an example of how to use timeline variables. The simple reaction time tutorial also explains how to use timeline variables. Suppose we want to create an experiment where people see a set of faces. Perhaps this is a memory experiment and this is the phase of the experiment where the faces are being presented for the first time. In between each face, a fixation cross is displayed on the screen. Without timeline variables, we would need to add many trials to the timeline, alternating between trials showing the fixation cross and trials showing the face and name. This could be done efficiently using a loop or function, but timeline variables make it even easier - as well as adding extra features like sampling and randomization. Here's a basic version of the task with timeline variables. var face_name_procedure = { timeline : [ { type : 'html-keyboard-response' , stimulus : '+' , choices : jsPsych . NO_KEYS , trial_duration : 500 }, { type : 'image-keyboard-response' , stimulus : jsPsych . timelineVariable ( 'face' ), choices : jsPsych . NO_KEYS , trial_duration : 2500 } ], timeline_variables : [ { face : 'person-1.jpg' }, { face : 'person-2.jpg' }, { face : 'person-3.jpg' }, { face : 'person-4.jpg' } ] } In the above version, there are four separate trials defined in the timeline_variables parameter. Each trial has a variable face and a variable name . The timeline defines a procedure of showing a fixation cross for 500ms followed by the face and name for 2500ms. This procedure will repeat four times, with the first trial showing Alex, the second Beth, and so on. The variables are referenced within the procedure by calling the jsPsych.timelineVariable() method and passing in the name of the variable. What if we wanted the stimuli to be a little more complex, with a name displayed below each face? And let's add an additional step where the name is displayed prior to the face appearing. (Maybe this is one condition of an experiment investigating whether the order of name-face or face-name affects retention.) To do this, we will need to use the jsPsych.timelineVariable() method in a slightly different way. Instead of using it as the parameter, we are going to create a dynamic parameter using a function and place the call to jsPsych.timelineVariable() inside this function. This will allow us to create an HTML string that has both the image and the name. Note that there is a subtle syntax difference: there is an extra parameter when jsPsych.timelineVariable() is called within a function. This true value causes the jsPsych.timelineVariable() to immediately return the value of the timeline variable. In a normal context, the function jsPsych.timelineVariable() returns a function. This is why jsPsych.timelineVariable() can be used directly as a parameter even though the parameter is dynamic. var face_name_procedure = { timeline : [ { type : 'html-keyboard-response' , stimulus : '+' , choices : jsPsych . NO_KEYS , trial_duration : 500 }, { type : 'html-keyboard-response' , stimulus : jsPsych . timelineVariable ( 'name' ), trial_duration : 1000 , choices : jsPsych . NO_KEYS }, { type : 'html-keyboard-response' , stimulus : function (){ var html = \"<img src='\" + jsPsych . timelineVariable ( 'face' , true ) + \"'>\" ; html += \"<p>\" + jsPsych . timelineVariable ( 'name' , true ) + \"</p>\" ; return html ; }, choices : jsPsych . NO_KEYS , trial_duration : 2500 } ], timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ] }","title":"Timeline variables"},{"location":"overview/timeline/#random-orders-of-trials","text":"If we want to randomize the order of the trials, we can set randomize_order to true . var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], randomize_order : true }","title":"Random orders of trials"},{"location":"overview/timeline/#repeating-trials","text":"If we want to repeat the set of trials multiple times, then we can set repetitions to an integer. If randomize_order is also true , the order will re-randomize before every repetition. var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], randomize_order : true , repetitions : 3 }","title":"Repeating trials"},{"location":"overview/timeline/#sampling-methods","text":"There are also a set of sampling methods that can be used to select a set of trials from the timeline_variables. Sampling is declared by creating a sample parameter. The sample parameter is given an object of arguments. The type parameter in this object controls the type of sampling that is done. Valid values for type are \"with-replacement\" : Sample size items from the timeline variables with the possibility of choosing the same item multiple time. \"without-replacement\" : Sample size itesm from timeline variables, with each item being selected a maximum of 1 time. \"fixed-repetitons\" : Repeat each item in the timeline variables size times, in a random order. Unlike using the repetitons parameter, this method allows for consecutive trials to use the same timeline variable set. \"alternate-groups\" : Sample in an alternating order based on a declared group membership. Groups are defined by the groups parameter. This parameter takes an array of arrays, where each inner array is a group and the items in the inner array are the indices of the timeline variables in the timeline_variables array that belong to that group. \"custom\" : Write a function that returns a custom order of the timeline variables.","title":"Sampling methods"},{"location":"overview/timeline/#sampling-with-replacement","text":"var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'with-replacement' , size : 10 , // 10 trials, with replacement } }","title":"Sampling with replacement"},{"location":"overview/timeline/#sampling-with-replacement-unequal-probabilities","text":"var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'with-replacement' , size : 10 , // 10 trials, with replacement weights : [ 3 , 1 , 1 , 1 ], // The Alex trial is three times as likely to be sampled as the others. } }","title":"Sampling with replacement, unequal probabilities"},{"location":"overview/timeline/#sampling-without-replacement","text":"var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'without-replacement' , size : 3 , // 3 trials, without replacement } }","title":"Sampling without replacement"},{"location":"overview/timeline/#repeating-each-trial-a-fixed-number-of-times-in-a-random-order","text":"var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'fixed-repetitions' , size : 3 , // 3 repetitions of each trial, 12 total trials, order is randomized. } }","title":"Repeating each trial a fixed number of times in a random order"},{"location":"overview/timeline/#alternating-groups","text":"var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'alternate-groups' , groups : [[ 0 , 2 ],[ 1 , 3 ]], // Alex and Chad are in group 1. Beth and Dave are in group 2. randomize_group_order : false // The first trial will be an item from group 1. } }","title":"Alternating groups"},{"location":"overview/timeline/#custom-sampling-function","text":"var face_name_procedure = { // timeline parameter hidden to save space ... timeline_variables : [ { face : 'person-1.jpg' , name : 'Alex' }, { face : 'person-2.jpg' , name : 'Beth' }, { face : 'person-3.jpg' , name : 'Chad' }, { face : 'person-4.jpg' , name : 'Dave' } ], sample : { type : 'custom' , fn : function ( t ){ // the first parameter to this function call is an array of integers // from 0 to n-1, where n is the number of trials. // the method needs to return an array of integers specifying the order // that the trials should be executed. this array does not need to // contain all of the integers. return t . reverse (); // show the trials in the reverse order } } }","title":"Custom sampling function"},{"location":"overview/timeline/#looping-timelines","text":"Any timeline can be looped using the loop_function option. The loop function should be a function that evaluates to true if the timeline should repeat, and false if the timeline should end. It receives a single parameter: the DataCollection object with all of the data from the trials executed in the last iteration of the timeline. The loop function will be evaluated after the timeline is completed. var trial = { type : 'html-keyboard-response' , stimulus : 'This trial is in a loop. Press R to repeat this trial, or C to continue.' } var loop_node = { timeline : [ trial ], loop_function : function ( data ){ if ( jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 'r' ) == data . values ()[ 0 ]. key_press ){ return true ; } else { return false ; } } }","title":"Looping timelines"},{"location":"overview/timeline/#conditional-timelines","text":"A timeline can be skipped based on the evaluation of a function using the conditional_function option. If the conditional function evaluates to true , the timeline will execute normally. If the conditional function evaluates to false , then the timeline will be skipped. The conditional function is evaluated whenever the timeline is about to run the first trial. var pre_if_trial = { type : 'html-keyboard-response' , stimulus : 'The next trial is in a conditional statement. Press S to skip it, or V to view it.' } var if_trial = { type : 'html-keyboard-response' , stimulus : 'You chose to view the trial. Press any key to continue.' } var if_node = { timeline : [ if_trial ], conditional_function : function (){ // get the data from the previous trial, // and check which key was pressed var data = jsPsych . data . get (). last ( 1 ). values ()[ 0 ]; if ( data . key_press == jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( 's' )){ return false ; } else { return true ; } } } var after_if_trial = { type : 'html-keyboard-response' , stimulus : 'This is the trial after the conditional.' } jsPsych . init ({ timeline : [ pre_if_trial , if_node , after_if_trial ], on_finish : function (){ jsPsych . data . displayData (); } });","title":"Conditional timelines"},{"location":"overview/trial/","text":"Advanced Options for Trials \u00b6 The parameters available for a trial depend primarily on what plugin is used for the trial. However, there are several options that do not depend on the particular plugin; they are available for all trials. The data parameter \u00b6 The data parameter enables tagging the trial with additional properties. This can be useful for storing properties of the trial that are not directly apparent from the values that the plugin records. The data parameter value should be an object that contains key-value pairs. A simple example is the Flanker Task . In this experiment, participants respond to the direction of an arrow, pressing a key to the left for a left-pointing arrow (<) and a key to the right for a right-pointing arrow (>). The arrow appears in the center of flankers , or arrows that the participant should ignore. Those flankers can be congruent (>>>>>) or incongruent (<<><<). A trial for the Flanker Task written with jsPsych might look like this: var trial = { type : 'html-keyboard-response' , stimulus : '<<<<<' , choices : [ 'f' , 'j' ], data : { stimulus_type : 'congruent' , target_direction : 'left' } } Note the use of the data parameter to add a property stimulus_type with the value congruent and a property target_direction with the value left . Having these properties recorded directly in the data simplifies data analysis, making it easy to aggregate data by stimulus_type and/or target_direction . Inter-trial interval \u00b6 The default inter-trial interval (ITI) in jsPsych is 0 ms. This can be adjusted at the experiment-wide level by changing the default_iti parameter in jsPsych.init() . The ITI can also be controlled at the trial level through the post_trial_gap parameter. Setting this parameter to a positive integer x will cause a blank screen to display after the trial for x milliseconds. var trial = { type : 'html-keyboard-response' , stimulus : 'There will be a 1.5 second blank screen after this trial.' , post_trial_gap : 1500 } The on_start event \u00b6 Immediately before a trial runs, there is an opportunity to run an arbitrary function through the on_start event handler. This event handler is passed a single argument containing an editable copy of the trial parameters. This event handler can therefore be used to alter the trial based on the state of the experiment, among other uses. var trial = { type : 'html-keyboard-response' , stimulus : '<<<<<' , choices : [ 'f' , 'j' ], data : { stimulus_type : 'congruent' , target_direction : 'left' }, on_start : function ( trial ){ trial . stimulus = '<<><<' ; trial . data . stimulus_type = 'incongruent' ; } } The on_finish event \u00b6 After a trial is completed, there is an opportunity to run an arbitrary function through the on_finish event handler. This event handler is passed a single argument containing an editable copy of the data recorded for that trial. This event handler can therefore be used to update the state of the experiment based on the data collected or modify the data collected. This can be useful to calculate new data properties that were unknowable at the start of the trial. For example, with the Flanker Task example above, the on_finish event could add a new property correct . var trial = { type : 'html-keyboard-response' , stimulus : '<<<<<' , choices : [ 'f' , 'j' ], data : { stimulus_type : 'congruent' , target_direction : 'left' }, on_finish : function ( data ){ if ( data . key_press == 70 ){ // 70 is the numeric code for f data . correct = true ; // can add property correct by modify data object directly } else { data . correct = false ; } } } The on_load event \u00b6 The on_load callback can be added to any trial. The callback will trigger once the trial has completed loading. For most plugins, this will occur once the display has been initially updated but before any user interactions or timed events (e.g., animations) have occurred. Sample use \u00b6 var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.png' , on_load : function () { console . log ( 'The trial just finished loading.' ); } }; Dynamic parameters \u00b6 Most plugins allow parameters to be functions. In a typical declaration of a jsPsych trial, parameters have to be known at the start of the experiment. This makes it impossible to alter the content of the trial based on the outcome of previous trials. When functions are used as parameters for a block of trials, the function is evaluated at the start of each trial, and the return value of the function is used as the parameter. This enables dynamic updating of the parameter based on data that a subject has generated. Here is a sketch of how this functionality could be used to display feedback to a subject in the Flanker Task. var timeline = []; var trial = { type : 'html-keyboard-response' , stimulus : '<<<<<' , choices : [ 'f' , 'j' ], data : { stimulus_type : 'congruent' , target_direction : 'left' }, on_finish : function ( data ){ if ( data . key_press == 70 ){ // 70 is the numeric code for f data . correct = true ; // can add property correct by modify data object directly } else { data . correct = false ; } } } var feedback = { type : 'html-keyboard-response' , stimulus : function (){ var last_trial_correct = jsPsych . data . get (). last ( 1 ). values ()[ 0 ]. correct ; if ( last_trial_correct ){ return \"<p>Correct!</p>\" ; } else { return \"<p>Wrong.</p>\" } } } timeline . push ( trial , feedback );","title":"Advanced Options for Trials"},{"location":"overview/trial/#advanced-options-for-trials","text":"The parameters available for a trial depend primarily on what plugin is used for the trial. However, there are several options that do not depend on the particular plugin; they are available for all trials.","title":"Advanced Options for Trials"},{"location":"overview/trial/#the-data-parameter","text":"The data parameter enables tagging the trial with additional properties. This can be useful for storing properties of the trial that are not directly apparent from the values that the plugin records. The data parameter value should be an object that contains key-value pairs. A simple example is the Flanker Task . In this experiment, participants respond to the direction of an arrow, pressing a key to the left for a left-pointing arrow (<) and a key to the right for a right-pointing arrow (>). The arrow appears in the center of flankers , or arrows that the participant should ignore. Those flankers can be congruent (>>>>>) or incongruent (<<><<). A trial for the Flanker Task written with jsPsych might look like this: var trial = { type : 'html-keyboard-response' , stimulus : '<<<<<' , choices : [ 'f' , 'j' ], data : { stimulus_type : 'congruent' , target_direction : 'left' } } Note the use of the data parameter to add a property stimulus_type with the value congruent and a property target_direction with the value left . Having these properties recorded directly in the data simplifies data analysis, making it easy to aggregate data by stimulus_type and/or target_direction .","title":"The data parameter"},{"location":"overview/trial/#inter-trial-interval","text":"The default inter-trial interval (ITI) in jsPsych is 0 ms. This can be adjusted at the experiment-wide level by changing the default_iti parameter in jsPsych.init() . The ITI can also be controlled at the trial level through the post_trial_gap parameter. Setting this parameter to a positive integer x will cause a blank screen to display after the trial for x milliseconds. var trial = { type : 'html-keyboard-response' , stimulus : 'There will be a 1.5 second blank screen after this trial.' , post_trial_gap : 1500 }","title":"Inter-trial interval"},{"location":"overview/trial/#the-on_start-event","text":"Immediately before a trial runs, there is an opportunity to run an arbitrary function through the on_start event handler. This event handler is passed a single argument containing an editable copy of the trial parameters. This event handler can therefore be used to alter the trial based on the state of the experiment, among other uses. var trial = { type : 'html-keyboard-response' , stimulus : '<<<<<' , choices : [ 'f' , 'j' ], data : { stimulus_type : 'congruent' , target_direction : 'left' }, on_start : function ( trial ){ trial . stimulus = '<<><<' ; trial . data . stimulus_type = 'incongruent' ; } }","title":"The on_start event"},{"location":"overview/trial/#the-on_finish-event","text":"After a trial is completed, there is an opportunity to run an arbitrary function through the on_finish event handler. This event handler is passed a single argument containing an editable copy of the data recorded for that trial. This event handler can therefore be used to update the state of the experiment based on the data collected or modify the data collected. This can be useful to calculate new data properties that were unknowable at the start of the trial. For example, with the Flanker Task example above, the on_finish event could add a new property correct . var trial = { type : 'html-keyboard-response' , stimulus : '<<<<<' , choices : [ 'f' , 'j' ], data : { stimulus_type : 'congruent' , target_direction : 'left' }, on_finish : function ( data ){ if ( data . key_press == 70 ){ // 70 is the numeric code for f data . correct = true ; // can add property correct by modify data object directly } else { data . correct = false ; } } }","title":"The on_finish event"},{"location":"overview/trial/#the-on_load-event","text":"The on_load callback can be added to any trial. The callback will trigger once the trial has completed loading. For most plugins, this will occur once the display has been initially updated but before any user interactions or timed events (e.g., animations) have occurred.","title":"The on_load event"},{"location":"overview/trial/#sample-use","text":"var trial = { type : 'image-keyboard-response' , stimulus : 'imgA.png' , on_load : function () { console . log ( 'The trial just finished loading.' ); } };","title":"Sample use"},{"location":"overview/trial/#dynamic-parameters","text":"Most plugins allow parameters to be functions. In a typical declaration of a jsPsych trial, parameters have to be known at the start of the experiment. This makes it impossible to alter the content of the trial based on the outcome of previous trials. When functions are used as parameters for a block of trials, the function is evaluated at the start of each trial, and the return value of the function is used as the parameter. This enables dynamic updating of the parameter based on data that a subject has generated. Here is a sketch of how this functionality could be used to display feedback to a subject in the Flanker Task. var timeline = []; var trial = { type : 'html-keyboard-response' , stimulus : '<<<<<' , choices : [ 'f' , 'j' ], data : { stimulus_type : 'congruent' , target_direction : 'left' }, on_finish : function ( data ){ if ( data . key_press == 70 ){ // 70 is the numeric code for f data . correct = true ; // can add property correct by modify data object directly } else { data . correct = false ; } } } var feedback = { type : 'html-keyboard-response' , stimulus : function (){ var last_trial_correct = jsPsych . data . get (). last ( 1 ). values ()[ 0 ]. correct ; if ( last_trial_correct ){ return \"<p>Correct!</p>\" ; } else { return \"<p>Wrong.</p>\" } } } timeline . push ( trial , feedback );","title":"Dynamic parameters"},{"location":"plugins/creating-a-plugin/","text":"Creating a new plugin \u00b6 Creating new plugins is the way to add new kinds of tasks to jsPsych. A task can be virtually any kind of activity. If it can be implemented in JavaScript, then it almost certainly can be turned into a plugin. What's in a plugin file? \u00b6 Plugin files follow a specific template. Adherence to the template is what allows jsPsych to run a plugin without knowing anything about what the plugin is doing. What makes plugins so flexible is that the template imposes very few requirements on the code. Here's what an empty plugin template looks like: jsPsych.plugins['plugin-name'] = (function(){ var plugin = {}; plugin.info = { name: 'plugin-name', parameters: { } } plugin.trial = function(display_element, trial){ jsPsych.finishTrial(); } return plugin; })(); This plugin will work! It defines a plugin called 'plugin-name', and it does absolutely nothing. However, it won't break the experiment, and jsPsych will understand that this is a valid plugin. Let's examine it in more detail. The overall structure of the plugin is defined using a module JavaScript design pattern. This pattern uses a technique called an anonymous closure. This is why the first line has (function(){ and the last line is })(); . The details aren't important, but if you want to learn more about it, this is a nice overview . The reason this pattern is useful is because it allows for persistent state and private scope. In other words, the plugin is isolated and can't be altered by other plugins. The module, created by the (function(){ })(); expressions, contains an object called plugin that has two properties, info and trial . The plugin object is returned at the end of the module, which is what assigns the defined properties of plugin to jsPsych['plugin-name'] . plugin.trial \u00b6 The trial method is responsible for running a single trial. There are two parameters that are passed into the trial method. The first, display_element , is the DOM element where jsPsych content is being rendered. This parameter will be an HTMLElement . Generally, you don't need to worry about this parameter being in the correct format, and can assume that it is an HMTLElement and use methods of that class. The second, trial , is an object containing all of the parameters specified in the corresponding TimelineNode. The only requirement for the trial method is that it calls jsPsych.finishTrial() when it is done. This is how jsPsych knows to advance to the next trial in the experiment (or end the experiment if it is the last trial). The plugin can do whatever it needs to do before that point. Of course, there are other things that you will probably want the plugin to do besides just end. Here are some examples: Change the content of the display \u00b6 There are a few ways to change the content of the display. The display_element parameter of the trial method contains the DOM element for displaying content, so you can use various JavaScript methods for interaction with the display element. A common one is to change the innerHTML . var html_content = '<p>This is the first paragraph</p>' ; html_content += '<p>This is the second paragraph</p>' ; display_element . innerHTML = html_content ; It is often appropriate to use innerHTML to clear the display at the end of a trial: // clear the display display_element . innerHTML = '' ; Write data \u00b6 Plugins exist to collect data, so saving data is obviously a crucial thing to do. You can pass an object of data as the parameter to jsPsych.finishTrial() : var data = { correct : true , rt : 350 } jsPsych . finishTrial ( data ) The data recorded will be that correct is true and that rt is 350 . Additional data for the trial will also be collected automatically by the jsPsych library. The plugin template \u00b6 An empty plugin template is included in the plugins/template folder.","title":"Creating a New Plugin"},{"location":"plugins/creating-a-plugin/#creating-a-new-plugin","text":"Creating new plugins is the way to add new kinds of tasks to jsPsych. A task can be virtually any kind of activity. If it can be implemented in JavaScript, then it almost certainly can be turned into a plugin.","title":"Creating a new plugin"},{"location":"plugins/creating-a-plugin/#whats-in-a-plugin-file","text":"Plugin files follow a specific template. Adherence to the template is what allows jsPsych to run a plugin without knowing anything about what the plugin is doing. What makes plugins so flexible is that the template imposes very few requirements on the code. Here's what an empty plugin template looks like: jsPsych.plugins['plugin-name'] = (function(){ var plugin = {}; plugin.info = { name: 'plugin-name', parameters: { } } plugin.trial = function(display_element, trial){ jsPsych.finishTrial(); } return plugin; })(); This plugin will work! It defines a plugin called 'plugin-name', and it does absolutely nothing. However, it won't break the experiment, and jsPsych will understand that this is a valid plugin. Let's examine it in more detail. The overall structure of the plugin is defined using a module JavaScript design pattern. This pattern uses a technique called an anonymous closure. This is why the first line has (function(){ and the last line is })(); . The details aren't important, but if you want to learn more about it, this is a nice overview . The reason this pattern is useful is because it allows for persistent state and private scope. In other words, the plugin is isolated and can't be altered by other plugins. The module, created by the (function(){ })(); expressions, contains an object called plugin that has two properties, info and trial . The plugin object is returned at the end of the module, which is what assigns the defined properties of plugin to jsPsych['plugin-name'] .","title":"What's in a plugin file?"},{"location":"plugins/creating-a-plugin/#plugintrial","text":"The trial method is responsible for running a single trial. There are two parameters that are passed into the trial method. The first, display_element , is the DOM element where jsPsych content is being rendered. This parameter will be an HTMLElement . Generally, you don't need to worry about this parameter being in the correct format, and can assume that it is an HMTLElement and use methods of that class. The second, trial , is an object containing all of the parameters specified in the corresponding TimelineNode. The only requirement for the trial method is that it calls jsPsych.finishTrial() when it is done. This is how jsPsych knows to advance to the next trial in the experiment (or end the experiment if it is the last trial). The plugin can do whatever it needs to do before that point. Of course, there are other things that you will probably want the plugin to do besides just end. Here are some examples:","title":"plugin.trial"},{"location":"plugins/creating-a-plugin/#change-the-content-of-the-display","text":"There are a few ways to change the content of the display. The display_element parameter of the trial method contains the DOM element for displaying content, so you can use various JavaScript methods for interaction with the display element. A common one is to change the innerHTML . var html_content = '<p>This is the first paragraph</p>' ; html_content += '<p>This is the second paragraph</p>' ; display_element . innerHTML = html_content ; It is often appropriate to use innerHTML to clear the display at the end of a trial: // clear the display display_element . innerHTML = '' ;","title":"Change the content of the display"},{"location":"plugins/creating-a-plugin/#write-data","text":"Plugins exist to collect data, so saving data is obviously a crucial thing to do. You can pass an object of data as the parameter to jsPsych.finishTrial() : var data = { correct : true , rt : 350 } jsPsych . finishTrial ( data ) The data recorded will be that correct is true and that rt is 350 . Additional data for the trial will also be collected automatically by the jsPsych library.","title":"Write data"},{"location":"plugins/creating-a-plugin/#the-plugin-template","text":"An empty plugin template is included in the plugins/template folder.","title":"The plugin template"},{"location":"plugins/jspsych-animation/","text":"jspsych-animation \u00b6 This plugin displays a sequence of images at a fixed frame rate. The sequence can be looped a specified number of times. The subject is free to respond at any point during the animation, and the time of the response is recorded. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined Each element of the array is a path to an image file. frame_time numeric 250 How long to display each image (in milliseconds). frame_isi numeric 0 If greater than 0, then a gap will be shown between each image in the sequence. This parameter specifies the length of the gap. sequence_reps numeric 1 How many times to show the entire sequence. There will be no gap (other than the gap specified by frame_isi ) between repetitions. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key(s) to press). render_on_canvas boolean true If true, the images will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive images in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value animation_sequence JSON An array, encoded in JSON format. Each element of the array is an object that represents a stimulus in the animation sequence. Each object has a stimulus property, which is the image that was displayed, and a time property, which is the time in ms, measured from when the sequence began, that the stimulus was displayed. responses JSON An array, encoded in JSON format. Each element of the array is an object representing a response given by the subject. Each object has a stimulus property, indicating which image was displayed when the key was pressed, an rt property, indicating the time of the key press relative to the start of the animation, and a key_press property, indicating which key was pressed. Examples \u00b6 Displaying a single sequence multiple times \u00b6 var animation_sequence = [ \"img/face_1.jpg\" , \"img/face_2.jpg\" , \"img/face_3.jpg\" , \"img/face_4.jpg\" , \"img/face_3.jpg\" , \"img/face_2.jpg\" ]; var animation_trial = { type : 'animation' , stimuli : animation_sequence , sequence_reps : 3 };","title":"jspsych-animation"},{"location":"plugins/jspsych-animation/#jspsych-animation","text":"This plugin displays a sequence of images at a fixed frame rate. The sequence can be looped a specified number of times. The subject is free to respond at any point during the animation, and the time of the response is recorded.","title":"jspsych-animation"},{"location":"plugins/jspsych-animation/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined Each element of the array is a path to an image file. frame_time numeric 250 How long to display each image (in milliseconds). frame_isi numeric 0 If greater than 0, then a gap will be shown between each image in the sequence. This parameter specifies the length of the gap. sequence_reps numeric 1 How many times to show the entire sequence. There will be no gap (other than the gap specified by frame_isi ) between repetitions. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key(s) to press). render_on_canvas boolean true If true, the images will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive images in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych.","title":"Parameters"},{"location":"plugins/jspsych-animation/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value animation_sequence JSON An array, encoded in JSON format. Each element of the array is an object that represents a stimulus in the animation sequence. Each object has a stimulus property, which is the image that was displayed, and a time property, which is the time in ms, measured from when the sequence began, that the stimulus was displayed. responses JSON An array, encoded in JSON format. Each element of the array is an object representing a response given by the subject. Each object has a stimulus property, indicating which image was displayed when the key was pressed, an rt property, indicating the time of the key press relative to the start of the animation, and a key_press property, indicating which key was pressed.","title":"Data Generated"},{"location":"plugins/jspsych-animation/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-animation/#displaying-a-single-sequence-multiple-times","text":"var animation_sequence = [ \"img/face_1.jpg\" , \"img/face_2.jpg\" , \"img/face_3.jpg\" , \"img/face_4.jpg\" , \"img/face_3.jpg\" , \"img/face_2.jpg\" ]; var animation_trial = { type : 'animation' , stimuli : animation_sequence , sequence_reps : 3 };","title":"Displaying a single sequence multiple times"},{"location":"plugins/jspsych-audio-button-response/","text":"jspsych-audio-button-response \u00b6 This plugin plays audio files and records responses generated with a button click. If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych. However, if you are using timeline variables or another dynamic method to specify the audio stimulus you will need to manually preload the audio. The trial can end when the subject responds, when the audio file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent a button response from being made before the audio has finished playing. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus audio file undefined Path to audio file to be played. choices array of strings undefined Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete. trial_ends_after_audio boolean false If true, then the trial will end as soon as the audio file finishes playing. response_allowed_while_playing boolean true If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before the button choices are enabled and a response is accepted. Once the audio has played all the way through, the buttons are enabled and a response is allowed (including while the audio is being re-played via on-screen playback controls). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. Examples \u00b6 Displaying question until subject gives a response \u00b6 var trial = { type : 'audio-button-response' , stimulus : 'sound/tone.mp3' , choices : [ 'Low' , 'High' ], prompt : \"<p>Is the pitch high or low?</p>\" }; Using custom button HTML to use images as buttons \u00b6 var trial = { type : 'audio-button-response' , stimulus : 'sound/roar.mp3' , choices : [ 'lion.png' , 'elephant.png' , 'monkey.png' ], prompt : \"<p>Which animal made the sound?</p>\" , button_html : '<img src=\"%choice%\" />' };","title":"jspsych-audio-button-response"},{"location":"plugins/jspsych-audio-button-response/#jspsych-audio-button-response","text":"This plugin plays audio files and records responses generated with a button click. If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych. However, if you are using timeline variables or another dynamic method to specify the audio stimulus you will need to manually preload the audio. The trial can end when the subject responds, when the audio file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent a button response from being made before the audio has finished playing.","title":"jspsych-audio-button-response"},{"location":"plugins/jspsych-audio-button-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus audio file undefined Path to audio file to be played. choices array of strings undefined Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete. trial_ends_after_audio boolean false If true, then the trial will end as soon as the audio file finishes playing. response_allowed_while_playing boolean true If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before the button choices are enabled and a response is accepted. Once the audio has played all the way through, the buttons are enabled and a response is allowed (including while the audio is being re-played via on-screen playback controls).","title":"Parameters"},{"location":"plugins/jspsych-audio-button-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on.","title":"Data Generated"},{"location":"plugins/jspsych-audio-button-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-audio-button-response/#displaying-question-until-subject-gives-a-response","text":"var trial = { type : 'audio-button-response' , stimulus : 'sound/tone.mp3' , choices : [ 'Low' , 'High' ], prompt : \"<p>Is the pitch high or low?</p>\" };","title":"Displaying question until subject gives a response"},{"location":"plugins/jspsych-audio-button-response/#using-custom-button-html-to-use-images-as-buttons","text":"var trial = { type : 'audio-button-response' , stimulus : 'sound/roar.mp3' , choices : [ 'lion.png' , 'elephant.png' , 'monkey.png' ], prompt : \"<p>Which animal made the sound?</p>\" , button_html : '<img src=\"%choice%\" />' };","title":"Using custom button HTML to use images as buttons"},{"location":"plugins/jspsych-audio-keyboard-response/","text":"jspsych-audio-keyboard-response \u00b6 This plugin plays audio files and records responses generated with the keyboard. If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych. However, if you are using timeline variables or another dynamic method to specify the audio stimulus you will need to manually preload the audio. The trial can end when the subject responds, when the audio file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent a keyboard response from being recorded before the audio has finished playing. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus audio file undefined Path to audio file to be played. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use set this parameter to false to force the subject to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete. trial_ends_after_audio boolean false If true, then the trial will end as soon as the audio file finishes playing. response_allowed_while_playing boolean true If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a keyboard response is accepted. Once the audio has played all the way through, a valid keyboard response is allowed (including while the audio is being re-played via on-screen playback controls). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string Path to the audio file that played during the trial. Examples \u00b6 Displaying trial until subject gives a response \u00b6 var trial = { type : 'audio-keyboard-response' , stimulus : 'sound/tone.mp3' , choices : [ 'e' , 'i' ], prompt : \"<p>Is the pitch high or low? Press 'e' for low and 'i' for high.</p>\" , response_ends_trial : false }; Play a sound with no user response; trial ends after sound plays \u00b6 var trial = { type : 'audio-keyboard-response' , stimulus : 'sound/tone.mp3' , choices : jsPsych . NO_KEYS , trial_ends_after_audio : true };","title":"jspsych-audio-keyboard-response"},{"location":"plugins/jspsych-audio-keyboard-response/#jspsych-audio-keyboard-response","text":"This plugin plays audio files and records responses generated with the keyboard. If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych. However, if you are using timeline variables or another dynamic method to specify the audio stimulus you will need to manually preload the audio. The trial can end when the subject responds, when the audio file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent a keyboard response from being recorded before the audio has finished playing.","title":"jspsych-audio-keyboard-response"},{"location":"plugins/jspsych-audio-keyboard-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus audio file undefined Path to audio file to be played. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use set this parameter to false to force the subject to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete. trial_ends_after_audio boolean false If true, then the trial will end as soon as the audio file finishes playing. response_allowed_while_playing boolean true If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a keyboard response is accepted. Once the audio has played all the way through, a valid keyboard response is allowed (including while the audio is being re-played via on-screen playback controls).","title":"Parameters"},{"location":"plugins/jspsych-audio-keyboard-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string Path to the audio file that played during the trial.","title":"Data Generated"},{"location":"plugins/jspsych-audio-keyboard-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-audio-keyboard-response/#displaying-trial-until-subject-gives-a-response","text":"var trial = { type : 'audio-keyboard-response' , stimulus : 'sound/tone.mp3' , choices : [ 'e' , 'i' ], prompt : \"<p>Is the pitch high or low? Press 'e' for low and 'i' for high.</p>\" , response_ends_trial : false };","title":"Displaying trial until subject gives a response"},{"location":"plugins/jspsych-audio-keyboard-response/#play-a-sound-with-no-user-response-trial-ends-after-sound-plays","text":"var trial = { type : 'audio-keyboard-response' , stimulus : 'sound/tone.mp3' , choices : jsPsych . NO_KEYS , trial_ends_after_audio : true };","title":"Play a sound with no user response; trial ends after sound plays"},{"location":"plugins/jspsych-audio-slider-response/","text":"jspsych-audio-slider-response \u00b6 This plugin plays an audio file and allows the subject to respond by dragging a slider. If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych. However, if you are using timeline variables or another dynamic method to specify the audio stimulus you will need to manually preload the audio. The trial can end when the subject responds, or if the subject has failed to respond within a fixed length of time. You can also prevent the slider response from being made before the audio has finished playing. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus audio file undefined Audio file to be played labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. button_label string 'Continue' Label of the button to end the trial. min integer 0 Sets the minimum value of the slider max integer 100 Sets the maximum value of the slider slider_start integer 50 Sets the starting value of the slider step integer 1 Sets the step of the slider. This is the smallest amount by which the slider can change. slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must move the slider before clicking the continue button. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete. response_allowed_while_playing boolean true If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before the slider is enabled and the trial can end via the next button click. Once the audio has played all the way through, the slider is enabled and a response is allowed (including while the audio is being re-played via on-screen playback controls). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The path of the audio file that was played. slider_start numeric The starting value of the slider. Examples \u00b6 A simple rating scale \u00b6 var trial_1 = { type : 'audio-slider-response' , stimulus : 'sound/speech_joke.mp3' , labels : [ 'Not Funny' , 'Funny' ], prompt : '<p>How funny is the joke?</p>' }","title":"jspsych-audio-slider-response"},{"location":"plugins/jspsych-audio-slider-response/#jspsych-audio-slider-response","text":"This plugin plays an audio file and allows the subject to respond by dragging a slider. If the browser supports it, audio files are played using the WebAudio API. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times. If the browser does not support the WebAudio API, then the audio file is played with HTML5 audio. Audio files are automatically preloaded by jsPsych. However, if you are using timeline variables or another dynamic method to specify the audio stimulus you will need to manually preload the audio. The trial can end when the subject responds, or if the subject has failed to respond within a fixed length of time. You can also prevent the slider response from being made before the audio has finished playing.","title":"jspsych-audio-slider-response"},{"location":"plugins/jspsych-audio-slider-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus audio file undefined Audio file to be played labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. button_label string 'Continue' Label of the button to end the trial. min integer 0 Sets the minimum value of the slider max integer 100 Sets the maximum value of the slider slider_start integer 50 Sets the starting value of the slider step integer 1 Sets the step of the slider. This is the smallest amount by which the slider can change. slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must move the slider before clicking the continue button. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to listen to the stimulus for a fixed amount of time, even if they respond before the time is complete. response_allowed_while_playing boolean true If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before the slider is enabled and the trial can end via the next button click. Once the audio has played all the way through, the slider is enabled and a response is allowed (including while the audio is being re-played via on-screen playback controls).","title":"Parameters"},{"location":"plugins/jspsych-audio-slider-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The path of the audio file that was played. slider_start numeric The starting value of the slider.","title":"Data Generated"},{"location":"plugins/jspsych-audio-slider-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-audio-slider-response/#a-simple-rating-scale","text":"var trial_1 = { type : 'audio-slider-response' , stimulus : 'sound/speech_joke.mp3' , labels : [ 'Not Funny' , 'Funny' ], prompt : '<p>How funny is the joke?</p>' }","title":"A simple rating scale"},{"location":"plugins/jspsych-call-function/","text":"jspsych-call-function \u00b6 This plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment. The function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below). Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description func function undefined The function to call. async boolean false Set to true if func is an asynchoronous function. If this is true, then the first argument passed to func will be a callback that you should call when the async operation is complete. You can pass data to the callback. See example below. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value value any The return value of the called function. Examples \u00b6 Calling a simple function \u00b6 var myfunc = function () { return 'you called?' ; } var trial = { type : 'call-function' , func : myfunc } Using an anonymous function to pass variables \u00b6 var myfunc = function ( data ){ // data contains all the experiment data so far, // so this function could implement code to write // the data to a database. } var trial = { type : 'call-function' , func : function (){ myfunc ( jsPsych . data . get ())} } Async function call \u00b6 var trial = { type : 'call-function' , async : true , func : function ( done ){ // can perform async operations here like // creating an XMLHttpRequest to communicate // with a server var xhttp = new XMLHttpRequest (); xhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { var response_data = xhttp . responseText ; // line below is what causes jsPsych to // continue to next trial. response_data // will be stored in jsPsych data object. done ( response_data ); } }; xhttp . open ( \"GET\" , \"path_to_server_script.php\" , true ); xhttp . send (); } }","title":"jspsych-call-function"},{"location":"plugins/jspsych-call-function/#jspsych-call-function","text":"This plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment. The function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below).","title":"jspsych-call-function"},{"location":"plugins/jspsych-call-function/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description func function undefined The function to call. async boolean false Set to true if func is an asynchoronous function. If this is true, then the first argument passed to func will be a callback that you should call when the async operation is complete. You can pass data to the callback. See example below.","title":"Parameters"},{"location":"plugins/jspsych-call-function/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value value any The return value of the called function.","title":"Data Generated"},{"location":"plugins/jspsych-call-function/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-call-function/#calling-a-simple-function","text":"var myfunc = function () { return 'you called?' ; } var trial = { type : 'call-function' , func : myfunc }","title":"Calling a simple function"},{"location":"plugins/jspsych-call-function/#using-an-anonymous-function-to-pass-variables","text":"var myfunc = function ( data ){ // data contains all the experiment data so far, // so this function could implement code to write // the data to a database. } var trial = { type : 'call-function' , func : function (){ myfunc ( jsPsych . data . get ())} }","title":"Using an anonymous function to pass variables"},{"location":"plugins/jspsych-call-function/#async-function-call","text":"var trial = { type : 'call-function' , async : true , func : function ( done ){ // can perform async operations here like // creating an XMLHttpRequest to communicate // with a server var xhttp = new XMLHttpRequest (); xhttp . onreadystatechange = function () { if ( this . readyState == 4 && this . status == 200 ) { var response_data = xhttp . responseText ; // line below is what causes jsPsych to // continue to next trial. response_data // will be stored in jsPsych data object. done ( response_data ); } }; xhttp . open ( \"GET\" , \"path_to_server_script.php\" , true ); xhttp . send (); } }","title":"Async function call"},{"location":"plugins/jspsych-canvas-button-response/","text":"jspsych-canvas-button-response \u00b6 This plugin can be used to draw a stimulus on a HTML canvas element , and record a button click response and response time. The canvas stimulus can be useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. One or more button choices will be displayed under the canvas, and the button style can be customized using HTML formatting. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus function undefined The function to draw on the canvas. This function automatically takes a canvas element as its only argument, e.g. function(c) {...} or function drawStim(c) {...} , where c refers to the canvas element. Note that the stimulus function will still generally need to set the correct context itself, using a line like let ctx = c.getContext(\"2d\") . canvas_size array [500, 500] Array that defines the size of the canvas element in pixels. First value is height, second value is width. choices array of strings [] Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., what question to answer). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. Note: the canvas stimulus is not included in the trial data because it is a function. Any stimulus information that should be saved in the trial data can be added via the data parameter. Examples \u00b6 Drawing circles based on parameters \u00b6 function filledCirc ( canvas , radius , color ){ var ctx = canvas . getContext ( \"2d\" ); ctx . beginPath (); ctx . arc ( 250 , 250 , radius , 0 , 2 * Math . PI ); ctx . fillStyle = color ; ctx . fill () } var circle_1 = { type : 'canvas-button-response' , stimulus : function ( c ) { filledCirc ( c , 100 , 'blue' ); }, choices : [ 'Red' , 'Green' , 'Blue' ], prompt : '<p>What color is the circle?</p>' data : { color : 'blue' , radius : 100 } }; var circle_2 = { type : 'canvas-button-response' , stimulus : function ( c ) { filledCirc ( c , 150 , 'green' ); }, choices : [ 'Larger' , 'Smaller' ], prompt : '<p>Is this circle larger or smaller than the last one?</p>' , data : { color : 'green' , radius : 150 } };","title":"jspsych-canvas-button-response"},{"location":"plugins/jspsych-canvas-button-response/#jspsych-canvas-button-response","text":"This plugin can be used to draw a stimulus on a HTML canvas element , and record a button click response and response time. The canvas stimulus can be useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. One or more button choices will be displayed under the canvas, and the button style can be customized using HTML formatting.","title":"jspsych-canvas-button-response"},{"location":"plugins/jspsych-canvas-button-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus function undefined The function to draw on the canvas. This function automatically takes a canvas element as its only argument, e.g. function(c) {...} or function drawStim(c) {...} , where c refers to the canvas element. Note that the stimulus function will still generally need to set the correct context itself, using a line like let ctx = c.getContext(\"2d\") . canvas_size array [500, 500] Array that defines the size of the canvas element in pixels. First value is height, second value is width. choices array of strings [] Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., what question to answer). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.","title":"Parameters"},{"location":"plugins/jspsych-canvas-button-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. Note: the canvas stimulus is not included in the trial data because it is a function. Any stimulus information that should be saved in the trial data can be added via the data parameter.","title":"Data Generated"},{"location":"plugins/jspsych-canvas-button-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-canvas-button-response/#drawing-circles-based-on-parameters","text":"function filledCirc ( canvas , radius , color ){ var ctx = canvas . getContext ( \"2d\" ); ctx . beginPath (); ctx . arc ( 250 , 250 , radius , 0 , 2 * Math . PI ); ctx . fillStyle = color ; ctx . fill () } var circle_1 = { type : 'canvas-button-response' , stimulus : function ( c ) { filledCirc ( c , 100 , 'blue' ); }, choices : [ 'Red' , 'Green' , 'Blue' ], prompt : '<p>What color is the circle?</p>' data : { color : 'blue' , radius : 100 } }; var circle_2 = { type : 'canvas-button-response' , stimulus : function ( c ) { filledCirc ( c , 150 , 'green' ); }, choices : [ 'Larger' , 'Smaller' ], prompt : '<p>Is this circle larger or smaller than the last one?</p>' , data : { color : 'green' , radius : 150 } };","title":"Drawing circles based on parameters"},{"location":"plugins/jspsych-canvas-keyboard-response/","text":"jspsych-canvas-keyboard-response \u00b6 This plugin can be used to draw a stimulus on a HTML canvas element and record a keyboard response. The canvas stimulus can be useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus function undefined The function to draw on the canvas. This function automatically takes a canvas element as its only argument, e.g. function(c) {...} or function drawStim(c) {...} , where c refers to the canvas element. Note that the stimulus function will still generally need to set the correct context itself, using a line like let ctx = c.getContext(\"2d\") . canvas_size array [500, 500] Array that defines the size of the canvas element in pixels. First value is height, second value is width. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. Note: the canvas stimulus is not included in the trial data because it is a function. Any stimulus information that should be saved in the trial data can be added via the data parameter. Examples \u00b6 Draw rectangle and wait for response \u00b6 function drawRect ( c ){ var ctx = c . getContext ( '2d' ); ctx . beginPath (); ctx . rect ( 30 , 30 , 200 , 50 ); ctx . stroke (); } var trial = { type : 'canvas-keyboard-response' , stimulus : drawRect , choices : [ 'e' , 'i' ], prompt : '<p>Is this a circle or a rectangle? Press \"e\" for circle and \"i\" for rectangle.</p>' , data : { shape : 'rectangle' } } Draw circle, no response allowed \u00b6 function drawCirc ( c ){ var ctx = c . getContext ( '2d' ); ctx . beginPath (); ctx . arc ( 100 , 75 , 50 , 0 , 2 * Math . PI ); ctx . stroke (); } var trial = { type : 'canvas-keyboard-response' , stimulus : drawCirc , choices : jsPsych . NO_KEYS , trial_duration : 1000 , data : { shape : 'circle' , radius : 50 } }","title":"jspsych-canvas-keyboard-response"},{"location":"plugins/jspsych-canvas-keyboard-response/#jspsych-canvas-keyboard-response","text":"This plugin can be used to draw a stimulus on a HTML canvas element and record a keyboard response. The canvas stimulus can be useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.","title":"jspsych-canvas-keyboard-response"},{"location":"plugins/jspsych-canvas-keyboard-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus function undefined The function to draw on the canvas. This function automatically takes a canvas element as its only argument, e.g. function(c) {...} or function drawStim(c) {...} , where c refers to the canvas element. Note that the stimulus function will still generally need to set the correct context itself, using a line like let ctx = c.getContext(\"2d\") . canvas_size array [500, 500] Array that defines the size of the canvas element in pixels. First value is height, second value is width. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.","title":"Parameters"},{"location":"plugins/jspsych-canvas-keyboard-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. Note: the canvas stimulus is not included in the trial data because it is a function. Any stimulus information that should be saved in the trial data can be added via the data parameter.","title":"Data Generated"},{"location":"plugins/jspsych-canvas-keyboard-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-canvas-keyboard-response/#draw-rectangle-and-wait-for-response","text":"function drawRect ( c ){ var ctx = c . getContext ( '2d' ); ctx . beginPath (); ctx . rect ( 30 , 30 , 200 , 50 ); ctx . stroke (); } var trial = { type : 'canvas-keyboard-response' , stimulus : drawRect , choices : [ 'e' , 'i' ], prompt : '<p>Is this a circle or a rectangle? Press \"e\" for circle and \"i\" for rectangle.</p>' , data : { shape : 'rectangle' } }","title":"Draw rectangle and wait for response"},{"location":"plugins/jspsych-canvas-keyboard-response/#draw-circle-no-response-allowed","text":"function drawCirc ( c ){ var ctx = c . getContext ( '2d' ); ctx . beginPath (); ctx . arc ( 100 , 75 , 50 , 0 , 2 * Math . PI ); ctx . stroke (); } var trial = { type : 'canvas-keyboard-response' , stimulus : drawCirc , choices : jsPsych . NO_KEYS , trial_duration : 1000 , data : { shape : 'circle' , radius : 50 } }","title":"Draw circle, no response allowed"},{"location":"plugins/jspsych-canvas-slider-response/","text":"jspsych-canvas-slider-response \u00b6 This plugin can be used to draw a stimulus on a HTML canvas element and collect a response within a range of values, which is made by dragging a slider. The canvas stimulus can be useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus function undefined The function to draw on the canvas. This function automatically takes a canvas element as its only argument, e.g. function(c) {...} or function drawStim(c) {...} , where c refers to the canvas element. Note that the stimulus function will still generally need to set the correct context itself, using a line like let ctx = c.getContext(\"2d\") . canvas_size array [500, 500] Array that defines the size of the canvas element in pixels. First value is height, second value is width. labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. button_label string 'Continue' Label of the button to end the trial. min integer 0 Sets the minimum value of the slider. max integer 100 Sets the maximum value of the slider. slider_start integer 50 Sets the starting value of the slider. step integer 1 Sets the step of the slider. This is the smallest amount by which the slider can change. slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must click the slider before clicking the continue button. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., what question to answer). stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. Note: the canvas stimulus is not included in the trial data because it is a function. Any stimulus information that should be saved in the trial data can be added via the data parameter. Examples \u00b6 Draw two squares \u00b6 var colors = [ # 'FF3333' , '#FF6A33' ]; function twoSquares ( c ) { var ctx = c . getContext ( '2d' ); ctx . fillStyle = colors [ 0 ]; ctx . fillRect ( 200 , 70 , 40 , 40 ); ctx . fillStyle = colors [ 1 ]; ctx . fillRect ( 260 , 70 , 40 , 40 ); } var trial = { type : 'canvas-slider-response' , stimulus : twoSquares , labels : [ '0' , '10' ], canvas_size : [ 200 , 500 ], prompt : '<p>How different would you say the colors of these two squares are on a scale from 0 (the same) to 10 (completely different)</p>' , data : { color1 : colors [ 0 ], color2 : colors [ 1 ]} } Draw two squares with additional parameters \u00b6 var colors ; function twoSquares ( c , colors ) { var ctx = c . getContext ( '2d' ); ctx . fillStyle = colors [ 0 ]; ctx . fillRect ( 200 , 70 , 40 , 40 ); ctx . fillStyle = colors [ 1 ]; ctx . fillRect ( 260 , 70 , 40 , 40 ); } var trial = { type : 'canvas-slider-response' , stimulus : function ( c ) { colors = [ 'darkred' , 'cyan' ]; twoSquares ( c , colors ); }, labels : [ 'Exactly<br>the same' , 'Totally<br>different' ], canvas_size : [ 200 , 500 ], prompt : '<p>How different would you say the colors of these two squares are?</p>' , on_finish : function ( data ) { data . color1 = colors [ 0 ]; data . color2 = colors [ 1 ]; } };","title":"jspsych-canvas-slider-response"},{"location":"plugins/jspsych-canvas-slider-response/#jspsych-canvas-slider-response","text":"This plugin can be used to draw a stimulus on a HTML canvas element and collect a response within a range of values, which is made by dragging a slider. The canvas stimulus can be useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.","title":"jspsych-canvas-slider-response"},{"location":"plugins/jspsych-canvas-slider-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus function undefined The function to draw on the canvas. This function automatically takes a canvas element as its only argument, e.g. function(c) {...} or function drawStim(c) {...} , where c refers to the canvas element. Note that the stimulus function will still generally need to set the correct context itself, using a line like let ctx = c.getContext(\"2d\") . canvas_size array [500, 500] Array that defines the size of the canvas element in pixels. First value is height, second value is width. labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. button_label string 'Continue' Label of the button to end the trial. min integer 0 Sets the minimum value of the slider. max integer 100 Sets the maximum value of the slider. slider_start integer 50 Sets the starting value of the slider. step integer 1 Sets the step of the slider. This is the smallest amount by which the slider can change. slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must click the slider before clicking the continue button. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., what question to answer). stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.","title":"Parameters"},{"location":"plugins/jspsych-canvas-slider-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. Note: the canvas stimulus is not included in the trial data because it is a function. Any stimulus information that should be saved in the trial data can be added via the data parameter.","title":"Data Generated"},{"location":"plugins/jspsych-canvas-slider-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-canvas-slider-response/#draw-two-squares","text":"var colors = [ # 'FF3333' , '#FF6A33' ]; function twoSquares ( c ) { var ctx = c . getContext ( '2d' ); ctx . fillStyle = colors [ 0 ]; ctx . fillRect ( 200 , 70 , 40 , 40 ); ctx . fillStyle = colors [ 1 ]; ctx . fillRect ( 260 , 70 , 40 , 40 ); } var trial = { type : 'canvas-slider-response' , stimulus : twoSquares , labels : [ '0' , '10' ], canvas_size : [ 200 , 500 ], prompt : '<p>How different would you say the colors of these two squares are on a scale from 0 (the same) to 10 (completely different)</p>' , data : { color1 : colors [ 0 ], color2 : colors [ 1 ]} }","title":"Draw two squares"},{"location":"plugins/jspsych-canvas-slider-response/#draw-two-squares-with-additional-parameters","text":"var colors ; function twoSquares ( c , colors ) { var ctx = c . getContext ( '2d' ); ctx . fillStyle = colors [ 0 ]; ctx . fillRect ( 200 , 70 , 40 , 40 ); ctx . fillStyle = colors [ 1 ]; ctx . fillRect ( 260 , 70 , 40 , 40 ); } var trial = { type : 'canvas-slider-response' , stimulus : function ( c ) { colors = [ 'darkred' , 'cyan' ]; twoSquares ( c , colors ); }, labels : [ 'Exactly<br>the same' , 'Totally<br>different' ], canvas_size : [ 200 , 500 ], prompt : '<p>How different would you say the colors of these two squares are?</p>' , on_finish : function ( data ) { data . color1 = colors [ 0 ]; data . color2 = colors [ 1 ]; } };","title":"Draw two squares with additional parameters"},{"location":"plugins/jspsych-categorize-animation/","text":"jspsych-categorize-animation \u00b6 The categorize animation plugin shows a sequence of images at a specified frame rate. The subject responds by pressing a key. Feedback indicating the correctness of the response is given. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined Each element of the array is a path to an image file. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. key_answer numeric undefined A numeric key code indicating the correct response. text_answer string \"\" A text label that describes the correct answer. Used in conjunction with the correct_text and incorrect_text parameters. correct_text string \"Correct.\" String to show when the correct answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). incorrect_text string \"Wrong.\" String to show when the wrong answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). frame_time numeric 500 How long to display each image (in milliseconds). sequence_reps numeric 1 How many times to show the entire sequence. allow_response_before_complete boolean false If true, the subject can respond before the animation sequence finishes. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). feedback_duration numeric 2000 How long to show the feedback (milliseconds). render_on_canvas boolean true If true, the images will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive images in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus JSON JSON encoded representation of the array of stimuli displayed in the trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean true if the subject got the correct answer, false otherwise. Examples \u00b6 Basic example \u00b6 var animation_trial = { type : 'categorize-animation' , stimuli : [ \"img/face_3.jpg\" , \"img/face_2.jpg\" , \"img/face_4.jpg\" , \"img/face_1.jpg\" ], choices : [ 80 , 81 ], // 80 = 'p', 81 = 'q' key_answer : 81 , // correct answer is 'q' for both trials }; Giving feedback with %ANS% string \u00b6 var animation_trial = { type : 'categorize-animation' , stimuli : [ \"img/face_3.jpg\" , \"img/face_2.jpg\" , \"img/face_4.jpg\" , \"img/face_1.jpg\" ], choices : [ 80 , 81 ], // 80 = 'p', 81 = 'q' key_answer : 81 , // correct answer is 'q' for both trials text_answer : 'Dax' , // the label for the sequence is 'Dax' correct_text : 'Correct! This was a %ANS%.' , incorrect_text : 'Incorrect. This was a %ANS%.' };","title":"jspsych-categorize-animation"},{"location":"plugins/jspsych-categorize-animation/#jspsych-categorize-animation","text":"The categorize animation plugin shows a sequence of images at a specified frame rate. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.","title":"jspsych-categorize-animation"},{"location":"plugins/jspsych-categorize-animation/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined Each element of the array is a path to an image file. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. key_answer numeric undefined A numeric key code indicating the correct response. text_answer string \"\" A text label that describes the correct answer. Used in conjunction with the correct_text and incorrect_text parameters. correct_text string \"Correct.\" String to show when the correct answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). incorrect_text string \"Wrong.\" String to show when the wrong answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). frame_time numeric 500 How long to display each image (in milliseconds). sequence_reps numeric 1 How many times to show the entire sequence. allow_response_before_complete boolean false If true, the subject can respond before the animation sequence finishes. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). feedback_duration numeric 2000 How long to show the feedback (milliseconds). render_on_canvas boolean true If true, the images will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive images in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych.","title":"Parameters"},{"location":"plugins/jspsych-categorize-animation/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus JSON JSON encoded representation of the array of stimuli displayed in the trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean true if the subject got the correct answer, false otherwise.","title":"Data Generated"},{"location":"plugins/jspsych-categorize-animation/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-categorize-animation/#basic-example","text":"var animation_trial = { type : 'categorize-animation' , stimuli : [ \"img/face_3.jpg\" , \"img/face_2.jpg\" , \"img/face_4.jpg\" , \"img/face_1.jpg\" ], choices : [ 80 , 81 ], // 80 = 'p', 81 = 'q' key_answer : 81 , // correct answer is 'q' for both trials };","title":"Basic example"},{"location":"plugins/jspsych-categorize-animation/#giving-feedback-with-ans-string","text":"var animation_trial = { type : 'categorize-animation' , stimuli : [ \"img/face_3.jpg\" , \"img/face_2.jpg\" , \"img/face_4.jpg\" , \"img/face_1.jpg\" ], choices : [ 80 , 81 ], // 80 = 'p', 81 = 'q' key_answer : 81 , // correct answer is 'q' for both trials text_answer : 'Dax' , // the label for the sequence is 'Dax' correct_text : 'Correct! This was a %ANS%.' , incorrect_text : 'Incorrect. This was a %ANS%.' };","title":"Giving feedback with %ANS% string"},{"location":"plugins/jspsych-categorize-html/","text":"jspsych-categorize-html \u00b6 The categorize html plugin shows an HTML object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus html string undefined The HTML stimulus to display. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. key_answer numeric undefined The numeric key code indicating the correct response. text_answer string \"\" A label that is associated with the correct answer. Used in conjunction with the correct_text and incorrect_text parameters. correct_text string \"Correct.\" String to show when the correct answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). incorrect_text string \"Wrong.\" String to show when the wrong answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). force_correct_button_press boolean false If set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial. show_stim_with_feedback boolean true If set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback. show_feedback_on_timeout boolean false If true, then category feedback will be displayed for an incorrect response after a timeout (trial_duration is exceeded). If false, then a timeout message will be shown. timeout_message string \"Please respond faster.\" The message to show on a timeout non-response. stimulus_duration numeric null How long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given. feedback_duration numeric 2000 How long to show the feedback for (milliseconds). trial_duration numeric null The maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean true if the subject got the correct answer, false otherwise. Examples \u00b6 Categorizing HTML content \u00b6 var categorization_trial = { type : 'categorize' , stimulus : '<p>B</p>' , key_answer : 80 , text_answer : 'letter' , choices : [ 80 , 81 ], correct_text : \"<p class='prompt'>Correct, this is a %ANS%.</p>\" , incorrect_text : \"<p class='prompt'>Incorrect, this is a %ANS%.</p>\" , prompt : \"<p>Press P for letter. Press Q for number.</p>\" };","title":"jspsych-categorize-html"},{"location":"plugins/jspsych-categorize-html/#jspsych-categorize-html","text":"The categorize html plugin shows an HTML object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.","title":"jspsych-categorize-html"},{"location":"plugins/jspsych-categorize-html/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus html string undefined The HTML stimulus to display. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. key_answer numeric undefined The numeric key code indicating the correct response. text_answer string \"\" A label that is associated with the correct answer. Used in conjunction with the correct_text and incorrect_text parameters. correct_text string \"Correct.\" String to show when the correct answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). incorrect_text string \"Wrong.\" String to show when the wrong answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). force_correct_button_press boolean false If set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial. show_stim_with_feedback boolean true If set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback. show_feedback_on_timeout boolean false If true, then category feedback will be displayed for an incorrect response after a timeout (trial_duration is exceeded). If false, then a timeout message will be shown. timeout_message string \"Please respond faster.\" The message to show on a timeout non-response. stimulus_duration numeric null How long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given. feedback_duration numeric 2000 How long to show the feedback for (milliseconds). trial_duration numeric null The maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response.","title":"Parameters"},{"location":"plugins/jspsych-categorize-html/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean true if the subject got the correct answer, false otherwise.","title":"Data Generated"},{"location":"plugins/jspsych-categorize-html/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-categorize-html/#categorizing-html-content","text":"var categorization_trial = { type : 'categorize' , stimulus : '<p>B</p>' , key_answer : 80 , text_answer : 'letter' , choices : [ 80 , 81 ], correct_text : \"<p class='prompt'>Correct, this is a %ANS%.</p>\" , incorrect_text : \"<p class='prompt'>Incorrect, this is a %ANS%.</p>\" , prompt : \"<p>Press P for letter. Press Q for number.</p>\" };","title":"Categorizing HTML content"},{"location":"plugins/jspsych-categorize-image/","text":"jspsych-categorize-image \u00b6 The categorize image plugin shows an image object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The path to the image file. key_answer numeric undefined The numeric key code indicating the correct response. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. text_answer string \"\" A label that is associated with the correct answer. Used in conjunction with the correct_text and incorrect_text parameters. correct_text string \"Correct.\" String to show when the correct answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). incorrect_text string \"Wrong.\" String to show when the wrong answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). force_correct_button_press boolean false If set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial. show_stim_with_feedback boolean true If set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback. show_feedback_on_timeout boolean false If true, then category feedback will be displayed for an incorrect response after a timeout (trial_duration is exceeded). If false, then a timeout message will be shown. timeout_message string \"Please respond faster.\" The message to show on a timeout non-response. stimulus_duration numeric null How long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given. feedback_duration numeric 2000 How long to show the feedback for (milliseconds). trial_duration numeric null The maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean true if the subject got the correct answer, false otherwise. Examples \u00b6 Categorizing an image \u00b6 var categorization_trial = { type : 'categorize-image' , stimulus : 'img/harrypotter.png' , key_answer : 71 , text_answer : 'Gryffindor' , choices : [ 71 , 72 , 82 , 83 ], correct_text : \"<p class='prompt'>Correct! This person is a %ANS%.</p>\" , incorrect_text : \"<p class='prompt'>Incorrect. This person is a %ANS%.</p>\" , prompt : \"<p>Is this person a (G)ryffindor, (H)ufflepuff, (R)avenclaw, or (S)lytherin?</p>\" };","title":"jspsych-categorize-image"},{"location":"plugins/jspsych-categorize-image/#jspsych-categorize-image","text":"The categorize image plugin shows an image object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.","title":"jspsych-categorize-image"},{"location":"plugins/jspsych-categorize-image/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The path to the image file. key_answer numeric undefined The numeric key code indicating the correct response. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. text_answer string \"\" A label that is associated with the correct answer. Used in conjunction with the correct_text and incorrect_text parameters. correct_text string \"Correct.\" String to show when the correct answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). incorrect_text string \"Wrong.\" String to show when the wrong answer is given. Can contain HTML formatting. The special string %ANS% can be used within the string. If present, the plugin will put the text_answer for the trial in place of the %ANS% string (see example below). prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). force_correct_button_press boolean false If set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial. show_stim_with_feedback boolean true If set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback. show_feedback_on_timeout boolean false If true, then category feedback will be displayed for an incorrect response after a timeout (trial_duration is exceeded). If false, then a timeout message will be shown. timeout_message string \"Please respond faster.\" The message to show on a timeout non-response. stimulus_duration numeric null How long to show the stimulus for (milliseconds). If null, then the stimulus is shown until a response is given. feedback_duration numeric 2000 How long to show the feedback for (milliseconds). trial_duration numeric null The maximum time allowed for a response. If null, then the experiment will wait indefinitely for a response.","title":"Parameters"},{"location":"plugins/jspsych-categorize-image/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean true if the subject got the correct answer, false otherwise.","title":"Data Generated"},{"location":"plugins/jspsych-categorize-image/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-categorize-image/#categorizing-an-image","text":"var categorization_trial = { type : 'categorize-image' , stimulus : 'img/harrypotter.png' , key_answer : 71 , text_answer : 'Gryffindor' , choices : [ 71 , 72 , 82 , 83 ], correct_text : \"<p class='prompt'>Correct! This person is a %ANS%.</p>\" , incorrect_text : \"<p class='prompt'>Incorrect. This person is a %ANS%.</p>\" , prompt : \"<p>Is this person a (G)ryffindor, (H)ufflepuff, (R)avenclaw, or (S)lytherin?</p>\" };","title":"Categorizing an image"},{"location":"plugins/jspsych-cloze/","text":"jspsych-cloze \u00b6 This plugin displays a text with certain words removed. Participants are asked to replace the missing items. Responses are recorded when clicking a button. Optionally, responses are evaluated and a function is called in case of differences, making it possible to inform participants about mistakes. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description text string undefined The cloze text to be displayed. Blanks are indicated by %% signs and automatically replaced by input fields. If there is a correct answer you want the system to check against, it must be typed between the two percentage signs (i.e. % correct solution %). button_text string OK Text of the button participants have to press for finishing the cloze test. check_answers boolean false Boolean value indicating if the answers given by participants should be compared against a correct solution given in the text (between % signs) after the button was clicked. If true , answers are checked and in case of differences, the mistake_fn is called. In this case, the trial does not automatically finish. If false , no checks are performed and the trial automatically ends when clicking the button. mistake_fn function function(){} Function called if check_answers is set to true and there is a difference between the participants answers and the correct solution provided in the text. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value answers array of strings Answers the partcipant gave Examples \u00b6 Simple cloze using default settings (no check against correct solution, no custom button text) \u00b6 var trial = { type : 'cloze' , text : 'The %% is the largest terrestrial mammal. It lives in both %% and %%.' }; More elaborate example (with check against correct solution, custom error handling and modified button text) \u00b6 var trial = { type : 'cloze' , text : 'A rectangle has % 4 % corners and a triangle has % 3 %.' , check_answers : true , button_text : 'Next' , mistake_fn : function (){ alert ( \"Wrong answer. Please check again.\" )} };","title":"jspsych-cloze"},{"location":"plugins/jspsych-cloze/#jspsych-cloze","text":"This plugin displays a text with certain words removed. Participants are asked to replace the missing items. Responses are recorded when clicking a button. Optionally, responses are evaluated and a function is called in case of differences, making it possible to inform participants about mistakes.","title":"jspsych-cloze"},{"location":"plugins/jspsych-cloze/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description text string undefined The cloze text to be displayed. Blanks are indicated by %% signs and automatically replaced by input fields. If there is a correct answer you want the system to check against, it must be typed between the two percentage signs (i.e. % correct solution %). button_text string OK Text of the button participants have to press for finishing the cloze test. check_answers boolean false Boolean value indicating if the answers given by participants should be compared against a correct solution given in the text (between % signs) after the button was clicked. If true , answers are checked and in case of differences, the mistake_fn is called. In this case, the trial does not automatically finish. If false , no checks are performed and the trial automatically ends when clicking the button. mistake_fn function function(){} Function called if check_answers is set to true and there is a difference between the participants answers and the correct solution provided in the text.","title":"Parameters"},{"location":"plugins/jspsych-cloze/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value answers array of strings Answers the partcipant gave","title":"Data Generated"},{"location":"plugins/jspsych-cloze/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-cloze/#simple-cloze-using-default-settings-no-check-against-correct-solution-no-custom-button-text","text":"var trial = { type : 'cloze' , text : 'The %% is the largest terrestrial mammal. It lives in both %% and %%.' };","title":"Simple cloze using default settings (no check against correct solution, no custom button text)"},{"location":"plugins/jspsych-cloze/#more-elaborate-example-with-check-against-correct-solution-custom-error-handling-and-modified-button-text","text":"var trial = { type : 'cloze' , text : 'A rectangle has % 4 % corners and a triangle has % 3 %.' , check_answers : true , button_text : 'Next' , mistake_fn : function (){ alert ( \"Wrong answer. Please check again.\" )} };","title":"More elaborate example (with check against correct solution, custom error handling and modified button text)"},{"location":"plugins/jspsych-external-html/","text":"jspsych-external-html plugin \u00b6 The HTML plugin displays an external HTML document (often a consent form). Either a keyboard response or a button press can be used to continue to the next trial. It allows the experimenter to check if conditions are met (such as indicating informed consent) before continuing. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description url string undefined The URL of the page to display. cont_key numeric null The key code a key to advance to the next trial. If left as null, then the subject will not be able to advance trials using the keyboard. cont_btn string null The ID of a clickable element on the page. When the element is clicked, the trial will advance. check_fn function function(){ return true; } This function is called with the jsPsych display_element as the only argument when the subject attempts to advance the trial. The trial will only advance if the function return true . This can be used to verify that the subject has correctly filled out a form before continuing, for example. force_refresh boolean false If true , then the plugin will avoid using the cached version of the HTML page to load if one exists. execute_script boolean false If true , then scripts on the remote page will be executed. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value url string The URL of the page. rt numeric The response time in milliseconds for the subject to finish the trial. Examples \u00b6 Loading a consent form \u00b6 This content would be in a file called 'external_page.html' \u00b6 < div id = \"consent\" > < p > This is a demo experiment, with this minimal consent form being loaded as an external html document. To continue, click the checkbox below and hit \"Start Experiment\". </ p > < p > < input type = \"checkbox\" id = \"consent_checkbox\" /> I agree to take part in this study. </ p > < button type = \"button\" id = \"start\" > Start Experiment </ button > </ div > jsPsych code to load above page. \u00b6 // sample function that might be used to check if a subject has given // consent to participate. var check_consent = function ( elem ) { if ( document . getElementById ( 'consent_checkbox' ). checked ) { return true ; } else { alert ( \"If you wish to participate, you must check the box next to the statement 'I agree to participate in this study.'\" ); return false ; } return false ; }; // declare the block. var trial = { type : 'external-html' , url : \"external_page.html\" , cont_btn : \"start\" , check_fn : check_consent };","title":"jspsych-external-html"},{"location":"plugins/jspsych-external-html/#jspsych-external-html-plugin","text":"The HTML plugin displays an external HTML document (often a consent form). Either a keyboard response or a button press can be used to continue to the next trial. It allows the experimenter to check if conditions are met (such as indicating informed consent) before continuing.","title":"jspsych-external-html plugin"},{"location":"plugins/jspsych-external-html/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description url string undefined The URL of the page to display. cont_key numeric null The key code a key to advance to the next trial. If left as null, then the subject will not be able to advance trials using the keyboard. cont_btn string null The ID of a clickable element on the page. When the element is clicked, the trial will advance. check_fn function function(){ return true; } This function is called with the jsPsych display_element as the only argument when the subject attempts to advance the trial. The trial will only advance if the function return true . This can be used to verify that the subject has correctly filled out a form before continuing, for example. force_refresh boolean false If true , then the plugin will avoid using the cached version of the HTML page to load if one exists. execute_script boolean false If true , then scripts on the remote page will be executed.","title":"Parameters"},{"location":"plugins/jspsych-external-html/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value url string The URL of the page. rt numeric The response time in milliseconds for the subject to finish the trial.","title":"Data Generated"},{"location":"plugins/jspsych-external-html/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-external-html/#loading-a-consent-form","text":"","title":"Loading a consent form"},{"location":"plugins/jspsych-external-html/#this-content-would-be-in-a-file-called-external_pagehtml","text":"< div id = \"consent\" > < p > This is a demo experiment, with this minimal consent form being loaded as an external html document. To continue, click the checkbox below and hit \"Start Experiment\". </ p > < p > < input type = \"checkbox\" id = \"consent_checkbox\" /> I agree to take part in this study. </ p > < button type = \"button\" id = \"start\" > Start Experiment </ button > </ div >","title":"This content would be in a file called 'external_page.html'"},{"location":"plugins/jspsych-external-html/#jspsych-code-to-load-above-page","text":"// sample function that might be used to check if a subject has given // consent to participate. var check_consent = function ( elem ) { if ( document . getElementById ( 'consent_checkbox' ). checked ) { return true ; } else { alert ( \"If you wish to participate, you must check the box next to the statement 'I agree to participate in this study.'\" ); return false ; } return false ; }; // declare the block. var trial = { type : 'external-html' , url : \"external_page.html\" , cont_btn : \"start\" , check_fn : check_consent };","title":"jsPsych code to load above page."},{"location":"plugins/jspsych-free-sort/","text":"jspsych-free-sort plugin \u00b6 The free-sort plugin displays one or more images on the screen that the participant can interact with by clicking and dragging. When the trial starts, the images can be positioned outside or inside the sort area. All images must be moved into the sorting area before the participant can click a button to end the trial. All of the moves that the participant performs are recorded, as well as the final positions of all images. This plugin could be useful when asking participants to position images based on similarity to one another, or to recall image spatial locations. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined Each element of this array is an image path. stim_height numeric 100 The height of the images in pixels. stim_width numeric 100 The width of the images in pixels. scale_factor numeric 1.5 How much larger to make the stimulus while moving (1 = no scaling). sort_area_height numeric 800 The height of the container that participants can move the stimuli in. Stimuli will be constrained to this area. sort_area_width numeric 800 The width of the container that participants can move the stimuli in. Stimuli will be constrained to this area. sort_area_shape string \"ellipse\" The shape of the sorting area, can be \"ellipse\" or \"square\". prompt string null This string can contain HTML markup. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). prompt_location string \"above\" Indicates whether to show the prompt \"above\" or \"below\" the sorting area. button_label string 'Continue' The text that appears on the button to continue to the next trial. change_border_background_color boolean true If true , the sort area border color will change while items are being moved in and out of the sort area, and the background color will change once all items have been moved into the sort area. If false , the border will remain black and the background will remain white throughout the trial. border_color_in string '#a1d99b' If change_border_background_color is true , the sort area border will change to this color when an item is being moved into the sort area, and the background will change to this color when all of the items have been moved into the sort area. border_color_out string '#fc9272' If change_border_background_color is true , this will be the color of the sort area border when there are one or more items that still need to be moved into the sort area. border_width numeric null The width in pixels of the border around the sort area. If null , the border width will be 3% of the sort_area_height . counter_text_unfinished string You still need to place %n% item%s% inside the sort area. Text to display when there are one or more items that still need to be placed in the sort area. If \"%n%\" is included in the string, it will be replaced with the number of items that still need to be moved inside. If \"%s%\" is included in the string, a \"s\" will be included when the number of items remaining is greater than one. counter_text_finished string All items placed. Feel free to reposition items if necessary. Text that will take the place of the counter_text_unfinished text when all items have been moved inside the sort area. stim_starts_inside boolean false If false , the images will be positioned to the left and right of the sort area when the trial loads. If true , the images will be positioned at random locations inside the sort area when the trial loads. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value init_locations JSON string A JSON-encoded object representing the initial locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location. moves JSON string A JSON-encoded object representing all of the moves the participant made when sorting. The object is an array with each element representing a move. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location after the move. final_locations JSON string A JSON-encoded object representing the final locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location. rt numeric The response time in milliseconds for the participant to finish all sorting. Examples \u00b6 Basic example \u00b6 var sorting_stimuli = []; for ( var i = 1 ; i <= 12 ; i ++ ) { sorting_stimuli . push ( \"img/cell_img_\" + i + \".jpg\" ); } var sort_trial = { type : 'free-sort' , stimuli : sorting_stimuli , prompt : \"<p>Click and drag the images below to sort them so that similar items are close together.</p>\" };","title":"jspsych-free-sort"},{"location":"plugins/jspsych-free-sort/#jspsych-free-sort-plugin","text":"The free-sort plugin displays one or more images on the screen that the participant can interact with by clicking and dragging. When the trial starts, the images can be positioned outside or inside the sort area. All images must be moved into the sorting area before the participant can click a button to end the trial. All of the moves that the participant performs are recorded, as well as the final positions of all images. This plugin could be useful when asking participants to position images based on similarity to one another, or to recall image spatial locations.","title":"jspsych-free-sort plugin"},{"location":"plugins/jspsych-free-sort/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined Each element of this array is an image path. stim_height numeric 100 The height of the images in pixels. stim_width numeric 100 The width of the images in pixels. scale_factor numeric 1.5 How much larger to make the stimulus while moving (1 = no scaling). sort_area_height numeric 800 The height of the container that participants can move the stimuli in. Stimuli will be constrained to this area. sort_area_width numeric 800 The width of the container that participants can move the stimuli in. Stimuli will be constrained to this area. sort_area_shape string \"ellipse\" The shape of the sorting area, can be \"ellipse\" or \"square\". prompt string null This string can contain HTML markup. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). prompt_location string \"above\" Indicates whether to show the prompt \"above\" or \"below\" the sorting area. button_label string 'Continue' The text that appears on the button to continue to the next trial. change_border_background_color boolean true If true , the sort area border color will change while items are being moved in and out of the sort area, and the background color will change once all items have been moved into the sort area. If false , the border will remain black and the background will remain white throughout the trial. border_color_in string '#a1d99b' If change_border_background_color is true , the sort area border will change to this color when an item is being moved into the sort area, and the background will change to this color when all of the items have been moved into the sort area. border_color_out string '#fc9272' If change_border_background_color is true , this will be the color of the sort area border when there are one or more items that still need to be moved into the sort area. border_width numeric null The width in pixels of the border around the sort area. If null , the border width will be 3% of the sort_area_height . counter_text_unfinished string You still need to place %n% item%s% inside the sort area. Text to display when there are one or more items that still need to be placed in the sort area. If \"%n%\" is included in the string, it will be replaced with the number of items that still need to be moved inside. If \"%s%\" is included in the string, a \"s\" will be included when the number of items remaining is greater than one. counter_text_finished string All items placed. Feel free to reposition items if necessary. Text that will take the place of the counter_text_unfinished text when all items have been moved inside the sort area. stim_starts_inside boolean false If false , the images will be positioned to the left and right of the sort area when the trial loads. If true , the images will be positioned at random locations inside the sort area when the trial loads.","title":"Parameters"},{"location":"plugins/jspsych-free-sort/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value init_locations JSON string A JSON-encoded object representing the initial locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location. moves JSON string A JSON-encoded object representing all of the moves the participant made when sorting. The object is an array with each element representing a move. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location after the move. final_locations JSON string A JSON-encoded object representing the final locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location. rt numeric The response time in milliseconds for the participant to finish all sorting.","title":"Data Generated"},{"location":"plugins/jspsych-free-sort/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-free-sort/#basic-example","text":"var sorting_stimuli = []; for ( var i = 1 ; i <= 12 ; i ++ ) { sorting_stimuli . push ( \"img/cell_img_\" + i + \".jpg\" ); } var sort_trial = { type : 'free-sort' , stimuli : sorting_stimuli , prompt : \"<p>Click and drag the images below to sort them so that similar items are close together.</p>\" };","title":"Basic example"},{"location":"plugins/jspsych-fullscreen/","text":"jspsych-fullscreen plugin \u00b6 The fullscreen plugin allows the experiment to enter or exit fullscreen mode. For security reasons, all browsers require that entry into fullscreen mode is triggered by a user action. To enter fullscreen mode, this plugin has the user click a button. Exiting fullscreen mode can be done without user input. Safari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari. The experiment will ignore any trials using the fullscreen plugin in Safari. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description fullscreen_mode boolean true A value of true causes the experiment to enter fullscreen mode. A value of false causes the browser to exit fullscreen mode. message string <p>The experiment will switch to full screen mode when you press the button below</p> The HTML content to display above the button to enter fullscreen mode. button_label string 'Continue' The text that appears on the button to enter fullscreen mode. delay_after numeric 1000 The length of time to delay after entering fullscreen mode before ending the trial. This can be useful because entering fullscreen is jarring and most browsers display some kind of message that the browser has entered fullscreen mode. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value success boolean true if the browser supports fullscreen mode (i.e., is not Safari) Examples \u00b6 Entering and exiting fullscreen \u00b6 var timeline = []; timeline . push ({ type : 'fullscreen' , fullscreen_mode : true }); timeline . push ({ type : 'html-keyboard-response' , stimulus : 'This trial will be in fullscreen mode.' }); // exit fullscreen mode timeline . push ({ type : 'fullscreen' , fullscreen_mode : false }); timeline . push ({ type : 'html-keyboard-response' , stimulus : 'This trial will NOT be in fullscreen mode.' }); jsPsych . init ({ timeline : timeline });","title":"jspsych-fullscreen"},{"location":"plugins/jspsych-fullscreen/#jspsych-fullscreen-plugin","text":"The fullscreen plugin allows the experiment to enter or exit fullscreen mode. For security reasons, all browsers require that entry into fullscreen mode is triggered by a user action. To enter fullscreen mode, this plugin has the user click a button. Exiting fullscreen mode can be done without user input. Safari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari. The experiment will ignore any trials using the fullscreen plugin in Safari.","title":"jspsych-fullscreen plugin"},{"location":"plugins/jspsych-fullscreen/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description fullscreen_mode boolean true A value of true causes the experiment to enter fullscreen mode. A value of false causes the browser to exit fullscreen mode. message string <p>The experiment will switch to full screen mode when you press the button below</p> The HTML content to display above the button to enter fullscreen mode. button_label string 'Continue' The text that appears on the button to enter fullscreen mode. delay_after numeric 1000 The length of time to delay after entering fullscreen mode before ending the trial. This can be useful because entering fullscreen is jarring and most browsers display some kind of message that the browser has entered fullscreen mode.","title":"Parameters"},{"location":"plugins/jspsych-fullscreen/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value success boolean true if the browser supports fullscreen mode (i.e., is not Safari)","title":"Data Generated"},{"location":"plugins/jspsych-fullscreen/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-fullscreen/#entering-and-exiting-fullscreen","text":"var timeline = []; timeline . push ({ type : 'fullscreen' , fullscreen_mode : true }); timeline . push ({ type : 'html-keyboard-response' , stimulus : 'This trial will be in fullscreen mode.' }); // exit fullscreen mode timeline . push ({ type : 'fullscreen' , fullscreen_mode : false }); timeline . push ({ type : 'html-keyboard-response' , stimulus : 'This trial will NOT be in fullscreen mode.' }); jsPsych . init ({ timeline : timeline });","title":"Entering and exiting fullscreen"},{"location":"plugins/jspsych-html-button-response/","text":"jspsych-html-button-response \u00b6 This plugin displays HTML content and records responses generated by button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus HTML string undefined The HTML content to be displayed. choices array of strings [] Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. stimulus string The HTML content that was displayed on the screen. Examples \u00b6 Displaying question until subject gives a response \u00b6 var trial = { type : 'html-button-response' , stimulus : '<p>Running</p>' , choices : [ 'Healthy' , 'Unhealthy' ], prompt : \"<p>Is this activity healthy or unhealthy?</p>\" };","title":"jspsych-html-button-response"},{"location":"plugins/jspsych-html-button-response/#jspsych-html-button-response","text":"This plugin displays HTML content and records responses generated by button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting.","title":"jspsych-html-button-response"},{"location":"plugins/jspsych-html-button-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus HTML string undefined The HTML content to be displayed. choices array of strings [] Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.","title":"Parameters"},{"location":"plugins/jspsych-html-button-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. stimulus string The HTML content that was displayed on the screen.","title":"Data Generated"},{"location":"plugins/jspsych-html-button-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-html-button-response/#displaying-question-until-subject-gives-a-response","text":"var trial = { type : 'html-button-response' , stimulus : '<p>Running</p>' , choices : [ 'Healthy' , 'Unhealthy' ], prompt : \"<p>Is this activity healthy or unhealthy?</p>\" };","title":"Displaying question until subject gives a response"},{"location":"plugins/jspsych-html-keyboard-response/","text":"jspsych-html-keyboard-response \u00b6 This plugin displays HTML content and records responses generated with the keyboard.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus HTML string undefined The string to be displayed. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The HTML content that was displayed on the screen. Examples \u00b6 Displaying trial until subject gives a response \u00b6 var trial = { type : 'html-keyboard-response' , stimulus : '<p>Running</p>' , choices : [ 'e' , 'i' ], prompt : \"<p>Is this activity healthy or unhealthy? Press 'e' for healthy and 'i' for unhealthy.</p>\" }; Showing a 1 second fixation cross; no response allowed \u00b6 var trial = { type : 'html-keyboard-response' , stimulus : '<p style=\"font-size: 48px;\">+</p>' , choices : jsPsych . NO_KEYS , trial_duration : 1000 , };","title":"jspsych-html-keyboard-response"},{"location":"plugins/jspsych-html-keyboard-response/#jspsych-html-keyboard-response","text":"This plugin displays HTML content and records responses generated with the keyboard.The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.","title":"jspsych-html-keyboard-response"},{"location":"plugins/jspsych-html-keyboard-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus HTML string undefined The string to be displayed. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.","title":"Parameters"},{"location":"plugins/jspsych-html-keyboard-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The HTML content that was displayed on the screen.","title":"Data Generated"},{"location":"plugins/jspsych-html-keyboard-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-html-keyboard-response/#displaying-trial-until-subject-gives-a-response","text":"var trial = { type : 'html-keyboard-response' , stimulus : '<p>Running</p>' , choices : [ 'e' , 'i' ], prompt : \"<p>Is this activity healthy or unhealthy? Press 'e' for healthy and 'i' for unhealthy.</p>\" };","title":"Displaying trial until subject gives a response"},{"location":"plugins/jspsych-html-keyboard-response/#showing-a-1-second-fixation-cross-no-response-allowed","text":"var trial = { type : 'html-keyboard-response' , stimulus : '<p style=\"font-size: 48px;\">+</p>' , choices : jsPsych . NO_KEYS , trial_duration : 1000 , };","title":"Showing a 1 second fixation cross; no response allowed"},{"location":"plugins/jspsych-html-slider-response/","text":"jspsych-html-slider-response \u00b6 This plugin displays HTML content and allows the subject to respond by dragging a slider. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus HTML string undefined The string to be displayed labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. button_label string 'Continue' Label of the button to end the trial. min integer 0 Sets the minimum value of the slider. max integer 100 Sets the maximum value of the slider. slider_start integer 50 Sets the starting value of the slider step integer 1 Sets the step of the slider. This is the smallest amount by which the slider can change. slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must move the slider before clicking the continue button. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The HTML content that was displayed on the screen. slider_start numeric The starting value of the slider. Examples \u00b6 var trial = { type : 'html-slider-response' , stimulus : '<p>Running</p>' , labels : [ 'healthy' , 'unhealthy' ], prompt : \"<p>How healthy/unhealthy is this activity?</p>\" };","title":"jspsych-html-slider-response"},{"location":"plugins/jspsych-html-slider-response/#jspsych-html-slider-response","text":"This plugin displays HTML content and allows the subject to respond by dragging a slider.","title":"jspsych-html-slider-response"},{"location":"plugins/jspsych-html-slider-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus HTML string undefined The string to be displayed labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. button_label string 'Continue' Label of the button to end the trial. min integer 0 Sets the minimum value of the slider. max integer 100 Sets the maximum value of the slider. slider_start integer 50 Sets the starting value of the slider step integer 1 Sets the step of the slider. This is the smallest amount by which the slider can change. slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must move the slider before clicking the continue button. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.","title":"Parameters"},{"location":"plugins/jspsych-html-slider-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The HTML content that was displayed on the screen. slider_start numeric The starting value of the slider.","title":"Data Generated"},{"location":"plugins/jspsych-html-slider-response/#examples","text":"var trial = { type : 'html-slider-response' , stimulus : '<p>Running</p>' , labels : [ 'healthy' , 'unhealthy' ], prompt : \"<p>How healthy/unhealthy is this activity?</p>\" };","title":"Examples"},{"location":"plugins/jspsych-iat-html/","text":"jspsych-iat-html plugin \u00b6 This plugin runs a single trial of the implicit association test (IAT) , using HTML content as the stimulus. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The HTML-format stimulus to display. html_when_wrong string <span style=\"color: red; font-size: 80px\">X</span> The content to display when a user presses the wrong key. bottom_instructions string <p>If you press the wrong key, a red X will appear. Press any key to continue.</p> Instructions about making a wrong key press and whether another key press is needed to continue. force_correct_key_press boolean false If this is true and the user presses the wrong key then they have to press the other key to continue. An example would be two keys 'E' and 'I'. If the key associated with the stimulus is 'E' and key 'I' was pressed, then pressing 'E' is needed to continue the trial. When this is true, then parameter key_to_move_forward is not used. display_feedback boolean false If true, then html_when_wrong and wrong_image_name is required. If false, trial_duration is needed and trial will continue automatically. left_category_key string 'E' Key press that is associated with the left_category_label. right_category_key string 'I' Key press that is associated with the right_category_label. left_category_label string ['left'] An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left side of the page. right_category_label string ['right'] An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right side of the page. stim_key_association string 'undefined' Inputs are either 'left' or 'right'. It will associate the stimulus with the key presses on the left or right side of the page(left_category_key or right_category_key). key_to_move_forward array of characters [jsPsych.ALL_KEYS] This array contains the characters the subject is allowed to press to move on to the next trial if their key press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the user to select the right key to move forward. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean boolean of whether the user's key press was correct for the given image or incorrect. Examples \u00b6 var trial_block = { type : 'iat-html' , stimulus : 'Golf' , stim_key_association : 'left' , html_when_wrong : '<span style=\"color: red; font-size: 80px\">X</span>' , bottom_instructions : '<p>If you press the wrong key, a red X will appear. Press the other key to continue</p>' , force_correct_key_press : true , display_feedback : true , trial_duration : 3000 , //Only if display_feedback is false left_category_key : 'E' , right_category_key : 'I' , left_category_label : [ 'OLD' ], right_category_label : [ 'YOUNG' ], response_ends_trial : true } var timeline = []; timeline . push ( trial_block ); jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } });","title":"jspsych-iat-html"},{"location":"plugins/jspsych-iat-html/#jspsych-iat-html-plugin","text":"This plugin runs a single trial of the implicit association test (IAT) , using HTML content as the stimulus.","title":"jspsych-iat-html plugin"},{"location":"plugins/jspsych-iat-html/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The HTML-format stimulus to display. html_when_wrong string <span style=\"color: red; font-size: 80px\">X</span> The content to display when a user presses the wrong key. bottom_instructions string <p>If you press the wrong key, a red X will appear. Press any key to continue.</p> Instructions about making a wrong key press and whether another key press is needed to continue. force_correct_key_press boolean false If this is true and the user presses the wrong key then they have to press the other key to continue. An example would be two keys 'E' and 'I'. If the key associated with the stimulus is 'E' and key 'I' was pressed, then pressing 'E' is needed to continue the trial. When this is true, then parameter key_to_move_forward is not used. display_feedback boolean false If true, then html_when_wrong and wrong_image_name is required. If false, trial_duration is needed and trial will continue automatically. left_category_key string 'E' Key press that is associated with the left_category_label. right_category_key string 'I' Key press that is associated with the right_category_label. left_category_label string ['left'] An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left side of the page. right_category_label string ['right'] An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right side of the page. stim_key_association string 'undefined' Inputs are either 'left' or 'right'. It will associate the stimulus with the key presses on the left or right side of the page(left_category_key or right_category_key). key_to_move_forward array of characters [jsPsych.ALL_KEYS] This array contains the characters the subject is allowed to press to move on to the next trial if their key press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the user to select the right key to move forward. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.","title":"Parameters"},{"location":"plugins/jspsych-iat-html/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean boolean of whether the user's key press was correct for the given image or incorrect.","title":"Data Generated"},{"location":"plugins/jspsych-iat-html/#examples","text":"var trial_block = { type : 'iat-html' , stimulus : 'Golf' , stim_key_association : 'left' , html_when_wrong : '<span style=\"color: red; font-size: 80px\">X</span>' , bottom_instructions : '<p>If you press the wrong key, a red X will appear. Press the other key to continue</p>' , force_correct_key_press : true , display_feedback : true , trial_duration : 3000 , //Only if display_feedback is false left_category_key : 'E' , right_category_key : 'I' , left_category_label : [ 'OLD' ], right_category_label : [ 'YOUNG' ], response_ends_trial : true } var timeline = []; timeline . push ( trial_block ); jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } });","title":"Examples"},{"location":"plugins/jspsych-iat-image/","text":"jspsych-iat-image plugin \u00b6 This plugin runs a single trial of the implicit association test (IAT) , using an image as the stimulus. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The stimulus to display. The path to an image. htm_when_wrong string <span style=\"color: red; font-size: 80px\">X</span> The image to display when a user presses the wrong key. bottom_instructions string <p>If you press the wrong key, a red X will appear. Press any key to continue.</p> Instructions about making a wrong key press and whether another key press is needed to continue. force_correct_key_press boolean false If this is true and the user presses the wrong key then they have to press the other key to continue. An example would be two keys 'E' and 'I'. If the key associated with the stimulus is 'E' and key 'I' was pressed, then pressing 'E' is needed to continue the trial. When this is true, then parameter key_to_move_forward is not used. display_feedback boolean false If true, then image_when_wrong and wrong_image_name is required. If false, trial_duration is needed and trial will continue automatically. left_category_key string 'E' Key press that is associated with the left_category_label. right_category_key string 'I' Key press that is associated with the right_category_label. left_category_label string ['left'] An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left side of the page. right_category_label string ['right'] An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right side of the page. stim_key_association string 'undefined' Inputs are either 'left' or 'right'. It will associate the stimulus with the key presses on the left or right side of the page(left_category_key or right_category_key). key_to_move_forward array of characters [jsPsych.ALL_KEYS] This array contains the characters the subject is allowed to press to move on to the next trial if their key press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the user to select the right key to move forward. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean boolean of whether the user's key press was correct for the given image or incorrect. Examples \u00b6 var trial_block = { type : 'iat-image' , stimulus : 'img/blue.png' , stim_key_association : 'left' , html_when_wrong : '<span style=\"color: red; font-size: 80px\">X</span>' , bottom_instructions : '<p>If you press the wrong key, a red X will appear. Press the other key to continue</p>' , force_correct_key_press : true , display_feedback : true , trial_duration : 3000 , //Only if display_feedback is false left_category_key : 'E' , right_category_key : 'I' , left_category_label : [ 'OLD' ], right_category_label : [ 'YOUNG' ], response_ends_trial : true } var timeline = []; timeline . push ( trial_block ); jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } });","title":"jspsych-iat-image"},{"location":"plugins/jspsych-iat-image/#jspsych-iat-image-plugin","text":"This plugin runs a single trial of the implicit association test (IAT) , using an image as the stimulus.","title":"jspsych-iat-image plugin"},{"location":"plugins/jspsych-iat-image/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The stimulus to display. The path to an image. htm_when_wrong string <span style=\"color: red; font-size: 80px\">X</span> The image to display when a user presses the wrong key. bottom_instructions string <p>If you press the wrong key, a red X will appear. Press any key to continue.</p> Instructions about making a wrong key press and whether another key press is needed to continue. force_correct_key_press boolean false If this is true and the user presses the wrong key then they have to press the other key to continue. An example would be two keys 'E' and 'I'. If the key associated with the stimulus is 'E' and key 'I' was pressed, then pressing 'E' is needed to continue the trial. When this is true, then parameter key_to_move_forward is not used. display_feedback boolean false If true, then image_when_wrong and wrong_image_name is required. If false, trial_duration is needed and trial will continue automatically. left_category_key string 'E' Key press that is associated with the left_category_label. right_category_key string 'I' Key press that is associated with the right_category_label. left_category_label string ['left'] An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the left side of the page. right_category_label string ['right'] An array that contains the words/labels associated with a certain stimulus. The labels are aligned to the right side of the page. stim_key_association string 'undefined' Inputs are either 'left' or 'right'. It will associate the stimulus with the key presses on the left or right side of the page(left_category_key or right_category_key). key_to_move_forward array of characters [jsPsych.ALL_KEYS] This array contains the characters the subject is allowed to press to move on to the next trial if their key press was incorrect and feedback was displayed. Can also have 'other key' as an option which will only allow the user to select the right key to move forward. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.","title":"Parameters"},{"location":"plugins/jspsych-iat-image/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. correct boolean boolean of whether the user's key press was correct for the given image or incorrect.","title":"Data Generated"},{"location":"plugins/jspsych-iat-image/#examples","text":"var trial_block = { type : 'iat-image' , stimulus : 'img/blue.png' , stim_key_association : 'left' , html_when_wrong : '<span style=\"color: red; font-size: 80px\">X</span>' , bottom_instructions : '<p>If you press the wrong key, a red X will appear. Press the other key to continue</p>' , force_correct_key_press : true , display_feedback : true , trial_duration : 3000 , //Only if display_feedback is false left_category_key : 'E' , right_category_key : 'I' , left_category_label : [ 'OLD' ], right_category_label : [ 'YOUNG' ], response_ends_trial : true } var timeline = []; timeline . push ( trial_block ); jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } });","title":"Examples"},{"location":"plugins/jspsych-image-button-response/","text":"jspsych-image-button-response \u00b6 This plugin displays an image and records responses generated with a button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The path of the image file to be displayed. stimulus_height integer null Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. stimulus_width integer null Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. maintain_aspect_ration boolean true If setting only the width or only the height and this parameter is true, then the other dimension will be scaled to maintain the image's aspect ratio. choices array of strings [] Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. render_on_canvas boolean true If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive image trials in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. stimulus string The path of the image that was displayed. Examples \u00b6 Displaying question until subject gives a response \u00b6 var trial = { type : 'image-button-response' , stimulus : 'img/happy_face_1.png' , choices : [ 'Happy' , 'Sad' ], prompt : \"<p>Is this person happy or sad?</p>\" };","title":"jspsych-image-button-response"},{"location":"plugins/jspsych-image-button-response/#jspsych-image-button-response","text":"This plugin displays an image and records responses generated with a button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting.","title":"jspsych-image-button-response"},{"location":"plugins/jspsych-image-button-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The path of the image file to be displayed. stimulus_height integer null Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. stimulus_width integer null Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. maintain_aspect_ration boolean true If setting only the width or only the height and this parameter is true, then the other dimension will be scaled to maintain the image's aspect ratio. choices array of strings [] Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. render_on_canvas boolean true If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive image trials in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych.","title":"Parameters"},{"location":"plugins/jspsych-image-button-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. stimulus string The path of the image that was displayed.","title":"Data Generated"},{"location":"plugins/jspsych-image-button-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-image-button-response/#displaying-question-until-subject-gives-a-response","text":"var trial = { type : 'image-button-response' , stimulus : 'img/happy_face_1.png' , choices : [ 'Happy' , 'Sad' ], prompt : \"<p>Is this person happy or sad?</p>\" };","title":"Displaying question until subject gives a response"},{"location":"plugins/jspsych-image-keyboard-response/","text":"jspsych-image-keyboard-response \u00b6 This plugin displays and image and records responses generated with the keyboard. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The path of the image file to be displayed. stimulus_height integer null Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. stimulus_width integer null Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. maintain_aspect_ration boolean true If setting only the width or only the height and this parameter is true, then the other dimension will be scaled to maintain the image's aspect ratio. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. render_on_canvas boolean true If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive image trials in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The path of the image that was displayed. Examples \u00b6 Displaying trial until subject gives a response \u00b6 var trial = { type : 'image-keyboard-response' , stimulus : 'img/happy_face_1.png' , choices : [ 'e' , 'i' ], prompt : \"<p>Is this person happy or sad? Press 'e' for happy and 'i' for sad.</p>\" , response_ends_trial : false }; Displaying image for a fixed duration; no response allowed \u00b6 var trial = { type : 'image-button-response' , stimulus : 'img/happy_face_1.png' , choices : jsPsych . NO_KEYS , prompt : \"<p>Study this face for 5 seconds.</p>\" , trial_duration : 5000 };","title":"jspsych-image-keyboard-response"},{"location":"plugins/jspsych-image-keyboard-response/#jspsych-image-keyboard-response","text":"This plugin displays and image and records responses generated with the keyboard. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.","title":"jspsych-image-keyboard-response"},{"location":"plugins/jspsych-image-keyboard-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The path of the image file to be displayed. stimulus_height integer null Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. stimulus_width integer null Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. maintain_aspect_ration boolean true If setting only the width or only the height and this parameter is true, then the other dimension will be scaled to maintain the image's aspect ratio. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. render_on_canvas boolean true If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive image trials in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych.","title":"Parameters"},{"location":"plugins/jspsych-image-keyboard-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The path of the image that was displayed.","title":"Data Generated"},{"location":"plugins/jspsych-image-keyboard-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-image-keyboard-response/#displaying-trial-until-subject-gives-a-response","text":"var trial = { type : 'image-keyboard-response' , stimulus : 'img/happy_face_1.png' , choices : [ 'e' , 'i' ], prompt : \"<p>Is this person happy or sad? Press 'e' for happy and 'i' for sad.</p>\" , response_ends_trial : false };","title":"Displaying trial until subject gives a response"},{"location":"plugins/jspsych-image-keyboard-response/#displaying-image-for-a-fixed-duration-no-response-allowed","text":"var trial = { type : 'image-button-response' , stimulus : 'img/happy_face_1.png' , choices : jsPsych . NO_KEYS , prompt : \"<p>Study this face for 5 seconds.</p>\" , trial_duration : 5000 };","title":"Displaying image for a fixed duration; no response allowed"},{"location":"plugins/jspsych-image-slider-response/","text":"jspsych-image-slider-response \u00b6 This plugin displays and image and allows the subject to respond by dragging a slider. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The path to the image file to be displayed. stimulus_height integer null Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. stimulus_width integer null Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. maintain_aspect_ration boolean true If setting only the width or only the height and this parameter is true, then the other dimension will be scaled to maintain the image's aspect ratio. labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. button_label string 'Continue' Label of the button to advance/submit min integer 0 Sets the minimum value of the slider max integer 100 Sets the maximum value of the slider slider_start integer 50 Sets the starting value of the slider step integer 1 Sets the step of the slider slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must move the slider before clicking the continue button. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. render_on_canvas boolean true If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive image trials in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The path of the image that was displayed. slider_start numeric The starting value of the slider. Examples \u00b6 Displaying trial until subject gives a response \u00b6 var trial = { type : 'image-slider-response' , stimulus : 'img/happy_face_1.png' , labels : [ 'happy' , 'sad' ], prompt : \"<p>How happy/sad is this person?</p>\" , response_ends_trial : false };","title":"jspsych-image-slider-response"},{"location":"plugins/jspsych-image-slider-response/#jspsych-image-slider-response","text":"This plugin displays and image and allows the subject to respond by dragging a slider.","title":"jspsych-image-slider-response"},{"location":"plugins/jspsych-image-slider-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus string undefined The path to the image file to be displayed. stimulus_height integer null Set the height of the image in pixels. If left null (no value specified), then the image will display at its natural height. stimulus_width integer null Set the width of the image in pixels. If left null (no value specified), then the image will display at its natural width. maintain_aspect_ration boolean true If setting only the width or only the height and this parameter is true, then the other dimension will be scaled to maintain the image's aspect ratio. labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. button_label string 'Continue' Label of the button to advance/submit min integer 0 Sets the minimum value of the slider max integer 100 Sets the maximum value of the slider slider_start integer 50 Sets the starting value of the slider step integer 1 Sets the step of the slider slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must move the slider before clicking the continue button. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). stimulus_duration numeric null How long to show the stimulus for in milliseconds. If the value is null, then the stimulus will be shown until the subject makes a response. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. render_on_canvas boolean true If true, the image will be drawn onto a canvas element. This prevents a blank screen (white flash) between consecutive image trials in some browsers, like Firefox and Edge. If false, the image will be shown via an img element, as in previous versions of jsPsych.","title":"Parameters"},{"location":"plugins/jspsych-image-slider-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string The path of the image that was displayed. slider_start numeric The starting value of the slider.","title":"Data Generated"},{"location":"plugins/jspsych-image-slider-response/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-image-slider-response/#displaying-trial-until-subject-gives-a-response","text":"var trial = { type : 'image-slider-response' , stimulus : 'img/happy_face_1.png' , labels : [ 'happy' , 'sad' ], prompt : \"<p>How happy/sad is this person?</p>\" , response_ends_trial : false };","title":"Displaying trial until subject gives a response"},{"location":"plugins/jspsych-instructions/","text":"jspsych-instructions plugin \u00b6 This plugin is for showing instructions to the subject. It allows subjects to navigate through multiple pages of instructions at their own pace, recording how long the subject spends on each page. Navigation can be done using the mouse or keyboard. Subjects can be allowed to navigate forwards and backwards through pages, if desired. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description pages array undefined Each element of the array is the content for a single page. Each page should be an HTML-formatted string. key_forward key code 'rightarrow' This is the key that the subject can press in order to advance to the next page. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). key_backward key code 'leftarrow' This is the key that the subject can press to return to the previous page. allow_backward boolean true If true, the subject can return to previous pages of the instructions. If false, they may only advace to the next page. allow_keys boolean true If true, the subject can use keyboard keys to navigate the pages. If false, they may not. show_clickable_nav boolean false If true, then a Previous and Next button will be displayed beneath the instructions. Subjects can click the buttons to navigate. button_label_previous string 'Previous' The text that appears on the button to go backwards. button_label_next string 'Next' The text that appears on the button to go forwards. show_page_number boolean false If true, and clickable navigation is enabled, then Page x/y will be shown between the nav buttons. page_label string 'Page' The text that appears before x/y pages displayed when show_page_number is true. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value view_history JSON string A JSON string containing the order of pages the subject viewed (including when the subject returned to previous pages) and the time spent viewing each page. rt numeric The response time in milliseconds for the subject to view all of the pages. Example \u00b6 Showing simple text instructions \u00b6 var trial = { type : 'instructions' , pages : [ 'Welcome to the experiment. Click next to begin.' , 'This is the second page of instructions.' , 'This is the final page.' ], show_clickable_nav : true } Including images \u00b6 var trial = { type : 'instructions' , pages : [ 'Welcome to the experiment. Click next to begin.' , 'Here is a picture of what you will do: <img src=\"instruction_image.jpg\"></img>' ], show_clickable_nav : true }","title":"jspsych-instructions"},{"location":"plugins/jspsych-instructions/#jspsych-instructions-plugin","text":"This plugin is for showing instructions to the subject. It allows subjects to navigate through multiple pages of instructions at their own pace, recording how long the subject spends on each page. Navigation can be done using the mouse or keyboard. Subjects can be allowed to navigate forwards and backwards through pages, if desired.","title":"jspsych-instructions plugin"},{"location":"plugins/jspsych-instructions/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description pages array undefined Each element of the array is the content for a single page. Each page should be an HTML-formatted string. key_forward key code 'rightarrow' This is the key that the subject can press in order to advance to the next page. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). key_backward key code 'leftarrow' This is the key that the subject can press to return to the previous page. allow_backward boolean true If true, the subject can return to previous pages of the instructions. If false, they may only advace to the next page. allow_keys boolean true If true, the subject can use keyboard keys to navigate the pages. If false, they may not. show_clickable_nav boolean false If true, then a Previous and Next button will be displayed beneath the instructions. Subjects can click the buttons to navigate. button_label_previous string 'Previous' The text that appears on the button to go backwards. button_label_next string 'Next' The text that appears on the button to go forwards. show_page_number boolean false If true, and clickable navigation is enabled, then Page x/y will be shown between the nav buttons. page_label string 'Page' The text that appears before x/y pages displayed when show_page_number is true.","title":"Parameters"},{"location":"plugins/jspsych-instructions/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value view_history JSON string A JSON string containing the order of pages the subject viewed (including when the subject returned to previous pages) and the time spent viewing each page. rt numeric The response time in milliseconds for the subject to view all of the pages.","title":"Data Generated"},{"location":"plugins/jspsych-instructions/#example","text":"","title":"Example"},{"location":"plugins/jspsych-instructions/#showing-simple-text-instructions","text":"var trial = { type : 'instructions' , pages : [ 'Welcome to the experiment. Click next to begin.' , 'This is the second page of instructions.' , 'This is the final page.' ], show_clickable_nav : true }","title":"Showing simple text instructions"},{"location":"plugins/jspsych-instructions/#including-images","text":"var trial = { type : 'instructions' , pages : [ 'Welcome to the experiment. Click next to begin.' , 'Here is a picture of what you will do: <img src=\"instruction_image.jpg\"></img>' ], show_clickable_nav : true }","title":"Including images"},{"location":"plugins/jspsych-maxdiff/","text":"jspsych-maxdiff plugin \u00b6 The maxdiff plugin displays a table with rows of alternatives to be selected for two mutually-exclusive categories, typically as 'most' or 'least' on a particular criteria (e.g. importance, preference, similarity). The participant responds by selecting one radio button corresponding to an alternative in both the left and right response columns. The same alternative cannot be endorsed on both the left and right response columns (e.g. 'most' and 'least') simultaneously. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description alternatives array undefined An array of one or more alternatives of string type to fill the rows of the maxdiff table. If required is true, then the array must contain two or more alternatives, so that at least one can be selected for both the left and right columns. labels array undefined An array with exactly two labels of string type to display as column headings (to the left and right of the alternatives) for responses on the criteria of interest. randomize_alternative_order boolean false If true, the display order of alternatives is randomly determined at the start of the trial. preamble string empty string HTML formatted string to display at the top of the page above the maxdiff table. required boolean false If true, prevents the user from submitting the response and proceeding until a radio button in both the left and right response columns has been selected. button_label string 'Continue' Label of the button. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the maxdiff table first appears on the screen until the subject's response. labels JSON string A string in JSON format containing the labels corresponding to the left and right response columns. left string The alternative endorsed on the left column. right string The alternative endorsed on the right column. Examples \u00b6 Basic example \u00b6 var maxdiff_page = { type : 'maxdiff' , alternatives : [ 'apple' , 'orange' , 'pear' , 'banana' ], labels : [ 'Most Preferred' , 'Least Preferred' ], preamble : '<p> Please select your <b>most preferred</b> and <b>least preferred</b> fruits. </p>' };","title":"jspsych-maxdiff"},{"location":"plugins/jspsych-maxdiff/#jspsych-maxdiff-plugin","text":"The maxdiff plugin displays a table with rows of alternatives to be selected for two mutually-exclusive categories, typically as 'most' or 'least' on a particular criteria (e.g. importance, preference, similarity). The participant responds by selecting one radio button corresponding to an alternative in both the left and right response columns. The same alternative cannot be endorsed on both the left and right response columns (e.g. 'most' and 'least') simultaneously.","title":"jspsych-maxdiff plugin"},{"location":"plugins/jspsych-maxdiff/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description alternatives array undefined An array of one or more alternatives of string type to fill the rows of the maxdiff table. If required is true, then the array must contain two or more alternatives, so that at least one can be selected for both the left and right columns. labels array undefined An array with exactly two labels of string type to display as column headings (to the left and right of the alternatives) for responses on the criteria of interest. randomize_alternative_order boolean false If true, the display order of alternatives is randomly determined at the start of the trial. preamble string empty string HTML formatted string to display at the top of the page above the maxdiff table. required boolean false If true, prevents the user from submitting the response and proceeding until a radio button in both the left and right response columns has been selected. button_label string 'Continue' Label of the button.","title":"Parameters"},{"location":"plugins/jspsych-maxdiff/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the maxdiff table first appears on the screen until the subject's response. labels JSON string A string in JSON format containing the labels corresponding to the left and right response columns. left string The alternative endorsed on the left column. right string The alternative endorsed on the right column.","title":"Data Generated"},{"location":"plugins/jspsych-maxdiff/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-maxdiff/#basic-example","text":"var maxdiff_page = { type : 'maxdiff' , alternatives : [ 'apple' , 'orange' , 'pear' , 'banana' ], labels : [ 'Most Preferred' , 'Least Preferred' ], preamble : '<p> Please select your <b>most preferred</b> and <b>least preferred</b> fruits. </p>' };","title":"Basic example"},{"location":"plugins/jspsych-rdk/","text":"jspsych-rdk plugin \u00b6 This plugin displays a Random Dot Kinematogram (RDK) and allows the subject to report the primary direction of motion by pressing a key on the keyboard. The stimulus can be displayed until a keyboard response is given or until a certain duration of time has passed. The RDK is fully customizable (see documentation below) and can display multiple apertures at the same time, each with its own parameters. We would appreciate it if you cited this paper when you use the RDK: Rajananda, S., Lau, H. & Odegaard, B., (2018). A Random-Dot Kinematogram for Web-Based Vision Research. Journal of Open Research Software. 6(1), p.6. DOI: [http://doi.org/10.5334/jors.194] For optimal performance, fullscreen mode should be manually triggered by the user (e.g. F11 key in Chrome for Windows). Usage of the default Fullscreen trigger from the JsPsych API library with this plugin might result in the stimuli being displayed incorrectly. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Descripton choices array [] The valid keys that the subject can press as a response. Must be an array of chars or numbers (corresponding to JavaScript character codes). If left unspecified, any key is a valid key. correct_choice array, char, or number undefined The keys that are considered the correct response for that particular trial. Can be a single char, a single number, an array of chars, or an array of numbers. Numbers here correspond to the JavaScript character codes. This needs to be linked with the coherent_direction parameter (See Examples section below for an illustration.) This is used to determine whether the subject chose the correct response. The boolean indicating whether or not the subject chose the correct response is returned in the correct key of the data object. trial_duration numeric 500 The amount of time that the stimulus is displayed on the screen in ms. If -1, the stimulus will be displayed until the subject keys in a valid response. ( choices parameter must contain valid keys or else the stimuli will run indefinitely). response_ends_trial boolean true If true, then the subject's response will end the trial. If false, the stimuli will be presented for the full trial_duration (the response will be recorded as long as the subject responds within the trial duration). number_of_apertures numeric 1 The number of apertures or RDKs on the screen. If set to more than one, remember to set the location (i.e., aperture_center_x and aperture_center_y) parameters to separate them. In addition, each aperture can be customized individually by passing in an array of values as the parameter (see example below). If a single value (not an array) is passed as the parameter, then all apertures will have the same parameter. number_of_dots numeric 300 Number of dots per set. Equivalent to number of dots per frame. number_of_sets numeric 1 Number of sets to cycle through. Each frame displays one set of dots. (E.g. If 2 sets of dots, frame 1 will display dots from set 1, frame 2 will display dots from set 2, frame 3 will display sets from set 1, etc.) coherent_direction numeric 0 The direction of movement for coherent dots in degrees. 0 degrees is in the 3 o'clock direction, and increasing this number moves counterclockwise. (E.g. 12 o'clock is 90, 9 o'clock is 180, etc.) Range is 0 - 360. coherence numeric 0.5 The proportion of dots that move together in the coherent direction. Range is 0 to 1. opposite_coherence numeric 0 The proportion of moving in the direction opposite of the coherent direction. Range is 0 to (1-coherence). dot_radius numeric 2 The radius of each individual dot in pixels. dot_life numeric -1 The number of frames that pass before a dot disappears and reappears in a new frame. -1 denotes that the dot life is infinite (i.e., a dot will only disappear and reappear if it moves out of the aperture). move_distance numeric 1 The number of pixel lengths the dot will move in each frame (analogous to speed of dots). aperture_width numeric 600 The width of the aperture in pixels. For a square aperture, this will determine both the width and height. For circular aperture, this will determine the diameter. aperture_height numeric 400 The height of the aperture in pixels. For square and circle apertures, this will be ignored. dot_color string \"white\" The color of the dots. background_color string \"gray\" The color of the background. RDK_type numeric 3 The Signal Selection Rule (Same/Different) and Noise Type (Random Position/Walk/Direction): 1 - Same && Random Position 2 - Same && Random Walk 3 - Same && Random Direction 4 - Different && Random Position 5 - Different && Random Walk 6 - Different && Random Direction (See 'RDK parameter' below for more detailed information) aperture_type numeric 2 The shape of the aperture. 1 - Circle 2 - Ellipse 3 - Square 4 - Rectangle reinsert_type numeric 2 The type of reinsertion of a dot that has gone out of bounds 1 - Randomly appear anywhere in the aperture 2 - Appear on the opposite edge of the aperture. For squares and rectangles, a random point on the opposite edge is chosen as the reinsertion point. For circles and ellipses, the exit point is reflected about center to become the reinsertion point. aperture_center_x numeric window.innerWidth/2 The x-coordinate of the center of the aperture, in pixels. aperture_center_y numeric window.innerHeight/2 The y-coordinate of the center of the aperture, in pixels. fixation_cross boolean false Whether or not a fixation cross is presented in the middle of the screen. fixation_cross_width numeric 20 The width of the fixation cross in pixels. fixation_cross_height numeric 20 The height of the fixation cross in pixels. fixation_cross_color string \"black\" The color of the fixation cross. fixation_cross_thickness numeric 1 The thickness of the fixation cross in pixels. border boolean false The presence of a border around the aperture. border_thickness numeric 1 The thickness of the border in pixels. border_color string \"black\" The color of the border. RDK type parameter \u00b6 ** See Fig. 1 in Scase, Braddick, and Raymond (1996) for a visual depiction of these different signal selection rules and noise types. Signal Selection rule: \u00b6 - Same : Each dot is designated to be either a coherent dot (signal) or incoherent dot (noise) and will remain so throughout all frames in the display. Coherent dots will always move in the direction of coherent motion in all frames. - Different : Each dot can be either a coherent dot (signal) or incoherent dot (noise) and will be designated randomly (weighted based on the coherence level) at each frame. Only the dots that are designated to be coherent dots will move in the direction of coherent motion, but only in that frame. In the next frame, each dot will be designated randomly again on whether it is a coherent or incoherent dot. Noise Type: \u00b6 - Random position : The incoherent dots appear in a random location in the aperture in each frame. - Random walk : The incoherent dots will move in a random direction (designated randomly in each frame) in each frame. - Random direction : Each incoherent dot has its own alternative direction of motion (designated randomly at the beginning of the trial), and moves in that direction in each frame. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects all parameter data described above and the following data for each trial. Name Type Value rt numeric The response time in ms for the subject to make a response. key_press numeric The key that the subject pressed. The value corresponds to the Javascript Char Code (Key Code). correct boolean Whether or not the subject's key press corresponded to those provided in correct_choice. frame_rate numeric The average frame rate for the trial. 0 denotes that the subject responded before the appearance of the second frame. number_of_frames numeric The number of frames that was shown in this trial. frame_rate_array JSON string The array that holds the number of miliseconds for each frame in this trial. canvas_width numeric The width of the canvas in pixels. canvas_height numeric The height of the canvas in pixels. Example \u00b6 Setting the correct_choice parameter by linking it to the coherent_direction parameter: \u00b6 var trial_right = { coherent_direction : 0 , correct_choice : \"P\" }; var trial_left = { coherent_direction : 180 , correct_choice : \"Q\" }; Displaying a trial with 2 choices and 1 correct choice \u00b6 var test_block = { type : \"rdk\" , post_trial_gap : 0 , number_of_dots : 200 , RDK_type : 3 , choices : [ \"a\" , \"l\" ], correct_choice : \"a\" , coherent_direction : 180 , trial_duration : 1000 }; Displaying a trial with multiple apertures \u00b6 var test_block = { type : \"rdk\" , number_of_apertures : 3 , //This needs to be set if more than one aperture trial_duration : 10000 , RDK_type : 3 , //Applied to all apertures if only one value aperture_width : 200 , //Applied to all apertures if only one value number_of_dots : [ 50 , 200 , 100 ], //Different parameter for each aperture. Array length must equal number_of_apertures aperture_center_x : [( window . innerWidth / 2 ) - 300 , window . innerWidth / 2 ,( window . innerWidth / 2 ) + 300 ] //Separate the apertures on the screen (window.innerWidth/2 is the middle of the screen) };","title":"jspsych-rdk"},{"location":"plugins/jspsych-rdk/#jspsych-rdk-plugin","text":"This plugin displays a Random Dot Kinematogram (RDK) and allows the subject to report the primary direction of motion by pressing a key on the keyboard. The stimulus can be displayed until a keyboard response is given or until a certain duration of time has passed. The RDK is fully customizable (see documentation below) and can display multiple apertures at the same time, each with its own parameters. We would appreciate it if you cited this paper when you use the RDK: Rajananda, S., Lau, H. & Odegaard, B., (2018). A Random-Dot Kinematogram for Web-Based Vision Research. Journal of Open Research Software. 6(1), p.6. DOI: [http://doi.org/10.5334/jors.194] For optimal performance, fullscreen mode should be manually triggered by the user (e.g. F11 key in Chrome for Windows). Usage of the default Fullscreen trigger from the JsPsych API library with this plugin might result in the stimuli being displayed incorrectly.","title":"jspsych-rdk plugin"},{"location":"plugins/jspsych-rdk/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Descripton choices array [] The valid keys that the subject can press as a response. Must be an array of chars or numbers (corresponding to JavaScript character codes). If left unspecified, any key is a valid key. correct_choice array, char, or number undefined The keys that are considered the correct response for that particular trial. Can be a single char, a single number, an array of chars, or an array of numbers. Numbers here correspond to the JavaScript character codes. This needs to be linked with the coherent_direction parameter (See Examples section below for an illustration.) This is used to determine whether the subject chose the correct response. The boolean indicating whether or not the subject chose the correct response is returned in the correct key of the data object. trial_duration numeric 500 The amount of time that the stimulus is displayed on the screen in ms. If -1, the stimulus will be displayed until the subject keys in a valid response. ( choices parameter must contain valid keys or else the stimuli will run indefinitely). response_ends_trial boolean true If true, then the subject's response will end the trial. If false, the stimuli will be presented for the full trial_duration (the response will be recorded as long as the subject responds within the trial duration). number_of_apertures numeric 1 The number of apertures or RDKs on the screen. If set to more than one, remember to set the location (i.e., aperture_center_x and aperture_center_y) parameters to separate them. In addition, each aperture can be customized individually by passing in an array of values as the parameter (see example below). If a single value (not an array) is passed as the parameter, then all apertures will have the same parameter. number_of_dots numeric 300 Number of dots per set. Equivalent to number of dots per frame. number_of_sets numeric 1 Number of sets to cycle through. Each frame displays one set of dots. (E.g. If 2 sets of dots, frame 1 will display dots from set 1, frame 2 will display dots from set 2, frame 3 will display sets from set 1, etc.) coherent_direction numeric 0 The direction of movement for coherent dots in degrees. 0 degrees is in the 3 o'clock direction, and increasing this number moves counterclockwise. (E.g. 12 o'clock is 90, 9 o'clock is 180, etc.) Range is 0 - 360. coherence numeric 0.5 The proportion of dots that move together in the coherent direction. Range is 0 to 1. opposite_coherence numeric 0 The proportion of moving in the direction opposite of the coherent direction. Range is 0 to (1-coherence). dot_radius numeric 2 The radius of each individual dot in pixels. dot_life numeric -1 The number of frames that pass before a dot disappears and reappears in a new frame. -1 denotes that the dot life is infinite (i.e., a dot will only disappear and reappear if it moves out of the aperture). move_distance numeric 1 The number of pixel lengths the dot will move in each frame (analogous to speed of dots). aperture_width numeric 600 The width of the aperture in pixels. For a square aperture, this will determine both the width and height. For circular aperture, this will determine the diameter. aperture_height numeric 400 The height of the aperture in pixels. For square and circle apertures, this will be ignored. dot_color string \"white\" The color of the dots. background_color string \"gray\" The color of the background. RDK_type numeric 3 The Signal Selection Rule (Same/Different) and Noise Type (Random Position/Walk/Direction): 1 - Same && Random Position 2 - Same && Random Walk 3 - Same && Random Direction 4 - Different && Random Position 5 - Different && Random Walk 6 - Different && Random Direction (See 'RDK parameter' below for more detailed information) aperture_type numeric 2 The shape of the aperture. 1 - Circle 2 - Ellipse 3 - Square 4 - Rectangle reinsert_type numeric 2 The type of reinsertion of a dot that has gone out of bounds 1 - Randomly appear anywhere in the aperture 2 - Appear on the opposite edge of the aperture. For squares and rectangles, a random point on the opposite edge is chosen as the reinsertion point. For circles and ellipses, the exit point is reflected about center to become the reinsertion point. aperture_center_x numeric window.innerWidth/2 The x-coordinate of the center of the aperture, in pixels. aperture_center_y numeric window.innerHeight/2 The y-coordinate of the center of the aperture, in pixels. fixation_cross boolean false Whether or not a fixation cross is presented in the middle of the screen. fixation_cross_width numeric 20 The width of the fixation cross in pixels. fixation_cross_height numeric 20 The height of the fixation cross in pixels. fixation_cross_color string \"black\" The color of the fixation cross. fixation_cross_thickness numeric 1 The thickness of the fixation cross in pixels. border boolean false The presence of a border around the aperture. border_thickness numeric 1 The thickness of the border in pixels. border_color string \"black\" The color of the border.","title":"Parameters"},{"location":"plugins/jspsych-rdk/#rdk-type-parameter","text":"** See Fig. 1 in Scase, Braddick, and Raymond (1996) for a visual depiction of these different signal selection rules and noise types.","title":"RDK type parameter"},{"location":"plugins/jspsych-rdk/#signal-selection-rule","text":"- Same : Each dot is designated to be either a coherent dot (signal) or incoherent dot (noise) and will remain so throughout all frames in the display. Coherent dots will always move in the direction of coherent motion in all frames. - Different : Each dot can be either a coherent dot (signal) or incoherent dot (noise) and will be designated randomly (weighted based on the coherence level) at each frame. Only the dots that are designated to be coherent dots will move in the direction of coherent motion, but only in that frame. In the next frame, each dot will be designated randomly again on whether it is a coherent or incoherent dot.","title":"Signal Selection rule:"},{"location":"plugins/jspsych-rdk/#noise-type","text":"- Random position : The incoherent dots appear in a random location in the aperture in each frame. - Random walk : The incoherent dots will move in a random direction (designated randomly in each frame) in each frame. - Random direction : Each incoherent dot has its own alternative direction of motion (designated randomly at the beginning of the trial), and moves in that direction in each frame.","title":"Noise Type:"},{"location":"plugins/jspsych-rdk/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects all parameter data described above and the following data for each trial. Name Type Value rt numeric The response time in ms for the subject to make a response. key_press numeric The key that the subject pressed. The value corresponds to the Javascript Char Code (Key Code). correct boolean Whether or not the subject's key press corresponded to those provided in correct_choice. frame_rate numeric The average frame rate for the trial. 0 denotes that the subject responded before the appearance of the second frame. number_of_frames numeric The number of frames that was shown in this trial. frame_rate_array JSON string The array that holds the number of miliseconds for each frame in this trial. canvas_width numeric The width of the canvas in pixels. canvas_height numeric The height of the canvas in pixels.","title":"Data Generated"},{"location":"plugins/jspsych-rdk/#example","text":"","title":"Example"},{"location":"plugins/jspsych-rdk/#setting-the-correct_choice-parameter-by-linking-it-to-the-coherent_direction-parameter","text":"var trial_right = { coherent_direction : 0 , correct_choice : \"P\" }; var trial_left = { coherent_direction : 180 , correct_choice : \"Q\" };","title":"Setting the correct_choice parameter by linking it to the coherent_direction parameter:"},{"location":"plugins/jspsych-rdk/#displaying-a-trial-with-2-choices-and-1-correct-choice","text":"var test_block = { type : \"rdk\" , post_trial_gap : 0 , number_of_dots : 200 , RDK_type : 3 , choices : [ \"a\" , \"l\" ], correct_choice : \"a\" , coherent_direction : 180 , trial_duration : 1000 };","title":"Displaying a trial with 2 choices and 1 correct choice"},{"location":"plugins/jspsych-rdk/#displaying-a-trial-with-multiple-apertures","text":"var test_block = { type : \"rdk\" , number_of_apertures : 3 , //This needs to be set if more than one aperture trial_duration : 10000 , RDK_type : 3 , //Applied to all apertures if only one value aperture_width : 200 , //Applied to all apertures if only one value number_of_dots : [ 50 , 200 , 100 ], //Different parameter for each aperture. Array length must equal number_of_apertures aperture_center_x : [( window . innerWidth / 2 ) - 300 , window . innerWidth / 2 ,( window . innerWidth / 2 ) + 300 ] //Separate the apertures on the screen (window.innerWidth/2 is the middle of the screen) };","title":"Displaying a trial with multiple apertures"},{"location":"plugins/jspsych-reconstruction/","text":"jspsych-reconstruction plugin \u00b6 This plugin allows a subject to interact with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time. The stimulus must be defined through a function that returns an HTML-formatted string. The function should take a single value, which is the parameter that can be modified by the subject. The value can only range from 0 to 1. See the example at the bottom of the page for a sample function. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stim_function function undefined A function with a single parameter that returns an HTML-formatted string representing the stimulus. starting_value numeric 0.5 The starting value of the stimulus parameter. step_size numeric 0.05 The change in the stimulus parameter caused by pressing one of the modification keys. key_increase key code 'h' The key to press for increasing the parameter value. key_decrease key code 'g' The key to press for decreasing the parameter value. button_label string 'Continue' The text that appears on the button to finish the trial. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value start_value numeric The starting value of the stimulus parameter. final_value numeric The final value of the stimulus parameter. rt numeric The length of time, in milliseconds, that the trial lasted. Examples \u00b6 Make a block larger and smaller \u00b6 var sample_function = function ( param ){ var size = 50 + Math . floor ( param * 250 ); var html = '<div style=\"display: block; margin: auto; height: 300px;\">' + '<div style=\"display: block; margin: auto; background-color: #000000; ' + 'width: ' + size + 'px; height: ' + size + 'px;\"></div></div>' ; return html ; } var trial = { type : 'reconstruction' , stim_function : sample_function , starting_value : 0.25 }","title":"jspsych-reconstruction"},{"location":"plugins/jspsych-reconstruction/#jspsych-reconstruction-plugin","text":"This plugin allows a subject to interact with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time. The stimulus must be defined through a function that returns an HTML-formatted string. The function should take a single value, which is the parameter that can be modified by the subject. The value can only range from 0 to 1. See the example at the bottom of the page for a sample function.","title":"jspsych-reconstruction plugin"},{"location":"plugins/jspsych-reconstruction/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stim_function function undefined A function with a single parameter that returns an HTML-formatted string representing the stimulus. starting_value numeric 0.5 The starting value of the stimulus parameter. step_size numeric 0.05 The change in the stimulus parameter caused by pressing one of the modification keys. key_increase key code 'h' The key to press for increasing the parameter value. key_decrease key code 'g' The key to press for decreasing the parameter value. button_label string 'Continue' The text that appears on the button to finish the trial.","title":"Parameters"},{"location":"plugins/jspsych-reconstruction/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value start_value numeric The starting value of the stimulus parameter. final_value numeric The final value of the stimulus parameter. rt numeric The length of time, in milliseconds, that the trial lasted.","title":"Data Generated"},{"location":"plugins/jspsych-reconstruction/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-reconstruction/#make-a-block-larger-and-smaller","text":"var sample_function = function ( param ){ var size = 50 + Math . floor ( param * 250 ); var html = '<div style=\"display: block; margin: auto; height: 300px;\">' + '<div style=\"display: block; margin: auto; background-color: #000000; ' + 'width: ' + size + 'px; height: ' + size + 'px;\"></div></div>' ; return html ; } var trial = { type : 'reconstruction' , stim_function : sample_function , starting_value : 0.25 }","title":"Make a block larger and smaller"},{"location":"plugins/jspsych-resize/","text":"jspsych-resize \u00b6 This plugin displays a resizable div container that allows the user to drag until the container is the same size as the item being measured. Once the user measures the item as close as possible, clicking the button sets a scaling factor for the div containing jsPsych content. This causes the stimuli that follow to have a known size, independent of monitor resolution. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description item_height numeric 1 The height of the item to be measured. Any units can be used as long as you are consistent with using the same units for all parameters. item_width numeric 1 The width of the item to be measured. pixels_per_unit numeric 100 After the scaling factor is applied, this many pixels will equal one unit of measurement. prompt string '' HTML content to display below the resizable box, and above the button. button_label string 'Continue' Label to display on the button to complete calibration. starting_size numeric 100 The initial size of the box, in pixels, along the largest dimension. The aspect ratio will be set automatically to match the item width and height. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value final_width_px numeric Final width of the resizable div container, in pixels. scale_factor numeric Scaling factor that will be applied to the div containing jsPsych content. Examples \u00b6 Measuring a credit card and resizing the display to have 150 pixels equal an inch. \u00b6 var inputs = { type : 'resize' , item_width : 3 + 3 / 8 , item_height : 2 + 1 / 8 , prompt : \"<p>Click and drag the lower right corner of the box until the box is the same size as a credit card held up to the screen.</p>\" , pixels_per_unit : 150 };","title":"jspsych-resize"},{"location":"plugins/jspsych-resize/#jspsych-resize","text":"This plugin displays a resizable div container that allows the user to drag until the container is the same size as the item being measured. Once the user measures the item as close as possible, clicking the button sets a scaling factor for the div containing jsPsych content. This causes the stimuli that follow to have a known size, independent of monitor resolution.","title":"jspsych-resize"},{"location":"plugins/jspsych-resize/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description item_height numeric 1 The height of the item to be measured. Any units can be used as long as you are consistent with using the same units for all parameters. item_width numeric 1 The width of the item to be measured. pixels_per_unit numeric 100 After the scaling factor is applied, this many pixels will equal one unit of measurement. prompt string '' HTML content to display below the resizable box, and above the button. button_label string 'Continue' Label to display on the button to complete calibration. starting_size numeric 100 The initial size of the box, in pixels, along the largest dimension. The aspect ratio will be set automatically to match the item width and height.","title":"Parameters"},{"location":"plugins/jspsych-resize/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value final_width_px numeric Final width of the resizable div container, in pixels. scale_factor numeric Scaling factor that will be applied to the div containing jsPsych content.","title":"Data Generated"},{"location":"plugins/jspsych-resize/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-resize/#measuring-a-credit-card-and-resizing-the-display-to-have-150-pixels-equal-an-inch","text":"var inputs = { type : 'resize' , item_width : 3 + 3 / 8 , item_height : 2 + 1 / 8 , prompt : \"<p>Click and drag the lower right corner of the box until the box is the same size as a credit card held up to the screen.</p>\" , pixels_per_unit : 150 };","title":"Measuring a credit card and resizing the display to have 150 pixels equal an inch."},{"location":"plugins/jspsych-same-different-html/","text":"jspsych-same-different-html plugin \u00b6 The same-different-html plugin displays two stimuli sequentially. Stimuli are HTML objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined A pair of stimuli, represented as an array with two entries, one for each stimulus. A stimulus is a string containing valid HTML markup. Stimuli will be shown in the order that they are defined in the array. answer string undefined Either 'same' or 'different' . same_key numeric or string 'Q' The key that subjects should press to indicate that the two stimuli are the same. different_key numeric or string 'P' The key that subjects should press to indicate that the two stimuli are different. first_stim_duration numeric 1000 How long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject presses any key. gap_duration numeric 500 How long to show a blank screen in between the two stimuli. second_stim_duration numeric 1000 How long to show the second stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject responds. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string An JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response. correct boolean true if the subject's response matched the answer for this trial. answer string The correct answer to the trial, either 'same' or 'different' . Additionally, if first_stim_duration is null, then the following data is also collected: Name Type Value rt_stim1 numeric The response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response. key_press_stim1 numeric Indicates which key the subject pressed to continue. The value is the numeric key code corresponding to the subject's response. Examples \u00b6 Basic example \u00b6 var trial = { type : 'same-different-html' , stimuli : [ '<p>Climbing</p>' , '<p>Walking</p>' ], prompt : \"<p>Press S if the texts imply the same amount of physical exertion. Press D if the texts imply different amount of physical exertion.</p>\" , same_key : 'S' , different_key : 'D' , answer : 'different' }","title":"jspsych-same-different-html"},{"location":"plugins/jspsych-same-different-html/#jspsych-same-different-html-plugin","text":"The same-different-html plugin displays two stimuli sequentially. Stimuli are HTML objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example.","title":"jspsych-same-different-html plugin"},{"location":"plugins/jspsych-same-different-html/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined A pair of stimuli, represented as an array with two entries, one for each stimulus. A stimulus is a string containing valid HTML markup. Stimuli will be shown in the order that they are defined in the array. answer string undefined Either 'same' or 'different' . same_key numeric or string 'Q' The key that subjects should press to indicate that the two stimuli are the same. different_key numeric or string 'P' The key that subjects should press to indicate that the two stimuli are different. first_stim_duration numeric 1000 How long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject presses any key. gap_duration numeric 500 How long to show a blank screen in between the two stimuli. second_stim_duration numeric 1000 How long to show the second stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject responds. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).","title":"Parameters"},{"location":"plugins/jspsych-same-different-html/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string An JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response. correct boolean true if the subject's response matched the answer for this trial. answer string The correct answer to the trial, either 'same' or 'different' . Additionally, if first_stim_duration is null, then the following data is also collected: Name Type Value rt_stim1 numeric The response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response. key_press_stim1 numeric Indicates which key the subject pressed to continue. The value is the numeric key code corresponding to the subject's response.","title":"Data Generated"},{"location":"plugins/jspsych-same-different-html/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-same-different-html/#basic-example","text":"var trial = { type : 'same-different-html' , stimuli : [ '<p>Climbing</p>' , '<p>Walking</p>' ], prompt : \"<p>Press S if the texts imply the same amount of physical exertion. Press D if the texts imply different amount of physical exertion.</p>\" , same_key : 'S' , different_key : 'D' , answer : 'different' }","title":"Basic example"},{"location":"plugins/jspsych-same-different-image/","text":"jspsych-same-different plugin \u00b6 The same-different plugin displays two stimuli sequentially. Stimuli are image objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined A pair of stimuli, represented as an array with two entries, one for each stimulus. The stimulus is a path to an image file. Stimuli will be shown in the order that they are defined in the array. answer string undefined Either 'same' or 'different' . same_key numeric or string 'Q' The key that subjects should press to indicate that the two stimuli are the same. different_key numeric or string 'P' The key that subjects should press to indicate that the two stimuli are different. first_stim_duration numeric 1000 How long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject presses any key. gap_duration numeric 500 How long to show a blank screen in between the two stimuli. second_stim_duration numeric 1000 How long to show the second stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject responds. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string An JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response. correct boolean true if the subject's response matched the answer for this trial. answer string The correct answer to the trial, either 'same' or 'different' . Additionally, if first_stim_duration is null, then the following data is also collected: Name Type Value rt_stim1 numeric The response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response. key_press_stim1 numeric Indicates which key the subject pressed to continue. The value is the numeric key code corresponding to the subject's response. Examples \u00b6 Presenting two different emotional expressions \u00b6 var block = { type : 'same-different-image' , stimuli : [ 'img/happy_face_1.jpg' , 'img/sad_face_3.jpg' ], prompt : \"<p>Press S if the faces had the same emotional expression. Press D if the faces had different emotional expressions.</p>\" , same_key : 'S' , different_key : 'D' , answer : 'different' } Presenting the same emotional expression \u00b6 var block = { type : 'same-different-image' , stimuli : [ 'img/happy_face_1.jpg' , 'img/happy_face_3.jpg' ], prompt : \"<p>Press S if the faces had the same emotional expression. Press D if the faces had different emotional expressions.</p>\" , same_key : 'S' , different_key : 'D' , answer : 'same' }","title":"jspsych-same-different-image"},{"location":"plugins/jspsych-same-different-image/#jspsych-same-different-plugin","text":"The same-different plugin displays two stimuli sequentially. Stimuli are image objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example.","title":"jspsych-same-different plugin"},{"location":"plugins/jspsych-same-different-image/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined A pair of stimuli, represented as an array with two entries, one for each stimulus. The stimulus is a path to an image file. Stimuli will be shown in the order that they are defined in the array. answer string undefined Either 'same' or 'different' . same_key numeric or string 'Q' The key that subjects should press to indicate that the two stimuli are the same. different_key numeric or string 'P' The key that subjects should press to indicate that the two stimuli are different. first_stim_duration numeric 1000 How long to show the first stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject presses any key. gap_duration numeric 500 How long to show a blank screen in between the two stimuli. second_stim_duration numeric 1000 How long to show the second stimulus for in milliseconds. If the value of this parameter is null then the stimulus will be shown until the subject responds. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press).","title":"Parameters"},{"location":"plugins/jspsych-same-different-image/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus string An JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response. correct boolean true if the subject's response matched the answer for this trial. answer string The correct answer to the trial, either 'same' or 'different' . Additionally, if first_stim_duration is null, then the following data is also collected: Name Type Value rt_stim1 numeric The response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response. key_press_stim1 numeric Indicates which key the subject pressed to continue. The value is the numeric key code corresponding to the subject's response.","title":"Data Generated"},{"location":"plugins/jspsych-same-different-image/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-same-different-image/#presenting-two-different-emotional-expressions","text":"var block = { type : 'same-different-image' , stimuli : [ 'img/happy_face_1.jpg' , 'img/sad_face_3.jpg' ], prompt : \"<p>Press S if the faces had the same emotional expression. Press D if the faces had different emotional expressions.</p>\" , same_key : 'S' , different_key : 'D' , answer : 'different' }","title":"Presenting two different emotional expressions"},{"location":"plugins/jspsych-same-different-image/#presenting-the-same-emotional-expression","text":"var block = { type : 'same-different-image' , stimuli : [ 'img/happy_face_1.jpg' , 'img/happy_face_3.jpg' ], prompt : \"<p>Press S if the faces had the same emotional expression. Press D if the faces had different emotional expressions.</p>\" , same_key : 'S' , different_key : 'D' , answer : 'same' }","title":"Presenting the same emotional expression"},{"location":"plugins/jspsych-serial-reaction-time-mouse/","text":"jspsych-serial-reaction-time-mouse plugin \u00b6 The serial reaction time mouse plugin implements a generalized version of the SRT task (Nissen & Bullmer, 1987) . Squares are displayed in a grid-based system on the screen, and one square changes color. The participant must click on the square that changes color. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description target array undefined The location of the target. The array should be the [row, column] of the target. grid array [[1,1,1,1]] This array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is 1 then a square will be drawn at that location on the grid. If an entry is 0 then the corresponding location on the grid will be empty. Thus, by mixing 1 s and 0 s it is possible to create many different grid-based arrangements. grid_square_size numeric 100 The width and height in pixels of each square in the grid. target_color hex color code #999 The color of the target square. response_ends_trial boolean true If true, the trial ends after a key press. Feedback is displayed if show_response_feedback is true. pre_target_duration numeric 0 The number of milliseconds to display the grid before the target changes color. trial_duration numeric null The maximum length of time of the trial, not including feedback. fade_duration numeric null If a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds. allow_nontarget_responses boolean false If true, the user can make nontarget response. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which keys to press). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value grid JSON A JSON-encoded representation of the grid. target JSON A JSON-encoded representation of the target on the grid. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response. Examples \u00b6 Basic example with four squares in a single row \u00b6 var trial = { type : 'serial-reaction-time-mouse' , grid : [[ 1 , 1 , 1 , 1 ]], target : [ 0 , 1 ] } 2x2 grid with extra space in the middle \u00b6 var trial = { type : 'serial-reaction-time-mouse' , grid : [[ 1 , 0 , 1 ],[ 0 , 0 , 0 ],[ 1 , 0 , 1 ]], target : [ 0 , 2 ] }","title":"jspsych-serial-reaction-time-mouse"},{"location":"plugins/jspsych-serial-reaction-time-mouse/#jspsych-serial-reaction-time-mouse-plugin","text":"The serial reaction time mouse plugin implements a generalized version of the SRT task (Nissen & Bullmer, 1987) . Squares are displayed in a grid-based system on the screen, and one square changes color. The participant must click on the square that changes color.","title":"jspsych-serial-reaction-time-mouse plugin"},{"location":"plugins/jspsych-serial-reaction-time-mouse/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description target array undefined The location of the target. The array should be the [row, column] of the target. grid array [[1,1,1,1]] This array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is 1 then a square will be drawn at that location on the grid. If an entry is 0 then the corresponding location on the grid will be empty. Thus, by mixing 1 s and 0 s it is possible to create many different grid-based arrangements. grid_square_size numeric 100 The width and height in pixels of each square in the grid. target_color hex color code #999 The color of the target square. response_ends_trial boolean true If true, the trial ends after a key press. Feedback is displayed if show_response_feedback is true. pre_target_duration numeric 0 The number of milliseconds to display the grid before the target changes color. trial_duration numeric null The maximum length of time of the trial, not including feedback. fade_duration numeric null If a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds. allow_nontarget_responses boolean false If true, the user can make nontarget response. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which keys to press).","title":"Parameters"},{"location":"plugins/jspsych-serial-reaction-time-mouse/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value grid JSON A JSON-encoded representation of the grid. target JSON A JSON-encoded representation of the target on the grid. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.","title":"Data Generated"},{"location":"plugins/jspsych-serial-reaction-time-mouse/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-serial-reaction-time-mouse/#basic-example-with-four-squares-in-a-single-row","text":"var trial = { type : 'serial-reaction-time-mouse' , grid : [[ 1 , 1 , 1 , 1 ]], target : [ 0 , 1 ] }","title":"Basic example with four squares in a single row"},{"location":"plugins/jspsych-serial-reaction-time-mouse/#2x2-grid-with-extra-space-in-the-middle","text":"var trial = { type : 'serial-reaction-time-mouse' , grid : [[ 1 , 0 , 1 ],[ 0 , 0 , 0 ],[ 1 , 0 , 1 ]], target : [ 0 , 2 ] }","title":"2x2 grid with extra space in the middle"},{"location":"plugins/jspsych-serial-reaction-time/","text":"jspsych-serial-reaction-time plugin \u00b6 The serial reaction time plugin implements a generalized version of the SRT task (Nissen & Bullemer, 1987) . Squares are displayed in a grid-based system on the screen, and one square changes color. The participant presses a key that corresponds to the darkened key. Feedback is optionally displayed, showing the participant which square the key they pressed matches. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description target array undefined The location of the target. The array should be the [row, column] of the target. grid array [[1,1,1,1]] This array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is 1 then a square will be drawn at that location on the grid. If an entry is 0 then the corresponding location on the grid will be empty. Thus, by mixing 1 s and 0 s it is possible to create many different grid-based arrangements. choices array [['3','5','7','9']] The dimensions of this array must match the dimensions of grid . Each entry in this array is the key that should be pressed for that corresponding location in the grid. Entries can be left blank if there is no key associated with that location of the grid. grid_square_size numeric 100 The width and height in pixels of each square in the grid. target_color hex color code #999 The color of the target square. response_ends_trial boolean true If true, the trial ends after a key press. Feedback is displayed if show_response_feedback is true. pre_target_duration numeric 0 The number of milliseconds to display the grid before the target changes color. trial_duration numeric null The maximum length of time of the trial, not including feedback. show_response_feedback boolean false If true, show feedback indicating where the user responded and whether it was correct. feedback_duration numeric 200 The length of time in milliseconds to show the feedback. fade_duration numeric null If a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which keys to press). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value grid JSON A JSON-encoded representation of the grid. target JSON A JSON-encoded representation of the target on the grid. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response. correct boolean true if the subject's response matched the target. Examples \u00b6 Basic example with four squares in a single row \u00b6 var trial = { type : 'serial-reaction-time' , grid : [[ 1 , 1 , 1 , 1 ]], target : [ 0 , 1 ] } 2x2 grid, Showing feedback for 500ms \u00b6 var trial = { type : 'serial-reaction-time' , grid : [[ 1 , 1 ],[ 1 , 1 ]], choices : [[ 'r' , 't' ],[ 'f' , 'g' ]], target : [ 1 , 0 ], show_response_feedback : true , feedback_duration : 500 }","title":"jspsych-serial-reaction-time"},{"location":"plugins/jspsych-serial-reaction-time/#jspsych-serial-reaction-time-plugin","text":"The serial reaction time plugin implements a generalized version of the SRT task (Nissen & Bullemer, 1987) . Squares are displayed in a grid-based system on the screen, and one square changes color. The participant presses a key that corresponds to the darkened key. Feedback is optionally displayed, showing the participant which square the key they pressed matches.","title":"jspsych-serial-reaction-time plugin"},{"location":"plugins/jspsych-serial-reaction-time/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description target array undefined The location of the target. The array should be the [row, column] of the target. grid array [[1,1,1,1]] This array represents the grid of boxes shown on the screen. Each inner array represents a single row. The entries in the inner arrays represent the columns. If an entry is 1 then a square will be drawn at that location on the grid. If an entry is 0 then the corresponding location on the grid will be empty. Thus, by mixing 1 s and 0 s it is possible to create many different grid-based arrangements. choices array [['3','5','7','9']] The dimensions of this array must match the dimensions of grid . Each entry in this array is the key that should be pressed for that corresponding location in the grid. Entries can be left blank if there is no key associated with that location of the grid. grid_square_size numeric 100 The width and height in pixels of each square in the grid. target_color hex color code #999 The color of the target square. response_ends_trial boolean true If true, the trial ends after a key press. Feedback is displayed if show_response_feedback is true. pre_target_duration numeric 0 The number of milliseconds to display the grid before the target changes color. trial_duration numeric null The maximum length of time of the trial, not including feedback. show_response_feedback boolean false If true, show feedback indicating where the user responded and whether it was correct. feedback_duration numeric 200 The length of time in milliseconds to show the feedback. fade_duration numeric null If a positive number, the target will progressively change color at the start of the trial, with the transition lasting this many milliseconds. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which keys to press).","title":"Parameters"},{"location":"plugins/jspsych-serial-reaction-time/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value grid JSON A JSON-encoded representation of the grid. target JSON A JSON-encoded representation of the target on the grid. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response. correct boolean true if the subject's response matched the target.","title":"Data Generated"},{"location":"plugins/jspsych-serial-reaction-time/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-serial-reaction-time/#basic-example-with-four-squares-in-a-single-row","text":"var trial = { type : 'serial-reaction-time' , grid : [[ 1 , 1 , 1 , 1 ]], target : [ 0 , 1 ] }","title":"Basic example with four squares in a single row"},{"location":"plugins/jspsych-serial-reaction-time/#2x2-grid-showing-feedback-for-500ms","text":"var trial = { type : 'serial-reaction-time' , grid : [[ 1 , 1 ],[ 1 , 1 ]], choices : [[ 'r' , 't' ],[ 'f' , 'g' ]], target : [ 1 , 0 ], show_response_feedback : true , feedback_duration : 500 }","title":"2x2 grid, Showing feedback for 500ms"},{"location":"plugins/jspsych-survey-html-form/","text":"jspsych-survey-html-form plugin \u00b6 The survey-html-form plugin displays a set of <inputs> from a HTML string. The type of input can be freely chosen, for a list of possible input types see the MDN page on inputs . The subject provides answers to the input fields. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description html string undefined HTML formatted string containing all the input elements to display. Every element has to have its own distinctive name attribute. The <form> tag must not be included and is generated by the plugin. This string can contain other HTML elements besides the input fields. preamble string empty string HTML formatted string to display at the top of the page above all the questions. button_label string 'Continue' The text that appears on the button to finish the trial. dataAsArray boolean false Retrieve the data as an array e.g. [{name: \"INPUT_NAME\", value: \"INPUT_VALUE\"}, ...] instead of an object e.g. {INPUT_NAME: INPUT_VALUE, ...}. This might be useful if you omit naming your inputs. autofocus string empty string The HTML element ID of a form field to autofocus on. The focused element is the element that will receive keyboard events. For elements like <input type=\"text\"> or <textbox> , autofocus means that the cursor will appear in the text input area when the trial loads. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses string A JS object encoded in JSON format containing the response for each input. The encoded object will have a separate variable for the response to each input, with each variable being named after its corresponding input element. Each response is a string containing whatever the subject answered for this particular input. rt numeric The response time in milliseconds for the subject to make a response. Examples \u00b6 Basic example \u00b6 var form_trial = { type : 'survey-html-form' , preamble : '<p> How are you feeling <b>right now?</b> </p>' , html : '<p> I am feeling <input name=\"first\" type=\"text\" />, <input name=\"second\" type=\"text\" />, and <input name=\"third\" type=\"text\" />.</p>' }; Example using the autofocus parameter \u00b6 In this example, the browser will focus on the element with the ID test-resp-box when the trial loads. For <input type=\"text\"> elements, this means that the cursor will appear inside the text box. var autofocus_trial = { type : 'survey-html-form' , preamble : '<p> What is your favorite bird?</p>' , html : '<p>My favorite bird is <input type=\"text\" id=\"test-resp-box\" name=\"response\" size=\"10\" /></p>' , autofocus : 'test-resp-box' };","title":"jspsych-survey-html-form"},{"location":"plugins/jspsych-survey-html-form/#jspsych-survey-html-form-plugin","text":"The survey-html-form plugin displays a set of <inputs> from a HTML string. The type of input can be freely chosen, for a list of possible input types see the MDN page on inputs . The subject provides answers to the input fields.","title":"jspsych-survey-html-form plugin"},{"location":"plugins/jspsych-survey-html-form/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description html string undefined HTML formatted string containing all the input elements to display. Every element has to have its own distinctive name attribute. The <form> tag must not be included and is generated by the plugin. This string can contain other HTML elements besides the input fields. preamble string empty string HTML formatted string to display at the top of the page above all the questions. button_label string 'Continue' The text that appears on the button to finish the trial. dataAsArray boolean false Retrieve the data as an array e.g. [{name: \"INPUT_NAME\", value: \"INPUT_VALUE\"}, ...] instead of an object e.g. {INPUT_NAME: INPUT_VALUE, ...}. This might be useful if you omit naming your inputs. autofocus string empty string The HTML element ID of a form field to autofocus on. The focused element is the element that will receive keyboard events. For elements like <input type=\"text\"> or <textbox> , autofocus means that the cursor will appear in the text input area when the trial loads. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form.","title":"Parameters"},{"location":"plugins/jspsych-survey-html-form/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses string A JS object encoded in JSON format containing the response for each input. The encoded object will have a separate variable for the response to each input, with each variable being named after its corresponding input element. Each response is a string containing whatever the subject answered for this particular input. rt numeric The response time in milliseconds for the subject to make a response.","title":"Data Generated"},{"location":"plugins/jspsych-survey-html-form/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-survey-html-form/#basic-example","text":"var form_trial = { type : 'survey-html-form' , preamble : '<p> How are you feeling <b>right now?</b> </p>' , html : '<p> I am feeling <input name=\"first\" type=\"text\" />, <input name=\"second\" type=\"text\" />, and <input name=\"third\" type=\"text\" />.</p>' };","title":"Basic example"},{"location":"plugins/jspsych-survey-html-form/#example-using-the-autofocus-parameter","text":"In this example, the browser will focus on the element with the ID test-resp-box when the trial loads. For <input type=\"text\"> elements, this means that the cursor will appear inside the text box. var autofocus_trial = { type : 'survey-html-form' , preamble : '<p> What is your favorite bird?</p>' , html : '<p>My favorite bird is <input type=\"text\" id=\"test-resp-box\" name=\"response\" size=\"10\" /></p>' , autofocus : 'test-resp-box' };","title":"Example using the autofocus parameter"},{"location":"plugins/jspsych-survey-likert/","text":"jspsych-survey-likert plugin \u00b6 The survey-likert plugin displays a set of questions with Likert scale responses. The subject responds by selecting a radio button. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description questions array undefined An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, labels and required parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value is undefined . The strings are the question that will be associated with a slider. labels : Type array, default value is undefined . Each array element is an array of strings. The innermost arrays contain a set of labels to display for an individual question. If you want to use blank responses and only label the end points or some subset of the options, just insert a blank string for the unlabeled responses. required : Type boolean, default value is false. Makes answering questions required. name : Name of the question. Used for storing data. If left undefined then default names ( Q0 , Q1 , ... ) will be used for the questions. randomize_question_order boolean false If true, the display order of questions is randomly determined at the start of the trial. In the data object, Q0 will still refer to the first question in the array, regardless of where it was presented visually. preamble string empty string HTML formatted string to display at the top of the page above all the questions. scale_width numeric null The width of the likert scale in pixels. If left null , then the width of the scale will be equal to the width of the widest content on the page. button_label string 'Continue' Label of the button. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses JSON string A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in Q0 , the second in Q1 , and so on. The responses are recorded as integers, representing the position of the slider on the scale. If the name parameter is defined for the question, then the response will use the value of name as the key for the response in the responses object. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response. question_order JSON string A string in JSON format containing an array with the order of questions. For example [2,0,1] would indicate that the first question was trial.questions[2] (the third item in the questions parameter), the second question was trial.questions[0] , and the final question was trial.questions[1] . Examples \u00b6 Basic example \u00b6 var scale_1 = [ \"Strongly Disagree\" , \"Disagree\" , \"Neutral\" , \"Agree\" , \"Strongly Agree\" ]; var likert_page = { type : 'survey-likert' , questions : [ { prompt : \"I like vegetables.\" , labels : scale_1 } ] }; Multiple questions in a random order \u00b6 var scale_1 = [ \"Strongly Disagree\" , \"Disagree\" , \"Neutral\" , \"Agree\" , \"Strongly Agree\" ]; var likert_page = { type : 'survey-likert' , questions : [ { prompt : \"I like vegetables.\" , name : 'Vegetables' , labels : scale_1 }, { prompt : \"I like fruit.\" , name : 'Fruit' , labels : scale_1 }, { prompt : \"I like meat.\" , name : 'Meat' , labels : scale_1 }, { prompt : \"I like dairy.\" , name : 'Dairy' , labels : scale_1 } ], randomize_question_order : true };","title":"jspsych-survey-likert"},{"location":"plugins/jspsych-survey-likert/#jspsych-survey-likert-plugin","text":"The survey-likert plugin displays a set of questions with Likert scale responses. The subject responds by selecting a radio button.","title":"jspsych-survey-likert plugin"},{"location":"plugins/jspsych-survey-likert/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description questions array undefined An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, labels and required parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value is undefined . The strings are the question that will be associated with a slider. labels : Type array, default value is undefined . Each array element is an array of strings. The innermost arrays contain a set of labels to display for an individual question. If you want to use blank responses and only label the end points or some subset of the options, just insert a blank string for the unlabeled responses. required : Type boolean, default value is false. Makes answering questions required. name : Name of the question. Used for storing data. If left undefined then default names ( Q0 , Q1 , ... ) will be used for the questions. randomize_question_order boolean false If true, the display order of questions is randomly determined at the start of the trial. In the data object, Q0 will still refer to the first question in the array, regardless of where it was presented visually. preamble string empty string HTML formatted string to display at the top of the page above all the questions. scale_width numeric null The width of the likert scale in pixels. If left null , then the width of the scale will be equal to the width of the widest content on the page. button_label string 'Continue' Label of the button. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form.","title":"Parameters"},{"location":"plugins/jspsych-survey-likert/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses JSON string A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in Q0 , the second in Q1 , and so on. The responses are recorded as integers, representing the position of the slider on the scale. If the name parameter is defined for the question, then the response will use the value of name as the key for the response in the responses object. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response. question_order JSON string A string in JSON format containing an array with the order of questions. For example [2,0,1] would indicate that the first question was trial.questions[2] (the third item in the questions parameter), the second question was trial.questions[0] , and the final question was trial.questions[1] .","title":"Data Generated"},{"location":"plugins/jspsych-survey-likert/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-survey-likert/#basic-example","text":"var scale_1 = [ \"Strongly Disagree\" , \"Disagree\" , \"Neutral\" , \"Agree\" , \"Strongly Agree\" ]; var likert_page = { type : 'survey-likert' , questions : [ { prompt : \"I like vegetables.\" , labels : scale_1 } ] };","title":"Basic example"},{"location":"plugins/jspsych-survey-likert/#multiple-questions-in-a-random-order","text":"var scale_1 = [ \"Strongly Disagree\" , \"Disagree\" , \"Neutral\" , \"Agree\" , \"Strongly Agree\" ]; var likert_page = { type : 'survey-likert' , questions : [ { prompt : \"I like vegetables.\" , name : 'Vegetables' , labels : scale_1 }, { prompt : \"I like fruit.\" , name : 'Fruit' , labels : scale_1 }, { prompt : \"I like meat.\" , name : 'Meat' , labels : scale_1 }, { prompt : \"I like dairy.\" , name : 'Dairy' , labels : scale_1 } ], randomize_question_order : true };","title":"Multiple questions in a random order"},{"location":"plugins/jspsych-survey-multi-choice/","text":"jspsych-survey-multi-choice plugin \u00b6 The survey-multi-choice plugin displays a set of questions with multiple choice response fields. The subject selects a single answer. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description questions array undefined An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, options, required, and horizontal parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value is undefined . The string is prompt/question that will be associated with a group of options (radio buttons). All questions will get presented on the same page (trial). options : Type array, defualt value is undefined . An array of strings. The array contains a set of options to display for an individual question. required : Type boolean, default value is null. The boolean value indicates if a question is required('true') or not ('false'), using the HTML5 required attribute. If this parameter is undefined, the question will be optional. horizontal :Type boolean, default value is false. If true, then the question is centered and the options are displayed horizontally. name : Name of the question. Used for storing data. If left undefined then default names ( Q0 , Q1 , ... ) will be used for the questions. randomize_question_order boolean false If true, the display order of questions is randomly determined at the start of the trial. In the data object, Q0 will still refer to the first question in the array, regardless of where it was presented visually. preamble string empty string HTML formatted string to display at the top of the page above all the questions. button_label string 'Continue' Label of the button. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses JSON string A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in Q0 , the second in Q1 , and so on. The responses are recorded as the name of the option label. If the name parameter is defined for the question, then the response will use the value of name as the key for the response in the responses object. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response. question_order JSON string A string in JSON format containing an array with the order of questions. For example [2,0,1] would indicate that the first question was trial.questions[2] (the third item in the questions parameter), the second question was trial.questions[0] , and the final question was trial.questions[1] . Examples \u00b6 var page_1_options = [ \"Strongly Disagree\" , \"Disagree\" , \"Neutral\" , \"Agree\" , \"Strongly Agree\" ]; var page_2_options = [ \"Strongly Disagree\" , \"Disagree\" , \"Somewhat Disagree\" , \"Neural\" , \"Somewhat Agree\" , \"Agree\" , \"Strongly Agree\" ]; var multi_choice_block = { type : 'survey-multi-choice' , questions : [ { prompt : \"I like vegetables\" , name : 'Vegetables' , options : page_1_options , required : true }, { prompt : \"I like fruit\" , name : 'Fruit' , options : page_2_options , required : false } ], }; var multi_choice_block_horizontal = { type : 'survey-multi-choice' , questions : [ { prompt : \"I like vegetables\" , options : page_1_options , required : true , horizontal : true ,}, { prompt : \"I like fruit\" , options : page_2_options , required : false , horizontal : true } ], };","title":"jspsych-survey-multi-choice"},{"location":"plugins/jspsych-survey-multi-choice/#jspsych-survey-multi-choice-plugin","text":"The survey-multi-choice plugin displays a set of questions with multiple choice response fields. The subject selects a single answer.","title":"jspsych-survey-multi-choice plugin"},{"location":"plugins/jspsych-survey-multi-choice/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description questions array undefined An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, options, required, and horizontal parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value is undefined . The string is prompt/question that will be associated with a group of options (radio buttons). All questions will get presented on the same page (trial). options : Type array, defualt value is undefined . An array of strings. The array contains a set of options to display for an individual question. required : Type boolean, default value is null. The boolean value indicates if a question is required('true') or not ('false'), using the HTML5 required attribute. If this parameter is undefined, the question will be optional. horizontal :Type boolean, default value is false. If true, then the question is centered and the options are displayed horizontally. name : Name of the question. Used for storing data. If left undefined then default names ( Q0 , Q1 , ... ) will be used for the questions. randomize_question_order boolean false If true, the display order of questions is randomly determined at the start of the trial. In the data object, Q0 will still refer to the first question in the array, regardless of where it was presented visually. preamble string empty string HTML formatted string to display at the top of the page above all the questions. button_label string 'Continue' Label of the button. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form.","title":"Parameters"},{"location":"plugins/jspsych-survey-multi-choice/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses JSON string A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in Q0 , the second in Q1 , and so on. The responses are recorded as the name of the option label. If the name parameter is defined for the question, then the response will use the value of name as the key for the response in the responses object. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response. question_order JSON string A string in JSON format containing an array with the order of questions. For example [2,0,1] would indicate that the first question was trial.questions[2] (the third item in the questions parameter), the second question was trial.questions[0] , and the final question was trial.questions[1] .","title":"Data Generated"},{"location":"plugins/jspsych-survey-multi-choice/#examples","text":"var page_1_options = [ \"Strongly Disagree\" , \"Disagree\" , \"Neutral\" , \"Agree\" , \"Strongly Agree\" ]; var page_2_options = [ \"Strongly Disagree\" , \"Disagree\" , \"Somewhat Disagree\" , \"Neural\" , \"Somewhat Agree\" , \"Agree\" , \"Strongly Agree\" ]; var multi_choice_block = { type : 'survey-multi-choice' , questions : [ { prompt : \"I like vegetables\" , name : 'Vegetables' , options : page_1_options , required : true }, { prompt : \"I like fruit\" , name : 'Fruit' , options : page_2_options , required : false } ], }; var multi_choice_block_horizontal = { type : 'survey-multi-choice' , questions : [ { prompt : \"I like vegetables\" , options : page_1_options , required : true , horizontal : true ,}, { prompt : \"I like fruit\" , options : page_2_options , required : false , horizontal : true } ], };","title":"Examples"},{"location":"plugins/jspsych-survey-multi-select/","text":"jspsych-survey-multi-select plugin \u00b6 The survey-multi-select plugin displays a set of questions with multiple select response fields. The subject could select multiple answers. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description questions array undefined An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, options and horizontal parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value of undefined . The string is the prompt/question that will be associated with a group of options (check boxes). All questions will get presented on the same page (trial). options : Type array, default value of undefined . The array contains a set of options to display for an individual question. horizontal : Type boolean, default value of false. If true, the questions are centered and options are displayed horizontally. required : Type boolean, default value of true. If true, then at least one option must be selected. name : Name of the question. Used for storing data. If left undefined then default names ( Q0 , Q1 , ... ) will be used for the questions. randomize_question_order boolean false If true, the display order of questions is randomly determined at the start of the trial. In the data object, Q0 will still refer to the first question in the array, regardless of where it was presented visually. preamble string empty string HTML formatted string to display at the top of the page above all the questions. button_label string 'Continue' Label of the button. required_message string 'You must choose at least one response for this question' Message to display if required response is not given. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses JSON string An array containing all selected choices in JSON format for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in Q0 , the second in Q1 , and so on. The responses are recorded as the name of the option label. If the name parameter is defined for the question, then the response will use the value of name as the key for the response in the responses object. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response. question_order JSON string A string in JSON format containing an array with the order of questions. For example [2,0,1] would indicate that the first question was trial.questions[2] (the third item in the questions parameter), the second question was trial.questions[0] , and the final question was trial.questions[1] . Examples \u00b6 Basic example with multiple questions on a page. \u00b6 var multi_select_block = { type : 'survey-multi-select' , questions : [ { prompt : \"Which of these colors do you like?\" , options : [ \"Red\" , \"Yellow\" , \"Green\" , \"Blue\" , \"Black\" ], horizontal : true , required : true , name : 'Colors' }, { prompt : \"Which of these foods do you like?\" , options : [ \"Apples\" , \"Bananas\" , \"Carrots\" , \"Donuts\" , \"Eggplant\" ], horizontal : true , required : true , name : 'Foods' } ], randomize_question_order : true };","title":"jspsych-survey-multi-select"},{"location":"plugins/jspsych-survey-multi-select/#jspsych-survey-multi-select-plugin","text":"The survey-multi-select plugin displays a set of questions with multiple select response fields. The subject could select multiple answers.","title":"jspsych-survey-multi-select plugin"},{"location":"plugins/jspsych-survey-multi-select/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description questions array undefined An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, options and horizontal parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value of undefined . The string is the prompt/question that will be associated with a group of options (check boxes). All questions will get presented on the same page (trial). options : Type array, default value of undefined . The array contains a set of options to display for an individual question. horizontal : Type boolean, default value of false. If true, the questions are centered and options are displayed horizontally. required : Type boolean, default value of true. If true, then at least one option must be selected. name : Name of the question. Used for storing data. If left undefined then default names ( Q0 , Q1 , ... ) will be used for the questions. randomize_question_order boolean false If true, the display order of questions is randomly determined at the start of the trial. In the data object, Q0 will still refer to the first question in the array, regardless of where it was presented visually. preamble string empty string HTML formatted string to display at the top of the page above all the questions. button_label string 'Continue' Label of the button. required_message string 'You must choose at least one response for this question' Message to display if required response is not given. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form.","title":"Parameters"},{"location":"plugins/jspsych-survey-multi-select/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses JSON string An array containing all selected choices in JSON format for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in Q0 , the second in Q1 , and so on. The responses are recorded as the name of the option label. If the name parameter is defined for the question, then the response will use the value of name as the key for the response in the responses object. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response. question_order JSON string A string in JSON format containing an array with the order of questions. For example [2,0,1] would indicate that the first question was trial.questions[2] (the third item in the questions parameter), the second question was trial.questions[0] , and the final question was trial.questions[1] .","title":"Data Generated"},{"location":"plugins/jspsych-survey-multi-select/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-survey-multi-select/#basic-example-with-multiple-questions-on-a-page","text":"var multi_select_block = { type : 'survey-multi-select' , questions : [ { prompt : \"Which of these colors do you like?\" , options : [ \"Red\" , \"Yellow\" , \"Green\" , \"Blue\" , \"Black\" ], horizontal : true , required : true , name : 'Colors' }, { prompt : \"Which of these foods do you like?\" , options : [ \"Apples\" , \"Bananas\" , \"Carrots\" , \"Donuts\" , \"Eggplant\" ], horizontal : true , required : true , name : 'Foods' } ], randomize_question_order : true };","title":"Basic example with multiple questions on a page."},{"location":"plugins/jspsych-survey-text/","text":"jspsych-survey-text plugin \u00b6 The survey-text plugin displays a set of questions with free response text fields. The subject types in answers. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description questions array undefined An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, value, required, rows, and columns parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value of undefined . The string is the prompt for the subject to respond to. Each question gets its own response field. placeholder : Type string, default value of \"\" . The string will create placeholder text in the text field. required : Boolean; if true then the user must enter a response to submit. rows : Type integer, default value of 1. The number of rows for the response text box. columns : Type integer, default value of 40. The number of columns for the response text box. name : Name of the question. Used for storing data. If left undefined then default names ( Q0 , Q1 , ... ) will be used for the questions. randomize_question_order boolean false If true, the display order of questions is randomly determined at the start of the trial. In the data object, Q0 will still refer to the first question in the array, regardless of where it was presented visually. preamble string empty string HTML formatted string to display at the top of the page above all the questions. button_label string 'Continue' The text that appears on the button to finish the trial. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses JSON string A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in Q0 , the second in Q1 , and so on. Each response is a string containing whatever the subject typed into the associated text box. If the name parameter is defined for the question, then the response will use the value of name as the key for the response in the responses object. rt numeric The response time in milliseconds for the subject to make a response. question_order JSON string A string in JSON format containing an array with the order of questions. For example [2,0,1] would indicate that the first question was trial.questions[2] (the third item in the questions parameter), the second question was trial.questions[0] , and the final question was trial.questions[1] . Examples \u00b6 Basic example \u00b6 var survey_trial = { type : 'survey-text' , questions : [ { prompt : \"How old are you?\" }, { prompt : \"Where were you born?\" , placeholder : \"City, State/Province, Country\" } ], }; Custom number of rows and columns \u00b6 var survey_trial = { type : 'survey-text' , questions : [ { prompt : \"How old are you?\" , rows : 5 , columns : 40 }, { prompt : \"Where were you born?\" , rows : 3 , columns : 50 } ], }; Defining the name of questions \u00b6 var survey_trial = { type : 'survey-text' , questions : [ { prompt : \"How old are you?\" , name : 'Age' }, { prompt : \"Where were you born?\" , name : 'BirthLocation' } ], };","title":"jspsych-survey-text"},{"location":"plugins/jspsych-survey-text/#jspsych-survey-text-plugin","text":"The survey-text plugin displays a set of questions with free response text fields. The subject types in answers.","title":"jspsych-survey-text plugin"},{"location":"plugins/jspsych-survey-text/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description questions array undefined An array of objects, each object represents a question that appears on the screen. Each object contains a prompt, value, required, rows, and columns parameter that will be applied to the question. See examples below for further clarification. prompt : Type string, default value of undefined . The string is the prompt for the subject to respond to. Each question gets its own response field. placeholder : Type string, default value of \"\" . The string will create placeholder text in the text field. required : Boolean; if true then the user must enter a response to submit. rows : Type integer, default value of 1. The number of rows for the response text box. columns : Type integer, default value of 40. The number of columns for the response text box. name : Name of the question. Used for storing data. If left undefined then default names ( Q0 , Q1 , ... ) will be used for the questions. randomize_question_order boolean false If true, the display order of questions is randomly determined at the start of the trial. In the data object, Q0 will still refer to the first question in the array, regardless of where it was presented visually. preamble string empty string HTML formatted string to display at the top of the page above all the questions. button_label string 'Continue' The text that appears on the button to finish the trial. autocomplete boolean false This determines whether or not all of the input elements on the page should allow autocomplete. Setting this to true will enable autocomplete or auto-fill for the form.","title":"Parameters"},{"location":"plugins/jspsych-survey-text/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value responses JSON string A string in JSON format containing the response for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in Q0 , the second in Q1 , and so on. Each response is a string containing whatever the subject typed into the associated text box. If the name parameter is defined for the question, then the response will use the value of name as the key for the response in the responses object. rt numeric The response time in milliseconds for the subject to make a response. question_order JSON string A string in JSON format containing an array with the order of questions. For example [2,0,1] would indicate that the first question was trial.questions[2] (the third item in the questions parameter), the second question was trial.questions[0] , and the final question was trial.questions[1] .","title":"Data Generated"},{"location":"plugins/jspsych-survey-text/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-survey-text/#basic-example","text":"var survey_trial = { type : 'survey-text' , questions : [ { prompt : \"How old are you?\" }, { prompt : \"Where were you born?\" , placeholder : \"City, State/Province, Country\" } ], };","title":"Basic example"},{"location":"plugins/jspsych-survey-text/#custom-number-of-rows-and-columns","text":"var survey_trial = { type : 'survey-text' , questions : [ { prompt : \"How old are you?\" , rows : 5 , columns : 40 }, { prompt : \"Where were you born?\" , rows : 3 , columns : 50 } ], };","title":"Custom number of rows and columns"},{"location":"plugins/jspsych-survey-text/#defining-the-name-of-questions","text":"var survey_trial = { type : 'survey-text' , questions : [ { prompt : \"How old are you?\" , name : 'Age' }, { prompt : \"Where were you born?\" , name : 'BirthLocation' } ], };","title":"Defining the name of questions"},{"location":"plugins/jspsych-video-button-response/","text":"jspsych-video-button-response plugin \u00b6 This plugin plays a video and records responses generated by button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically when the subject responds, when the video file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent a button response from being made before the video has finished playing. The button itself can be customized using HTML formatting. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus array undefined An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm) to maximize the cross-browser compatibility . Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use the first source file in the array that is compatible with the browser, so specify the files in order of preference. choices array of strings undefined Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). width numeric width of the video file The width of the video display in pixels. height numeric heigh of the video file The height of the video display in pixels. autoplay boolean true If true, the video will begin playing as soon as it has loaded. controls boolean false If true, controls for the video player will be available to the subject. They will be able to pause the video or move the playback to any point in the video. start numeric null If given a value, the video will start at this time point in seconds. stop numeric null If given a value, the video will stop at this time point in seconds. rate numeric null The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. trial_ends_after_video bool false If true, then the trial will end as soon as the video file finishes playing. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. response_allowed_while_playing boolean true If true, then responses are allowed while the video is playing. If false, then the video must finish playing before the button choices are enabled and a response is accepted. Once the video has played all the way through, the buttons are enabled and a response is allowed (including while the video is being re-played via on-screen playback controls). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string JSON encoding of the stimulus array. Example \u00b6 var trial = { type : 'video-button-response' , stimulus : [ 'video/sample_video.mp4' , 'video/sample_video.ogg' ], choices : [ 'Happy' , 'Sad' , 'Angry' , 'Peaceful' ], prompt : '<p>Which emotion the best descriptor of the main character\\'s feelings?</p>' }","title":"jspsych-video-button-response"},{"location":"plugins/jspsych-video-button-response/#jspsych-video-button-response-plugin","text":"This plugin plays a video and records responses generated by button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically when the subject responds, when the video file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent a button response from being made before the video has finished playing. The button itself can be customized using HTML formatting.","title":"jspsych-video-button-response plugin"},{"location":"plugins/jspsych-video-button-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus array undefined An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm) to maximize the cross-browser compatibility . Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use the first source file in the array that is compatible with the browser, so specify the files in order of preference. choices array of strings undefined Labels for the buttons. Each different string in the array will generate a different button. button_html HTML string '<button class=\"jspsych-btn\">%choice%</button>' A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string %choice% will be changed to the corresponding element of the choices array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the choices array and this array must have the same length. The HTML from position 0 in the button_html array will be used to create the button for element 0 in the choices array, and so on. margin_vertical string '0px' Vertical margin of the button(s). margin_horizontal string '8px' Horizontal margin of the button(s). prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). width numeric width of the video file The width of the video display in pixels. height numeric heigh of the video file The height of the video display in pixels. autoplay boolean true If true, the video will begin playing as soon as it has loaded. controls boolean false If true, controls for the video player will be available to the subject. They will be able to pause the video or move the playback to any point in the video. start numeric null If given a value, the video will start at this time point in seconds. stop numeric null If given a value, the video will stop at this time point in seconds. rate numeric null The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. trial_ends_after_video bool false If true, then the trial will end as soon as the video file finishes playing. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. response_allowed_while_playing boolean true If true, then responses are allowed while the video is playing. If false, then the video must finish playing before the button choices are enabled and a response is accepted. Once the video has played all the way through, the buttons are enabled and a response is allowed (including while the video is being re-played via on-screen playback controls).","title":"Parameters"},{"location":"plugins/jspsych-video-button-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value button_pressed numeric Indicates which button the subject pressed. The first button in the choices array is 0, the second is 1, and so on. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string JSON encoding of the stimulus array.","title":"Data Generated"},{"location":"plugins/jspsych-video-button-response/#example","text":"var trial = { type : 'video-button-response' , stimulus : [ 'video/sample_video.mp4' , 'video/sample_video.ogg' ], choices : [ 'Happy' , 'Sad' , 'Angry' , 'Peaceful' ], prompt : '<p>Which emotion the best descriptor of the main character\\'s feelings?</p>' }","title":"Example"},{"location":"plugins/jspsych-video-keyboard-response/","text":"jspsych-video-keyboard-response plugin \u00b6 This plugin plays a video file and records a keyboard response. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically when the subject responds, when the video file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent a keyboard response from being recorded before the video has finished playing. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus array undefined An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm) to maximize the cross-browser compatibility . Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use the first source file in the array that is compatible with the browser, so specify the files in order of preference. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). width numeric width of the video file The width of the video display in pixels. height numeric heigh of the video file The height of the video display in pixels. autoplay boolean true If true, the video will begin playing as soon as it has loaded. controls boolean false If true, controls for the video player will be available to the subject. They will be able to pause the video or move the playback to any point in the video. start numeric null If given a value, the video will start at this time point in seconds. stop numeric null If given a value, the video will stop at this time point in seconds. rate numeric null The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. trial_ends_after_video bool false If true, then the trial will end as soon as the video file finishes playing. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. response_allowed_while_playing boolean true If true, then responses are allowed while the video is playing. If false, then the video must finish playing before a keyboard response is accepted. Once the video has played all the way through, a valid keyboard response is allowed (including while the video is being re-played via on-screen playback controls). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string JSON encoding of the stimulus array. Example \u00b6 var trial = { type : 'video-keyboard-response' , stimulus : [ 'video/sample_video.mp4' , 'video/sample_video.ogg' ], choices : [ 'y' , 'n' ], width : 640 }","title":"jspsych-video-keyboard-response"},{"location":"plugins/jspsych-video-keyboard-response/#jspsych-video-keyboard-response-plugin","text":"This plugin plays a video file and records a keyboard response. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically when the subject responds, when the video file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent a keyboard response from being recorded before the video has finished playing.","title":"jspsych-video-keyboard-response plugin"},{"location":"plugins/jspsych-video-keyboard-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus array undefined An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm) to maximize the cross-browser compatibility . Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use the first source file in the array that is compatible with the browser, so specify the files in order of preference. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). width numeric width of the video file The width of the video display in pixels. height numeric heigh of the video file The height of the video display in pixels. autoplay boolean true If true, the video will begin playing as soon as it has loaded. controls boolean false If true, controls for the video player will be available to the subject. They will be able to pause the video or move the playback to any point in the video. start numeric null If given a value, the video will start at this time point in seconds. stop numeric null If given a value, the video will stop at this time point in seconds. rate numeric null The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. trial_ends_after_video bool false If true, then the trial will end as soon as the video file finishes playing. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. response_allowed_while_playing boolean true If true, then responses are allowed while the video is playing. If false, then the video must finish playing before a keyboard response is accepted. Once the video has played all the way through, a valid keyboard response is allowed (including while the video is being re-played via on-screen playback controls).","title":"Parameters"},{"location":"plugins/jspsych-video-keyboard-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string JSON encoding of the stimulus array.","title":"Data Generated"},{"location":"plugins/jspsych-video-keyboard-response/#example","text":"var trial = { type : 'video-keyboard-response' , stimulus : [ 'video/sample_video.mp4' , 'video/sample_video.ogg' ], choices : [ 'y' , 'n' ], width : 640 }","title":"Example"},{"location":"plugins/jspsych-video-slider-response/","text":"jspsych-video-slider-response plugin \u00b6 This plugin plays a video and allows the subject to respond by dragging a slider. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically when the subject responds, when the video file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent the slider response from being made before the video has finished playing. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus array undefined An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm) to maximize the cross-browser compatibility . Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use the first source file in the array that is compatible with the browser, so specify the files in order of preference. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). width numeric width of the video file The width of the video display in pixels. height numeric heigh of the video file The height of the video display in pixels. autoplay boolean true If true, the video will begin playing as soon as it has loaded. controls boolean false If true, controls for the video player will be available to the subject. They will be able to pause the video or move the playback to any point in the video. start numeric null If given a value, the video will start at this time point in seconds. stop numeric null If given a value, the video will stop at this time point in seconds. rate numeric null The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. min integer 0 Sets the minimum value of the slider. max integer 100 Sets the maximum value of the slider. slider_start integer 50 Sets the starting value of the slider step integer 1 Sets the step of the slider. This is the smallest amount by which the slider can change. labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must move the slider before clicking the continue button. button_label string 'Continue' Label of the button to end the trial. trial_ends_after_video bool false If true, then the trial will end as soon as the video file finishes playing. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. response_allowed_while_playing boolean true If true, then responses are allowed while the video is playing. If false, then the video must finish playing before the slider is enabled and the trial can end via the next button click. Once the video has played all the way through, the slider is enabled and a response is allowed (including while the video is being re-played via on-screen playback controls). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string JSON encoding of the stimulus array. slider_start numeric The starting value of the slider. start numeric The start time of the video clip. Example \u00b6 var trial = { type : 'video-slider-response' , stimulus : [ 'video/sample_video.mp4' , 'video/sample_video.ogg' ], labels : [ \"Did not like\" , \"Liked\" ], prompt : \"<p>Please rate your enjoyment of the video clip.</p>\" }","title":"jspsych-video-slider-response"},{"location":"plugins/jspsych-video-slider-response/#jspsych-video-slider-response-plugin","text":"This plugin plays a video and allows the subject to respond by dragging a slider. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically when the subject responds, when the video file has finished playing, or if the subject has failed to respond within a fixed length of time. You can also prevent the slider response from being made before the video has finished playing.","title":"jspsych-video-slider-response plugin"},{"location":"plugins/jspsych-video-slider-response/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimulus array undefined An array of file paths to the video. You can specify multiple formats of the same video (e.g., .mp4, .ogg, .webm) to maximize the cross-browser compatibility . Usually .mp4 is a safe cross-browser option. The plugin does not reliably support .mov files. The player will use the first source file in the array that is compatible with the browser, so specify the files in order of preference. prompt string null This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g., which key to press). width numeric width of the video file The width of the video display in pixels. height numeric heigh of the video file The height of the video display in pixels. autoplay boolean true If true, the video will begin playing as soon as it has loaded. controls boolean false If true, controls for the video player will be available to the subject. They will be able to pause the video or move the playback to any point in the video. start numeric null If given a value, the video will start at this time point in seconds. stop numeric null If given a value, the video will stop at this time point in seconds. rate numeric null The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. min integer 0 Sets the minimum value of the slider. max integer 100 Sets the maximum value of the slider. slider_start integer 50 Sets the starting value of the slider step integer 1 Sets the step of the slider. This is the smallest amount by which the slider can change. labels array of strings [] Labels displayed at equidistant locations on the slider. For example, two labels will be placed at the ends of the slider. Three labels would place two at the ends and one in the middle. Four will place two at the ends, and the other two will be at 33% and 67% of the slider width. slider_width integer null Set the width of the slider in pixels. If left null, then the width will be equal to the widest element in the display. require_movement boolean false If true, the subject must move the slider before clicking the continue button. button_label string 'Continue' Label of the button to end the trial. trial_ends_after_video bool false If true, then the trial will end as soon as the video file finishes playing. trial_duration numeric null How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the subject's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely. response_ends_trial boolean true If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete. response_allowed_while_playing boolean true If true, then responses are allowed while the video is playing. If false, then the video must finish playing before the slider is enabled and the trial can end via the next button click. Once the video has played all the way through, the slider is enabled and a response is allowed (including while the video is being re-played via on-screen playback controls).","title":"Parameters"},{"location":"plugins/jspsych-video-slider-response/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value response numeric The numeric value of the slider. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. stimulus string JSON encoding of the stimulus array. slider_start numeric The starting value of the slider. start numeric The start time of the video clip.","title":"Data Generated"},{"location":"plugins/jspsych-video-slider-response/#example","text":"var trial = { type : 'video-slider-response' , stimulus : [ 'video/sample_video.mp4' , 'video/sample_video.ogg' ], labels : [ \"Did not like\" , \"Liked\" ], prompt : \"<p>Please rate your enjoyment of the video clip.</p>\" }","title":"Example"},{"location":"plugins/jspsych-visual-search-circle/","text":"jspsych-visual-search-circle plugin \u00b6 This plugin presents a customizable visual-search task modelled after Wang, Cavanagh, & Green (1994) . The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point. Here is an example using normal and backward Ns: Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description target_present boolean undefined Is the target present? set_size numeric undefined How many items should be displayed? target string undefined Path to image file that is the search target. foil string or array undefined Path to image file that is the foil/distractor. Can specify an array of distractors if the distractors are all different images. fixation_image string undefined Path to image file that is a fixation target. target_size array [50, 50] Two element array indicating the height and width of the search array element images. fixation_size array [16, 16] Two element array indicating the height and width of the fixation image. circle_diameter numeric 250 The diameter of the search array circle in pixels. target_present_key numeric 74 The key to press if the target is present in the search array. target_absent_key numeric 70 The key to press if the target is not present in the search array. trial_duration numeric null The maximum amount of time the subject is allowed to search before the trial will continue. A value of null will allow the subject to search indefinitely. fixation_duration numeric 1000 How long to show the fixation image for before the search array (in milliseconds). Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value correct boolean True if the subject gave the correct response. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. set_size numeric The number of items in the search array target_present boolean True if the target is present in the search array locations JSON string JSON-encoded array where each element of the array is the pixel value of the center of an image in the search array. If the target is present, then the first element will represent the location of the target. Example \u00b6 Search for the backward N \u00b6 var trial_1 = { type : 'visual-search-circle' , target : 'img/backwardN.gif' , foil : 'img/normalN.gif' , fixation_image : 'img/fixation.gif' , target_present : true , set_size : 4 }","title":"jspsych-visual-search-circle"},{"location":"plugins/jspsych-visual-search-circle/#jspsych-visual-search-circle-plugin","text":"This plugin presents a customizable visual-search task modelled after Wang, Cavanagh, & Green (1994) . The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point. Here is an example using normal and backward Ns:","title":"jspsych-visual-search-circle plugin"},{"location":"plugins/jspsych-visual-search-circle/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description target_present boolean undefined Is the target present? set_size numeric undefined How many items should be displayed? target string undefined Path to image file that is the search target. foil string or array undefined Path to image file that is the foil/distractor. Can specify an array of distractors if the distractors are all different images. fixation_image string undefined Path to image file that is a fixation target. target_size array [50, 50] Two element array indicating the height and width of the search array element images. fixation_size array [16, 16] Two element array indicating the height and width of the fixation image. circle_diameter numeric 250 The diameter of the search array circle in pixels. target_present_key numeric 74 The key to press if the target is present in the search array. target_absent_key numeric 70 The key to press if the target is not present in the search array. trial_duration numeric null The maximum amount of time the subject is allowed to search before the trial will continue. A value of null will allow the subject to search indefinitely. fixation_duration numeric 1000 How long to show the fixation image for before the search array (in milliseconds).","title":"Parameters"},{"location":"plugins/jspsych-visual-search-circle/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value correct boolean True if the subject gave the correct response. key_press numeric Indicates which key the subject pressed. The value is the numeric key code corresponding to the subject's response. rt numeric The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response. set_size numeric The number of items in the search array target_present boolean True if the target is present in the search array locations JSON string JSON-encoded array where each element of the array is the pixel value of the center of an image in the search array. If the target is present, then the first element will represent the location of the target.","title":"Data Generated"},{"location":"plugins/jspsych-visual-search-circle/#example","text":"","title":"Example"},{"location":"plugins/jspsych-visual-search-circle/#search-for-the-backward-n","text":"var trial_1 = { type : 'visual-search-circle' , target : 'img/backwardN.gif' , foil : 'img/normalN.gif' , fixation_image : 'img/fixation.gif' , target_present : true , set_size : 4 }","title":"Search for the backward N"},{"location":"plugins/jspsych-vsl-animate-occlusion/","text":"jspsych-vsl-animate-occlusion plugin \u00b6 The VSL (visual statistical learning) animate occlusion plugin displays an animated sequence of shapes that disappear behind an occluding rectangle while they change from one shape to another. This plugin can be used to replicate the experiments described in: Fiser, J., & Aslin, R. N. (2002). Statistical learning of higher-order temporal structure from visual shape sequences. Journal of Experimental Psychology: Learning, Memory, and Cognition, 28 (3), 458. Dependency \u00b6 This plugin requires the Snap.svg library, available at http://www.snapsvg.io . You must include the library in the <head> section of your experiment page. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined Each element of the array is a stimulus. A stimulus is a path to an image file. The order of stimuli in the array determines the order of the animation sequence. canvas_size array [400, 400] Array specifying the width and height of the area that the animation will display in. Stimuli will move to the edges of this area, so increasing the width without increasing the timing_cycle parameter will speed up the images. image_size array [100, 100] Array specifying the width and height of the images to show. The occluding rectangle will have a width equal to the width of image_size. initial_direction string \"left\" Which direction the stimulus should move first (subsequent directions will alternate). Choices are \"left\" or \"right\". occlude_center boolean true If true, display a rectangle in the center of the screen that is just wide enough to occlude the image completely as it passes behind. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. cycle_duration numeric 1000 How long it takes for a stimulus in the sequence to make a complete cycle (move to the edge and back to the center) in milliseconds. pre_movement_duration numeric 500 How long to wait before the stimuli starts moving from behind the center rectangle. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus JSON string A JSON encoded array where each element of the array is a stimulus from the sequence, in the order that they were shown. responses JSON string A JSON encoded array containing all response information. The encoded object is an array containing one element for each valid response. Each response item has three properties: key the key code of the response key, stimulus the index of the stimulus that was displayed when the response was made, and rt the response time measured since the start of the sequence. Examples \u00b6 Displaying a simple sequence. \u00b6 var trial = { type : 'vsl-animate-occlusion' , stimuli : [ \"img/1.gif\" , \"img/2.gif\" , \"img/3.gif\" , \"img/4.gif\" , \"img/5.gif\" , \"img/6.gif\" , \"img/7.gif\" , \"img/8.gif\" , \"img/9.gif\" , \"img/10.gif\" ] }","title":"jspsych-vsl-animate-occlusion"},{"location":"plugins/jspsych-vsl-animate-occlusion/#jspsych-vsl-animate-occlusion-plugin","text":"The VSL (visual statistical learning) animate occlusion plugin displays an animated sequence of shapes that disappear behind an occluding rectangle while they change from one shape to another. This plugin can be used to replicate the experiments described in: Fiser, J., & Aslin, R. N. (2002). Statistical learning of higher-order temporal structure from visual shape sequences. Journal of Experimental Psychology: Learning, Memory, and Cognition, 28 (3), 458.","title":"jspsych-vsl-animate-occlusion plugin"},{"location":"plugins/jspsych-vsl-animate-occlusion/#dependency","text":"This plugin requires the Snap.svg library, available at http://www.snapsvg.io . You must include the library in the <head> section of your experiment page.","title":"Dependency"},{"location":"plugins/jspsych-vsl-animate-occlusion/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined Each element of the array is a stimulus. A stimulus is a path to an image file. The order of stimuli in the array determines the order of the animation sequence. canvas_size array [400, 400] Array specifying the width and height of the area that the animation will display in. Stimuli will move to the edges of this area, so increasing the width without increasing the timing_cycle parameter will speed up the images. image_size array [100, 100] Array specifying the width and height of the images to show. The occluding rectangle will have a width equal to the width of image_size. initial_direction string \"left\" Which direction the stimulus should move first (subsequent directions will alternate). Choices are \"left\" or \"right\". occlude_center boolean true If true, display a rectangle in the center of the screen that is just wide enough to occlude the image completely as it passes behind. choices array of keycodes jsPsych.ALL_KEYS This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their numeric key code or as characters (e.g., 'a' , 'q' ). The default value of jsPsych.ALL_KEYS means that all keys will be accepted as valid responses. Specifying jsPsych.NO_KEYS will mean that no responses are allowed. cycle_duration numeric 1000 How long it takes for a stimulus in the sequence to make a complete cycle (move to the edge and back to the center) in milliseconds. pre_movement_duration numeric 500 How long to wait before the stimuli starts moving from behind the center rectangle.","title":"Parameters"},{"location":"plugins/jspsych-vsl-animate-occlusion/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus JSON string A JSON encoded array where each element of the array is a stimulus from the sequence, in the order that they were shown. responses JSON string A JSON encoded array containing all response information. The encoded object is an array containing one element for each valid response. Each response item has three properties: key the key code of the response key, stimulus the index of the stimulus that was displayed when the response was made, and rt the response time measured since the start of the sequence.","title":"Data Generated"},{"location":"plugins/jspsych-vsl-animate-occlusion/#examples","text":"","title":"Examples"},{"location":"plugins/jspsych-vsl-animate-occlusion/#displaying-a-simple-sequence","text":"var trial = { type : 'vsl-animate-occlusion' , stimuli : [ \"img/1.gif\" , \"img/2.gif\" , \"img/3.gif\" , \"img/4.gif\" , \"img/5.gif\" , \"img/6.gif\" , \"img/7.gif\" , \"img/8.gif\" , \"img/9.gif\" , \"img/10.gif\" ] }","title":"Displaying a simple sequence."},{"location":"plugins/jspsych-vsl-grid-scene/","text":"jspsych-vsl-grid-scene plugin \u00b6 The VSL (visual statistical learning) grid scene plugin displays images arranged in a grid. This plugin can be used to replicate the experiments described in: Fiser, J., & Aslin, R. N. (2001). Unsupervised statistical learning of higher-order spatial structures from visual scenes. Psychological Science, 12 (6), 499-504. Parameters \u00b6 In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined An array that defines a grid. Grids should be declared as two dimensional arrays in [row][col] order, with paths to image files in the locations where images are displayed, and 0 in blank spaces. See example below. image_size array [100, 100] Array specifying the width and height of the images to show. Grid cells will also be this size, with 10% padding. timing_duration numeric 2000 How long to show the stimulus for in milliseconds. Data Generated \u00b6 In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus JSON string JSON encoded array of the stimulus shown on the trial. Stimulus Creation Method \u00b6 The plugin also includes a public method for generating the grid scene stimuli that the plugin uses. You can use this method to create HTML strings that produce the stimuli, and then incorporate the stimuli in other plugins. To use this method, include the plugin script on the page and then call the method like this: var pattern = [ [ \"img/1.gif\" , \"img/2.gif\" , 0 ], [ 0 , \"img/3.gif\" , 0 ], [ \"img/5.gif\" , \"img/4.gif\" , 0 ] ]; var image_size = 100 ; // pixels var grid_stimulus = jsPsych . plugins [ 'vsl-grid-scene' ]. generate_stimulus ( pattern , image_size ); // grid_stimulus will now contain a string (NOT an HTML DOM object) that you can // pass into other plugins that accept HTML stimuli as input, such as jspsych-html-keyboard-response. Example \u00b6 Basic example \u00b6 var scene = [ [ \"img/1.gif\" , \"img/2.gif\" , 0 ], [ 0 , \"img/3.gif\" , 0 ], [ \"img/5.gif\" , \"img/4.gif\" , 0 ] ] var trial = { type : 'vsl-grid-scene' , stimuli : scene };","title":"jspsych-vsl-grid-scene"},{"location":"plugins/jspsych-vsl-grid-scene/#jspsych-vsl-grid-scene-plugin","text":"The VSL (visual statistical learning) grid scene plugin displays images arranged in a grid. This plugin can be used to replicate the experiments described in: Fiser, J., & Aslin, R. N. (2001). Unsupervised statistical learning of higher-order spatial structures from visual scenes. Psychological Science, 12 (6), 499-504.","title":"jspsych-vsl-grid-scene plugin"},{"location":"plugins/jspsych-vsl-grid-scene/#parameters","text":"In addition to the parameters available in all plugins , this plugin accepts the following parameters. Parameters with a default value of undefined must be specified. Other parameters can be left unspecified if the default value is acceptable. Parameter Type Default Value Description stimuli array undefined An array that defines a grid. Grids should be declared as two dimensional arrays in [row][col] order, with paths to image files in the locations where images are displayed, and 0 in blank spaces. See example below. image_size array [100, 100] Array specifying the width and height of the images to show. Grid cells will also be this size, with 10% padding. timing_duration numeric 2000 How long to show the stimulus for in milliseconds.","title":"Parameters"},{"location":"plugins/jspsych-vsl-grid-scene/#data-generated","text":"In addition to the default data collected by all plugins , this plugin collects the following data for each trial. Name Type Value stimulus JSON string JSON encoded array of the stimulus shown on the trial.","title":"Data Generated"},{"location":"plugins/jspsych-vsl-grid-scene/#stimulus-creation-method","text":"The plugin also includes a public method for generating the grid scene stimuli that the plugin uses. You can use this method to create HTML strings that produce the stimuli, and then incorporate the stimuli in other plugins. To use this method, include the plugin script on the page and then call the method like this: var pattern = [ [ \"img/1.gif\" , \"img/2.gif\" , 0 ], [ 0 , \"img/3.gif\" , 0 ], [ \"img/5.gif\" , \"img/4.gif\" , 0 ] ]; var image_size = 100 ; // pixels var grid_stimulus = jsPsych . plugins [ 'vsl-grid-scene' ]. generate_stimulus ( pattern , image_size ); // grid_stimulus will now contain a string (NOT an HTML DOM object) that you can // pass into other plugins that accept HTML stimuli as input, such as jspsych-html-keyboard-response.","title":"Stimulus Creation Method"},{"location":"plugins/jspsych-vsl-grid-scene/#example","text":"","title":"Example"},{"location":"plugins/jspsych-vsl-grid-scene/#basic-example","text":"var scene = [ [ \"img/1.gif\" , \"img/2.gif\" , 0 ], [ 0 , \"img/3.gif\" , 0 ], [ \"img/5.gif\" , \"img/4.gif\" , 0 ] ] var trial = { type : 'vsl-grid-scene' , stimuli : scene };","title":"Basic example"},{"location":"plugins/overview/","text":"Plugins \u00b6 In jsPsych, plugins define the kinds of tasks that subjects perform in experiments. Some plugins define very general tasks, like displaying instructions or displaying a visual stimulus and getting a keyboard response. Other plugins are more specific, displaying particular kinds of interactive stimuli, or running a specific version of particular kind of task. Creating an experiment with jsPsych involves figuring out which plugins are needed for the kinds of tasks you want to have your subjects perform. Plugins provide a structure for a particular task, but often allow for significant customization and flexibility. For example, the jspsych-image-keyboard-response plugin defines a simple structure for showing an image and collecting a keyboard response. You can specify the what the stimulus is, what keys the subject is allowed to press, and how long the stimulus should be on the screen, how long the subject has to respond, and so on. Many of these content options have reasonable default values; even though the jspsych-image-keyboard-response plugin has many different options, you only need to specify the stimulus in order to use it. Each plugin has its own documentation page, which describes what the plugin does and what options are available. Using a plugin \u00b6 To use a plugin, you'll need to load the plugin's JavaScript file on your experiment page: < head > < script src = \"jspsych/plugins/jspsych-image-keyboard-response.js\" type = \"text/javascript\" ></ script > </ head > Once a plugin is loaded, you can define a trial that uses that plugin. The following JavaScript code defines a trial using the jspsych-image-keyboard-response plugin to display an image file ('images/happy_face.jpg'). This trial uses the default values for valid keys, length of display, and other parameters. You could override these values by adding them to the object. var single_stim_trial = { type : 'image-keyboard-response' , stimulus : 'images/happy_face.jpg' } Here's an exampe of overriding the default value for post_trial_gap : var single_stim_trial = { type : 'image-keyboard-response' , stimulus : 'images/happy_face.jpg' , post_trial_gap : 2000 } Parameters available in all plugins \u00b6 Each plugin specifies its own set of parameters. Check the documentation for a plugin to see what parameters are available and what they do. In addition, there is a set of parameters that can be specified for any plugin. Parameter Type Default Value Description post_trial_gap numeric null Sets the time, in milliseconds, between the current trial and the next trial. If null, there will be no gap. on_finish function function(){ return; } A callback function to execute when the trial finishes. See this page for more details. on_start function function(){ return; } A callback function to execute when the trial begins, before any loading has occurred. See this page for more details. on_load function function(){ return; } A callback function to execute when the trial has loaded, which typically happens after the initial display of the plugin has loaded. See this page for more details. data object undefined An object containing additional data to store for the trial. See this page for more details. Data collected by plugins \u00b6 Each plugin defines what data is collected on the trial. The documentation for each plugin specifies what data is collected by that plugin. In addition to the data collected by a plugin, there is a default set of data that is collected on every trial. The collected data are: Name Type Value trial_type string The name of the plugin used to run the trial. trial_index numeric The index of the current trial across the whole experiment. time_elapsed numeric The number of milliseconds since the start of the experiment when the trial ended. internal_node_id string A string identifier for the current TimelineNode. List of available plugins \u00b6 This table is a description of all plugins that are distributed with jsPsych. Click on the name of a plugin to view its documentation page. Plugin Description jspsych\u2011animation Shows a sequence of images at a specified frame rate. Records key presses (including timing information) made by the subject while they are viewing the animation. jspsych\u2011audio\u2011button\u2011response Play an audio file and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons. jspsych\u2011audio\u2011keyboard\u2011response Play an audio file and allow the subject to respond by pressing a key. jspsych\u2011audio\u2011slider\u2011response Play an audio file and allow the subject to respond by moving a slider to indicate a value. jspsych\u2011call\u2011function Executes an arbitrary function call. Doesn't display anything to the subject, and the subject is usually unaware that this plugin has even executed. It's useful for performing tasks at specified times in the experiment, such as saving data. jspsych\u2011canvas\u2011button\u2011response Draw a stimulus on a HTML canvas element , and record a button click response. Useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). jspsych\u2011canvas\u2011keyboard\u2011response Draw a stimulus on a HTML canvas element , and record a key press response. Useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). jspsych\u2011canvas\u2011slider\u2011response Draw a stimulus on a HTML canvas element , and ask the subject to respond by moving a slider to indicate a value. Useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). jspsych\u2011categorize\u2011animation The subject responds to an animation and can be given feedback about their response. jspsych\u2011categorize\u2011html The subject responds to an HTML-formatted stimulus using the keyboard and can be given feedback about the correctness of their response. jspsych\u2011categorize\u2011image The subject responds to an image using the keyboard and can be given feedback about the correctness of their response. jspsych\u2011cloze Plugin for displaying a cloze test and checking participants answers against a correct solution. jspsych\u2011external\u2011html Displays an external HTML page (such as a consent form) and lets the subject respond by clicking a button or pressing a key. Plugin can validate their response, which is useful for making sure that a subject has granted consent before starting the experiment. jspsych\u2011free\u2011sort Displays a set of images on the screen in random locations. Subjects can click and drag the images to move them around the screen. Records all the moves made by the subject, so the sequence of moves can be recovered from the data. jspsych\u2011fullscreen Toggles the experiment in and out of fullscreen mode. jspsych\u2011html\u2011button\u2011response Display an HTML-formatted stimulus and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons. jspsych\u2011html\u2011keyboard\u2011response Display an HTML-formatted stimulus and allow the subject to respond by pressing a key. jspsych\u2011html\u2011slider\u2011response Display an HTML-formatted stimulus and allow the subject to respond by moving a slider to indicate a value. jspsych\u2011iat\u2011html The implicit association task, using HTML-formatted stimuli. jspsych\u2011iat\u2011image The implicit association task, using images as stimuli. jspsych\u2011image\u2011button\u2011response Display an image and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons. jspsych\u2011image\u2011keyboard\u2011response Display an image and allow the subject to respond by pressing a key. jspsych\u2011image\u2011slider\u2011response Display an image and allow the subject to respond by moving a slider to indicate a value. jspsych\u2011instructions For displaying instructions to the subject. Allows the subject to navigate between pages of instructions using keys or buttons. jspsych\u2011maxdiff Displays rows of alternatives to be selected for two mutually-exclusive categories, typically as 'most' or 'least' on a particular criteria (e.g. importance, preference, similarity). The participant responds by selecting one radio button corresponding to an alternative in both the left and right response columns. jspsych\u2011rdk This plugin displays a Random Dot Kinematogram (RDK) and allows the subject to report the primary direction of motion by pressing a key on the keyboard. jspsych\u2011reconstruction The subject interacts with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time. jspsych\u2011resize Calibrate the display so that materials display with a known physical size. jspsych\u2011same\u2011different\u2011html A same-different judgment task. An HTML-formatted stimulus is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different. jspsych\u2011same\u2011different\u2011image A same-different judgment task. An image is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different. jspsych\u2011serial\u2011reaction\u2011time A set of boxes are displayed on the screen and one of them changes color. The subject presses a key that corresponds to the different color box as fast as possible. jspsych\u2011serial\u2011reaction\u2011time\u2011mouse A set of boxes are displayed on the screen and one of them changes color. The subjects clicks the box that changed color as fast as possible. jspsych\u2011survey\u2011html\u2011form Renders a custom HTML form. Allows for mixing multiple kinds of form input. jspsych\u2011survey\u2011likert Displays likert-style questions. jspsych\u2011survey\u2011multi\u2011choice Displays multiple choice questions with one answer allowed per question. jspsych\u2011survey\u2011multi\u2011select Displays multiple choice questions with multiple answes allowed per question. jspsych\u2011survey\u2011text Shows a prompt with a text box. The subject writes a response and then submits by clicking a button. jspsych\u2011video\u2011button\u2011response Displays a video file with many options for customizing playback. Subject responds to the video by pressing a button. jspsych\u2011video\u2011keyboard\u2011response Displays a video file with many options for customizing playback. Subject responds to the video by pressing a key. jspsych\u2011video\u2011slider\u2011response Displays a video file with many options for customizing playback. Subject responds to the video by moving a slider. jspsych\u2011visual\u2011search\u2011circle A customizable visual-search task modelled after Wang, Cavanagh, & Green (1994) . The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point. jspsych\u2011vsl\u2011animate\u2011occlusion A visual statistical learning paradigm based on Fiser & Aslin (2002) . A sequence of stimuli are shown in an oscillatory motion. An occluding rectangle is in the center of the display, and the stimuli change when they are behind the rectangle. jspsych\u2011vsl\u2011grid\u2011scene A visual statistical learning paradigm based on Fiser & Aslin (2001) . A scene made up of individual stimuli arranged in a grid is shown. This plugin can also generate the HTML code to render the stimuli for use in other plugins.","title":"Overview"},{"location":"plugins/overview/#plugins","text":"In jsPsych, plugins define the kinds of tasks that subjects perform in experiments. Some plugins define very general tasks, like displaying instructions or displaying a visual stimulus and getting a keyboard response. Other plugins are more specific, displaying particular kinds of interactive stimuli, or running a specific version of particular kind of task. Creating an experiment with jsPsych involves figuring out which plugins are needed for the kinds of tasks you want to have your subjects perform. Plugins provide a structure for a particular task, but often allow for significant customization and flexibility. For example, the jspsych-image-keyboard-response plugin defines a simple structure for showing an image and collecting a keyboard response. You can specify the what the stimulus is, what keys the subject is allowed to press, and how long the stimulus should be on the screen, how long the subject has to respond, and so on. Many of these content options have reasonable default values; even though the jspsych-image-keyboard-response plugin has many different options, you only need to specify the stimulus in order to use it. Each plugin has its own documentation page, which describes what the plugin does and what options are available.","title":"Plugins"},{"location":"plugins/overview/#using-a-plugin","text":"To use a plugin, you'll need to load the plugin's JavaScript file on your experiment page: < head > < script src = \"jspsych/plugins/jspsych-image-keyboard-response.js\" type = \"text/javascript\" ></ script > </ head > Once a plugin is loaded, you can define a trial that uses that plugin. The following JavaScript code defines a trial using the jspsych-image-keyboard-response plugin to display an image file ('images/happy_face.jpg'). This trial uses the default values for valid keys, length of display, and other parameters. You could override these values by adding them to the object. var single_stim_trial = { type : 'image-keyboard-response' , stimulus : 'images/happy_face.jpg' } Here's an exampe of overriding the default value for post_trial_gap : var single_stim_trial = { type : 'image-keyboard-response' , stimulus : 'images/happy_face.jpg' , post_trial_gap : 2000 }","title":"Using a plugin"},{"location":"plugins/overview/#parameters-available-in-all-plugins","text":"Each plugin specifies its own set of parameters. Check the documentation for a plugin to see what parameters are available and what they do. In addition, there is a set of parameters that can be specified for any plugin. Parameter Type Default Value Description post_trial_gap numeric null Sets the time, in milliseconds, between the current trial and the next trial. If null, there will be no gap. on_finish function function(){ return; } A callback function to execute when the trial finishes. See this page for more details. on_start function function(){ return; } A callback function to execute when the trial begins, before any loading has occurred. See this page for more details. on_load function function(){ return; } A callback function to execute when the trial has loaded, which typically happens after the initial display of the plugin has loaded. See this page for more details. data object undefined An object containing additional data to store for the trial. See this page for more details.","title":"Parameters available in all plugins"},{"location":"plugins/overview/#data-collected-by-plugins","text":"Each plugin defines what data is collected on the trial. The documentation for each plugin specifies what data is collected by that plugin. In addition to the data collected by a plugin, there is a default set of data that is collected on every trial. The collected data are: Name Type Value trial_type string The name of the plugin used to run the trial. trial_index numeric The index of the current trial across the whole experiment. time_elapsed numeric The number of milliseconds since the start of the experiment when the trial ended. internal_node_id string A string identifier for the current TimelineNode.","title":"Data collected by plugins"},{"location":"plugins/overview/#list-of-available-plugins","text":"This table is a description of all plugins that are distributed with jsPsych. Click on the name of a plugin to view its documentation page. Plugin Description jspsych\u2011animation Shows a sequence of images at a specified frame rate. Records key presses (including timing information) made by the subject while they are viewing the animation. jspsych\u2011audio\u2011button\u2011response Play an audio file and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons. jspsych\u2011audio\u2011keyboard\u2011response Play an audio file and allow the subject to respond by pressing a key. jspsych\u2011audio\u2011slider\u2011response Play an audio file and allow the subject to respond by moving a slider to indicate a value. jspsych\u2011call\u2011function Executes an arbitrary function call. Doesn't display anything to the subject, and the subject is usually unaware that this plugin has even executed. It's useful for performing tasks at specified times in the experiment, such as saving data. jspsych\u2011canvas\u2011button\u2011response Draw a stimulus on a HTML canvas element , and record a button click response. Useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). jspsych\u2011canvas\u2011keyboard\u2011response Draw a stimulus on a HTML canvas element , and record a key press response. Useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). jspsych\u2011canvas\u2011slider\u2011response Draw a stimulus on a HTML canvas element , and ask the subject to respond by moving a slider to indicate a value. Useful for displaying dynamic, parametrically-defined graphics, and for controlling the positioning of multiple graphical elements (shapes, text, images). jspsych\u2011categorize\u2011animation The subject responds to an animation and can be given feedback about their response. jspsych\u2011categorize\u2011html The subject responds to an HTML-formatted stimulus using the keyboard and can be given feedback about the correctness of their response. jspsych\u2011categorize\u2011image The subject responds to an image using the keyboard and can be given feedback about the correctness of their response. jspsych\u2011cloze Plugin for displaying a cloze test and checking participants answers against a correct solution. jspsych\u2011external\u2011html Displays an external HTML page (such as a consent form) and lets the subject respond by clicking a button or pressing a key. Plugin can validate their response, which is useful for making sure that a subject has granted consent before starting the experiment. jspsych\u2011free\u2011sort Displays a set of images on the screen in random locations. Subjects can click and drag the images to move them around the screen. Records all the moves made by the subject, so the sequence of moves can be recovered from the data. jspsych\u2011fullscreen Toggles the experiment in and out of fullscreen mode. jspsych\u2011html\u2011button\u2011response Display an HTML-formatted stimulus and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons. jspsych\u2011html\u2011keyboard\u2011response Display an HTML-formatted stimulus and allow the subject to respond by pressing a key. jspsych\u2011html\u2011slider\u2011response Display an HTML-formatted stimulus and allow the subject to respond by moving a slider to indicate a value. jspsych\u2011iat\u2011html The implicit association task, using HTML-formatted stimuli. jspsych\u2011iat\u2011image The implicit association task, using images as stimuli. jspsych\u2011image\u2011button\u2011response Display an image and allow the subject to respond by choosing a button to click. The button can be customized extensively, e.g., using images in place of standard buttons. jspsych\u2011image\u2011keyboard\u2011response Display an image and allow the subject to respond by pressing a key. jspsych\u2011image\u2011slider\u2011response Display an image and allow the subject to respond by moving a slider to indicate a value. jspsych\u2011instructions For displaying instructions to the subject. Allows the subject to navigate between pages of instructions using keys or buttons. jspsych\u2011maxdiff Displays rows of alternatives to be selected for two mutually-exclusive categories, typically as 'most' or 'least' on a particular criteria (e.g. importance, preference, similarity). The participant responds by selecting one radio button corresponding to an alternative in both the left and right response columns. jspsych\u2011rdk This plugin displays a Random Dot Kinematogram (RDK) and allows the subject to report the primary direction of motion by pressing a key on the keyboard. jspsych\u2011reconstruction The subject interacts with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time. jspsych\u2011resize Calibrate the display so that materials display with a known physical size. jspsych\u2011same\u2011different\u2011html A same-different judgment task. An HTML-formatted stimulus is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different. jspsych\u2011same\u2011different\u2011image A same-different judgment task. An image is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different. jspsych\u2011serial\u2011reaction\u2011time A set of boxes are displayed on the screen and one of them changes color. The subject presses a key that corresponds to the different color box as fast as possible. jspsych\u2011serial\u2011reaction\u2011time\u2011mouse A set of boxes are displayed on the screen and one of them changes color. The subjects clicks the box that changed color as fast as possible. jspsych\u2011survey\u2011html\u2011form Renders a custom HTML form. Allows for mixing multiple kinds of form input. jspsych\u2011survey\u2011likert Displays likert-style questions. jspsych\u2011survey\u2011multi\u2011choice Displays multiple choice questions with one answer allowed per question. jspsych\u2011survey\u2011multi\u2011select Displays multiple choice questions with multiple answes allowed per question. jspsych\u2011survey\u2011text Shows a prompt with a text box. The subject writes a response and then submits by clicking a button. jspsych\u2011video\u2011button\u2011response Displays a video file with many options for customizing playback. Subject responds to the video by pressing a button. jspsych\u2011video\u2011keyboard\u2011response Displays a video file with many options for customizing playback. Subject responds to the video by pressing a key. jspsych\u2011video\u2011slider\u2011response Displays a video file with many options for customizing playback. Subject responds to the video by moving a slider. jspsych\u2011visual\u2011search\u2011circle A customizable visual-search task modelled after Wang, Cavanagh, & Green (1994) . The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point. jspsych\u2011vsl\u2011animate\u2011occlusion A visual statistical learning paradigm based on Fiser & Aslin (2002) . A sequence of stimuli are shown in an oscillatory motion. An occluding rectangle is in the center of the display, and the stimuli change when they are behind the rectangle. jspsych\u2011vsl\u2011grid\u2011scene A visual statistical learning paradigm based on Fiser & Aslin (2001) . A scene made up of individual stimuli arranged in a grid is shown. This plugin can also generate the HTML code to render the stimuli for use in other plugins.","title":"List of available plugins"},{"location":"tutorials/hello-world/","text":"jsPsych \"Hello world\" experiment \u00b6 In the long tradition of \"Hello world!\" examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page. Step 1: Download the jsPsych library \u00b6 Start by downloading the jsPsych library. The most recent version can always be found on the GitHub releases page . Note: the image below shows version 4.2, but the process is the same for the most recent version. Step 2: Create a folder to store your experiment files \u00b6 Create a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called jspsych-6.0.5 if using v6.0.5 of jsPsych) into the experiment folder. Here's what it looks like on a Windows machine: Step 3: Create a new HTML file \u00b6 To edit jsPsych code you'll need a programming-friendly text editor. Some free options are: Atom (Windows, OSX, Linux) VSCode (Windows, OSX, Linux) Once you've got a text editor that you like, create a new file in the experiment folder called experiment.html Step 4: Add the bare-minimum HTML code \u00b6 There's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document. <!DOCTYPE html> < html > < head > < title > My experiment </ title > </ head > < body ></ body > </ html > Add the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'. Step 5: Import the jsPsych library \u00b6 To use jsPsych, add a <script> tag to import the library. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > </ head > < body ></ body > </ html > You may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a <link> tag to the <head> section of the document. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > </ html > Step 6: Use the jspsych-html-keyboard-response plugin to print a message \u00b6 For the demo, we want to show some text on the screen. This is exactly what the jspsych-html-keyboard-response plugin is designed to do. To use the plugin, we need to load it with a <script> tag. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > </ html > Once the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the html-keyboard-response plugin, we create a JavaScript object with the property type equal to 'html-keyboard-response' . Then we can specify the other parameters of the plugin in the same object. To add JavaScript code directly to the webpage we need to add a set of <script> tags after the <body> tags. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > var hello_trial = { type : 'html-keyboard-response' , stimulus : 'Hello world!' } </ script > </ html > Now that we have the trial defined we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the jsPsych.init function and specifying the timeline parameter. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > var hello_trial = { type : 'html-keyboard-response' , stimulus : 'Hello world!' } jsPsych . init ({ timeline : [ hello_trial ] }) </ script > </ html > Once you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).","title":"The Basics: Hello World"},{"location":"tutorials/hello-world/#jspsych-hello-world-experiment","text":"In the long tradition of \"Hello world!\" examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page.","title":"jsPsych \"Hello world\" experiment"},{"location":"tutorials/hello-world/#step-1-download-the-jspsych-library","text":"Start by downloading the jsPsych library. The most recent version can always be found on the GitHub releases page . Note: the image below shows version 4.2, but the process is the same for the most recent version.","title":"Step 1: Download the jsPsych library"},{"location":"tutorials/hello-world/#step-2-create-a-folder-to-store-your-experiment-files","text":"Create a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called jspsych-6.0.5 if using v6.0.5 of jsPsych) into the experiment folder. Here's what it looks like on a Windows machine:","title":"Step 2: Create a folder to store your experiment files"},{"location":"tutorials/hello-world/#step-3-create-a-new-html-file","text":"To edit jsPsych code you'll need a programming-friendly text editor. Some free options are: Atom (Windows, OSX, Linux) VSCode (Windows, OSX, Linux) Once you've got a text editor that you like, create a new file in the experiment folder called experiment.html","title":"Step 3: Create a new HTML file"},{"location":"tutorials/hello-world/#step-4-add-the-bare-minimum-html-code","text":"There's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document. <!DOCTYPE html> < html > < head > < title > My experiment </ title > </ head > < body ></ body > </ html > Add the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'.","title":"Step 4: Add the bare-minimum HTML code"},{"location":"tutorials/hello-world/#step-5-import-the-jspsych-library","text":"To use jsPsych, add a <script> tag to import the library. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > </ head > < body ></ body > </ html > You may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a <link> tag to the <head> section of the document. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > </ html >","title":"Step 5: Import the jsPsych library"},{"location":"tutorials/hello-world/#step-6-use-the-jspsych-html-keyboard-response-plugin-to-print-a-message","text":"For the demo, we want to show some text on the screen. This is exactly what the jspsych-html-keyboard-response plugin is designed to do. To use the plugin, we need to load it with a <script> tag. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > </ html > Once the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the html-keyboard-response plugin, we create a JavaScript object with the property type equal to 'html-keyboard-response' . Then we can specify the other parameters of the plugin in the same object. To add JavaScript code directly to the webpage we need to add a set of <script> tags after the <body> tags. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > var hello_trial = { type : 'html-keyboard-response' , stimulus : 'Hello world!' } </ script > </ html > Now that we have the trial defined we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the jsPsych.init function and specifying the timeline parameter. <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > var hello_trial = { type : 'html-keyboard-response' , stimulus : 'Hello world!' } jsPsych . init ({ timeline : [ hello_trial ] }) </ script > </ html > Once you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).","title":"Step 6: Use the jspsych-html-keyboard-response plugin to print a message"},{"location":"tutorials/rt-task/","text":"Summary of Tutorial Content \u00b6 This tutorial will work through the creation of a simple response time task. The task is to press one key for a blue colored circle and another key for an orange colored circle. Despite this simple task, the tutorial covers many of the key features of jsPsych, including: Using a plugin to create a standard trial. Combining plugins together to create new kinds of trials. Using timeline variables to maximize code reuse. Randomizing presentation order. Manipulating, filtering, and aggregating data. Using dynamic content to change the experiment parameters based on the subject's responses. Part 1: Creating a blank experiment \u00b6 Start by downloading jsPsych and setting up a folder to contain your experiment files. If you are unsure how to do this, follow steps 1-5 in the Hello World tutorial . At the end of step 5 in the Hello World tutorial, you should have an experiment page that looks like this: <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > </ html > This will be our starting point for building the rest of the experiment. Part 2: Display welcome message \u00b6 All jsPsych experiments are defined by a timeline. The timeline is an array that contains the set of trials we want to run in the experiment. We can start by defining the timeline array. var timeline = []; Let's greet the subject with a simple welcome message using the jspsych-html-keyboard-response plugin. First, we create a trial that uses the jspsych-html-keyboard-response plugin and contains a simple string to show the subject. var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; Next, we push the welcome trial to the timeline, which adds it to the end of the array. timeline . push ( welcome ); Finally, we tell jsPsych to run the experiment by calling the jsPsych.init() function and passing in the array that defines the experiment timeline. jsPsych . init ({ timeline : timeline }); The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html > Part 3: Show instructions \u00b6 We can use the same basic structure from part 2 to create a new trial that shows instructions to the subject. The only difference in this trial is that we will use HTML formatting to control how the instructions display. The trial definition looks like this: var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" }; Notice that the HTML includes <img> tags to display the images that the subject will be responding to. You'll need to download these image files. Right-click on each image below and select Save image as... . Put the images in a folder called img in the experiment folder you created in part 1. Don't forget to add the trial to the timeline: timeline . push ( instructions ); The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html > Part 4: Displaying stimuli and getting responses \u00b6 Creating trials to show the stimuli is conceptually the same as creating a trial to show instructions, except that now we are displaying an image instead of text or html. This means we need to use a different plugin: jspsych-image-keyboard-response. We need to start by loading this plugin by adding a <script> tag to the document. < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > For now, we will just show each image once. The path to the image file should be set as the stimulus parameter. We will also set the option for which keys the subject is allowed to use to respond ( choices ) so that only the 'f' and 'j' keys are valid responses. var blue_trial = { type : 'image-keyboard-response' , stimulus : 'img/blue.png' , choices : [ 'f' , 'j' ] }; var orange_trial = { type : 'image-keyboard-response' , stimulus : 'img/orange.png' , choices : [ 'f' , 'j' ] } As usual, we need to add the trials to the timeline. timeline . push ( blue_trial , orange_trial ); The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var blue_trial = { type : 'image-keyboard-response' , stimulus : 'img/blue.png' , choices : [ 'f' , 'j' ] }; var orange_trial = { type : 'image-keyboard-response' , stimulus : 'img/orange.png' , choices : [ 'f' , 'j' ] } timeline . push ( blue_trial , orange_trial ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html > Part 5: Timeline variables \u00b6 In the full experiment, we will want more than two trials. One way we could do this is to create many more objects that define trials and push them all onto the timeline, but there is a more efficient way: using timeline variables. The parameters for showing the blue and orange circle are very similar. The only difference is which image is displayed. Timeline variables allow us to define the procedure for showing the stimulus once, and then repeatedly use it with different variables. We'll see how, even in this relatively simple case, this can save us a lot of lines of code. To start, let's make an array that contains all the different trials we want to run in the test phase. There are only two for the experiment: blue trials and orange trials. var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; Instead of just showing the blue and orange circles, let's also set up the experiment to show a fixation cross (+) in between trials. We can define a trial to show the fixation cross for a fixed amount of time by using the trial_duration parameter of the html-keyboard-response plugin and setting the choices parameter to the special value jsPsych.NO_KEYS , which means that no responses will be accepted as a valid response and the trial will last however long the trial_duration parameter specifies. var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : 1000 , } To show the circles, we'll set up another trial with the html-keyboard-response plugin, but we'll use the function jsPsych.timelineVariable() to indicate that we want jsPsych to substitute the value of the parameter in from the timeline variables. var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } To link the variables that we declared in the test_stimuli array with the call to jsPsych.timelineVariable() we need to create a new timeline and set the timeline_variables property: var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli } We have to add the test_procedure to the main timeline array, but the fixation and test trial do not need to be added to timeline because they already exist on the test_procedure timeline. timeline . push ( test_procedure ); What happens when the experiment reaches the test procedure? jsPsych will run the test_procedure timeline one time for each entry in the test_stimuli array (twice, in this case). The first time through, jsPsych will substitute the timeline variables from the first array entry (blue image), and the second time through the second array entry will be used (orange image). Notice that the fixation trial occurs before both the orange and the blue circles, because the entire timeline of the test_procedure is repeated for each entry in the timeline_variables array. The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : 1000 , } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html > Part 6: Parameters for timelines with timeline variables \u00b6 Right now our experiment is a measly two trials long. Even worse is that the order of the stimuli is the same every time! When we use timeline variables, we get access to some very easy-to-use methods to randomize the order and repeat the trials. To randomize the order, simply set randomize_order: true on the object with the timeline_variables : var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true } We can also easily make the test phase longer by setting the repetitions parameter. This parameter controls how many times the experiment will loop through all of the entries in the timeline_variables array. For example, if we set repetitions: 5 , then the experiment will loop through the two entries in the timeline_variables 5 times, for a total of 10 test trials. var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : 1000 , } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html > Part 7: Using functions to generate parameters \u00b6 One aspect of the experiment that could be improved is the duration of the fixation cross. As the experiment stands right now, the timing of the circles appearing is very predictable. We can change that by using a different value for the trial_duration parameter in the fixation trial for each trial. But how can we do that and keep the simple code structure we have now where we only have to define the fixation trial once? One option would be to add another timeline variable, like \"fixation_duration\" and use that to control the timing. But another option is to specify the trial_duration parameter as a function. If a parameter is a function, jsPsych will execute the function every time the trial runs. That means that if the function returns different results probabilistically, we can get a different parameter value every time the trial runs. To do that here, we'll use one of the built-in randomization methods in jsPsych's randomization module . jsPsych.randomization.sampleWithoutReplacement() takes an array of items to sample from and generates a new array of length N by sampling without replacement. var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; } } In the code above, we replaced the trial_duration: 1000 parameter in fixation with a function. Inside the function, we take a sample from the array [250, 500, 750, 1000, 1250, 1500, 1750, 2000] of size 1 (second parameter to jsPsych.randomization.sampleWithoutReplacement ). The return value from calling jsPsych.randomization.sampleWithoutReplacement is an array of length 1, so we add the [0] selection at the end to get the value out of the array. The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html > Part 8: Displaying the data \u00b6 We have created a complete, if simple, experiment at this point, so let's take a look at the data being generated. jsPsych has a built-in function called jsPsych.data.displayData() that is useful for debugging your experiment. It will remove all of the information on the screen and replace it with the raw data collected so far. This isn't terribly useful when you are actually running an experiment, but it's nice for checking the data during development. We need the displayData function to execute when the experiment ends. One way to do this is to use the on_finish callback function . This function will automatically execute once all the trials in the experiment are finished. We can specify a function to call in the init method. jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); </ script > </ html > Part 9: Tagging trials with additional data \u00b6 All trials in jsPsych can be tagged with additional arbitrary data. This data will get stored alongside the data that the plugin normally generates, which allows experimenters to record properties of a trial along with the data from the trial. When might you use this feature? In this experiment, it would be nice to tag each trial with a circle as a test trial, so that the resulting data can be easily filtered to look at only the test trials. We also could tag the test trials with a property that indicates what the correct response should be (F for the blue circles, J for the orange). In our current code, we are using the timeline variables feature of jsPsych to choose which circle gets presented on a trial. Since we want to tag the trials differently based on which circle is presented, we need to add the tagging data to the test_stimuli array, and then use the jsPsych.timelineVariable() function to get the values and assign them to the data property of the trial. We start by modifying test_stimuli : var test_stimuli = [ { stimulus : \"img/blue.png\" , data : { test_part : 'test' , correct_response : 'f' }}, { stimulus : \"img/orange.png\" , data : { test_part : 'test' , correct_response : 'j' }} ]; Now we assign these values to the data parameter of the test trial. var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ) } Another kind of tagging that would be useful is to mark each fixation trial as such, to make removing the data from fixation trials easier. This is a simpler task, as we don't need to use the timeline variables feature. We can just add a data property to the fixation trial: var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; }, data : { test_part : 'fixation' } } The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" , data : { test_part : 'test' , correct_response : 'f' }}, { stimulus : \"img/orange.png\" , data : { test_part : 'test' , correct_response : 'j' }} ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; }, data : { test_part : 'fixation' } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ) } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); </ script > </ html > Part 10: Manipulating data during the experiment \u00b6 Now that the data from the test trials has a tag that describes the correct response, it would be easy to analyze the data after the fact (in R, for example) and calculate whether the participant responded correctly. But, we can also do this in jsPsych as the experiment runs to save time later and enable a limited set of data aggregation and analysis directly in the experiment code. To do this, we'll use the on_finish event of the test trial. We can assign a function to on_finish , and that function will receive an object containing the data generated by the trial. This object can be manipulated inside the function, and any changes made to the object will be stored in jsPsych's internal representation of the data. For this example, we'll calculate whether the subject responded correctly, and add a new correct property to the data object. var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ), on_finish : function ( data ){ data . correct = data . key_press == jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); } } The data.key_press value is a numeric key code indicating which key the subject pressed. The function jsPsych.pluginAPI.convertKeyCharacterToKeyCode converts the character representation of a key into the numeric representation (e.g., calling the function on the value 'f' generates the value 70 ). If this numeric value matches data.key_press then data.correct will be true . Otherwise, it will be false . The complete code so far \u00b6 <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" , data : { test_part : 'test' , correct_response : 'f' }}, { stimulus : \"img/orange.png\" , data : { test_part : 'test' , correct_response : 'j' }} ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; }, data : { test_part : 'fixation' } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ), on_finish : function ( data ){ data . correct = data . key_press == jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); } } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); </ script > </ html > Part 11: Data aggregation \u00b6 A new feature in jsPsych version 6.0 is a suite of data aggregation functions. You can now easily calculate things like mean response times for a selected set of trials. In this part, we'll use these functions to add a final trial to the experiment that tells the subject their accuracy and their mean response time for correct responses. We'll use the text plugin. Because the actual text that we want to display changes based on the subject's performance in the experiment, we need to use a function for the text parameter and return the desired text. var debrief_block = { type : \"html-keyboard-response\" , stimulus : function () { var trials = jsPsych . data . get (). filter ({ test_part : 'test' }); var correct_trials = trials . filter ({ correct : true }); var accuracy = Math . round ( correct_trials . count () / trials . count () * 100 ); var rt = Math . round ( correct_trials . select ( 'rt' ). mean ()); return \"<p>You responded correctly on \" + accuracy + \"% of the trials.</p>\" + \"<p>Your average response time was \" + rt + \"ms.</p>\" + \"<p>Press any key to complete the experiment. Thank you!</p>\" ; } }; timeline . push ( debrief_block ); To create the variable trials , we use jsPsych.data.get() which returns a jsPsych data collection containing all of the data from the experiment. We can then use .filter to select only the trials where test_part is 'test' (a benefit of tagging the trials in part 9). trials contains all of the data from the trials where a circle was shown. To get only the correct trials, we can use .filter() again to select only the trials from the trials data collection where the property correct is true . To calculate accuracy, we can use the .count() method to determine how many trials were correct and how many trials there were total. We also use Math.round() to avoid extra digits after the decimal. Finally, to calculate the mean response time on correct trials, we use the .select method on the correct_trials data collection to select only the 'rt' property of those trials. We can then use the .mean() method to find the mean of all the RT values. The final code \u00b6 This code is available in the examples folder in the jsPsych download. It is called demo-simple-rt-task.html . <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" , data : { test_part : 'test' , correct_response : 'f' } }, { stimulus : \"img/orange.png\" , data : { test_part : 'test' , correct_response : 'j' } } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; }, data : { test_part : 'fixation' } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ), on_finish : function ( data ){ data . correct = data . key_press == jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); }, } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , repetitions : 5 , randomize_order : true } timeline . push ( test_procedure ); /* define debrief */ var debrief_block = { type : \"html-keyboard-response\" , stimulus : function () { var trials = jsPsych . data . get (). filter ({ test_part : 'test' }); var correct_trials = trials . filter ({ correct : true }); var accuracy = Math . round ( correct_trials . count () / trials . count () * 100 ); var rt = Math . round ( correct_trials . select ( 'rt' ). mean ()); return \"<p>You responded correctly on \" + accuracy + \"% of the trials.</p>\" + \"<p>Your average response time was \" + rt + \"ms.</p>\" + \"<p>Press any key to complete the experiment. Thank you!</p>\" ; } }; timeline . push ( debrief_block ); /* start the experiment */ jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); </ script > </ html >","title":"Demo Experiment: Simple Reaction Time Task"},{"location":"tutorials/rt-task/#summary-of-tutorial-content","text":"This tutorial will work through the creation of a simple response time task. The task is to press one key for a blue colored circle and another key for an orange colored circle. Despite this simple task, the tutorial covers many of the key features of jsPsych, including: Using a plugin to create a standard trial. Combining plugins together to create new kinds of trials. Using timeline variables to maximize code reuse. Randomizing presentation order. Manipulating, filtering, and aggregating data. Using dynamic content to change the experiment parameters based on the subject's responses.","title":"Summary of Tutorial Content"},{"location":"tutorials/rt-task/#part-1-creating-a-blank-experiment","text":"Start by downloading jsPsych and setting up a folder to contain your experiment files. If you are unsure how to do this, follow steps 1-5 in the Hello World tutorial . At the end of step 5 in the Hello World tutorial, you should have an experiment page that looks like this: <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > </ html > This will be our starting point for building the rest of the experiment.","title":"Part 1: Creating a blank experiment"},{"location":"tutorials/rt-task/#part-2-display-welcome-message","text":"All jsPsych experiments are defined by a timeline. The timeline is an array that contains the set of trials we want to run in the experiment. We can start by defining the timeline array. var timeline = []; Let's greet the subject with a simple welcome message using the jspsych-html-keyboard-response plugin. First, we create a trial that uses the jspsych-html-keyboard-response plugin and contains a simple string to show the subject. var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; Next, we push the welcome trial to the timeline, which adds it to the end of the array. timeline . push ( welcome ); Finally, we tell jsPsych to run the experiment by calling the jsPsych.init() function and passing in the array that defines the experiment timeline. jsPsych . init ({ timeline : timeline });","title":"Part 2: Display welcome message"},{"location":"tutorials/rt-task/#the-complete-code-so-far","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-3-show-instructions","text":"We can use the same basic structure from part 2 to create a new trial that shows instructions to the subject. The only difference in this trial is that we will use HTML formatting to control how the instructions display. The trial definition looks like this: var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" }; Notice that the HTML includes <img> tags to display the images that the subject will be responding to. You'll need to download these image files. Right-click on each image below and select Save image as... . Put the images in a folder called img in the experiment folder you created in part 1. Don't forget to add the trial to the timeline: timeline . push ( instructions );","title":"Part 3: Show instructions"},{"location":"tutorials/rt-task/#the-complete-code-so-far_1","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-4-displaying-stimuli-and-getting-responses","text":"Creating trials to show the stimuli is conceptually the same as creating a trial to show instructions, except that now we are displaying an image instead of text or html. This means we need to use a different plugin: jspsych-image-keyboard-response. We need to start by loading this plugin by adding a <script> tag to the document. < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > For now, we will just show each image once. The path to the image file should be set as the stimulus parameter. We will also set the option for which keys the subject is allowed to use to respond ( choices ) so that only the 'f' and 'j' keys are valid responses. var blue_trial = { type : 'image-keyboard-response' , stimulus : 'img/blue.png' , choices : [ 'f' , 'j' ] }; var orange_trial = { type : 'image-keyboard-response' , stimulus : 'img/orange.png' , choices : [ 'f' , 'j' ] } As usual, we need to add the trials to the timeline. timeline . push ( blue_trial , orange_trial );","title":"Part 4: Displaying stimuli and getting responses"},{"location":"tutorials/rt-task/#the-complete-code-so-far_2","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var blue_trial = { type : 'image-keyboard-response' , stimulus : 'img/blue.png' , choices : [ 'f' , 'j' ] }; var orange_trial = { type : 'image-keyboard-response' , stimulus : 'img/orange.png' , choices : [ 'f' , 'j' ] } timeline . push ( blue_trial , orange_trial ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-5-timeline-variables","text":"In the full experiment, we will want more than two trials. One way we could do this is to create many more objects that define trials and push them all onto the timeline, but there is a more efficient way: using timeline variables. The parameters for showing the blue and orange circle are very similar. The only difference is which image is displayed. Timeline variables allow us to define the procedure for showing the stimulus once, and then repeatedly use it with different variables. We'll see how, even in this relatively simple case, this can save us a lot of lines of code. To start, let's make an array that contains all the different trials we want to run in the test phase. There are only two for the experiment: blue trials and orange trials. var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; Instead of just showing the blue and orange circles, let's also set up the experiment to show a fixation cross (+) in between trials. We can define a trial to show the fixation cross for a fixed amount of time by using the trial_duration parameter of the html-keyboard-response plugin and setting the choices parameter to the special value jsPsych.NO_KEYS , which means that no responses will be accepted as a valid response and the trial will last however long the trial_duration parameter specifies. var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : 1000 , } To show the circles, we'll set up another trial with the html-keyboard-response plugin, but we'll use the function jsPsych.timelineVariable() to indicate that we want jsPsych to substitute the value of the parameter in from the timeline variables. var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } To link the variables that we declared in the test_stimuli array with the call to jsPsych.timelineVariable() we need to create a new timeline and set the timeline_variables property: var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli } We have to add the test_procedure to the main timeline array, but the fixation and test trial do not need to be added to timeline because they already exist on the test_procedure timeline. timeline . push ( test_procedure ); What happens when the experiment reaches the test procedure? jsPsych will run the test_procedure timeline one time for each entry in the test_stimuli array (twice, in this case). The first time through, jsPsych will substitute the timeline variables from the first array entry (blue image), and the second time through the second array entry will be used (orange image). Notice that the fixation trial occurs before both the orange and the blue circles, because the entire timeline of the test_procedure is repeated for each entry in the timeline_variables array.","title":"Part 5: Timeline variables"},{"location":"tutorials/rt-task/#the-complete-code-so-far_3","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : 1000 , } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-6-parameters-for-timelines-with-timeline-variables","text":"Right now our experiment is a measly two trials long. Even worse is that the order of the stimuli is the same every time! When we use timeline variables, we get access to some very easy-to-use methods to randomize the order and repeat the trials. To randomize the order, simply set randomize_order: true on the object with the timeline_variables : var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true } We can also easily make the test phase longer by setting the repetitions parameter. This parameter controls how many times the experiment will loop through all of the entries in the timeline_variables array. For example, if we set repetitions: 5 , then the experiment will loop through the two entries in the timeline_variables 5 times, for a total of 10 test trials. var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 }","title":"Part 6: Parameters for timelines with timeline variables"},{"location":"tutorials/rt-task/#the-complete-code-so-far_4","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : 1000 , } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-7-using-functions-to-generate-parameters","text":"One aspect of the experiment that could be improved is the duration of the fixation cross. As the experiment stands right now, the timing of the circles appearing is very predictable. We can change that by using a different value for the trial_duration parameter in the fixation trial for each trial. But how can we do that and keep the simple code structure we have now where we only have to define the fixation trial once? One option would be to add another timeline variable, like \"fixation_duration\" and use that to control the timing. But another option is to specify the trial_duration parameter as a function. If a parameter is a function, jsPsych will execute the function every time the trial runs. That means that if the function returns different results probabilistically, we can get a different parameter value every time the trial runs. To do that here, we'll use one of the built-in randomization methods in jsPsych's randomization module . jsPsych.randomization.sampleWithoutReplacement() takes an array of items to sample from and generates a new array of length N by sampling without replacement. var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; } } In the code above, we replaced the trial_duration: 1000 parameter in fixation with a function. Inside the function, we take a sample from the array [250, 500, 750, 1000, 1250, 1500, 1750, 2000] of size 1 (second parameter to jsPsych.randomization.sampleWithoutReplacement ). The return value from calling jsPsych.randomization.sampleWithoutReplacement is an array of length 1, so we add the [0] selection at the end to get the value out of the array.","title":"Part 7: Using functions to generate parameters"},{"location":"tutorials/rt-task/#the-complete-code-so-far_5","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-8-displaying-the-data","text":"We have created a complete, if simple, experiment at this point, so let's take a look at the data being generated. jsPsych has a built-in function called jsPsych.data.displayData() that is useful for debugging your experiment. It will remove all of the information on the screen and replace it with the raw data collected so far. This isn't terribly useful when you are actually running an experiment, but it's nice for checking the data during development. We need the displayData function to execute when the experiment ends. One way to do this is to use the on_finish callback function . This function will automatically execute once all the trials in the experiment are finished. We can specify a function to call in the init method. jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } });","title":"Part 8: Displaying the data"},{"location":"tutorials/rt-task/#the-complete-code-so-far_6","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" }, { stimulus : \"img/orange.png\" } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ] } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-9-tagging-trials-with-additional-data","text":"All trials in jsPsych can be tagged with additional arbitrary data. This data will get stored alongside the data that the plugin normally generates, which allows experimenters to record properties of a trial along with the data from the trial. When might you use this feature? In this experiment, it would be nice to tag each trial with a circle as a test trial, so that the resulting data can be easily filtered to look at only the test trials. We also could tag the test trials with a property that indicates what the correct response should be (F for the blue circles, J for the orange). In our current code, we are using the timeline variables feature of jsPsych to choose which circle gets presented on a trial. Since we want to tag the trials differently based on which circle is presented, we need to add the tagging data to the test_stimuli array, and then use the jsPsych.timelineVariable() function to get the values and assign them to the data property of the trial. We start by modifying test_stimuli : var test_stimuli = [ { stimulus : \"img/blue.png\" , data : { test_part : 'test' , correct_response : 'f' }}, { stimulus : \"img/orange.png\" , data : { test_part : 'test' , correct_response : 'j' }} ]; Now we assign these values to the data parameter of the test trial. var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ) } Another kind of tagging that would be useful is to mark each fixation trial as such, to make removing the data from fixation trials easier. This is a simpler task, as we don't need to use the timeline variables feature. We can just add a data property to the fixation trial: var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; }, data : { test_part : 'fixation' } }","title":"Part 9: Tagging trials with additional data"},{"location":"tutorials/rt-task/#the-complete-code-so-far_7","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" , data : { test_part : 'test' , correct_response : 'f' }}, { stimulus : \"img/orange.png\" , data : { test_part : 'test' , correct_response : 'j' }} ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; }, data : { test_part : 'fixation' } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ) } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-10-manipulating-data-during-the-experiment","text":"Now that the data from the test trials has a tag that describes the correct response, it would be easy to analyze the data after the fact (in R, for example) and calculate whether the participant responded correctly. But, we can also do this in jsPsych as the experiment runs to save time later and enable a limited set of data aggregation and analysis directly in the experiment code. To do this, we'll use the on_finish event of the test trial. We can assign a function to on_finish , and that function will receive an object containing the data generated by the trial. This object can be manipulated inside the function, and any changes made to the object will be stored in jsPsych's internal representation of the data. For this example, we'll calculate whether the subject responded correctly, and add a new correct property to the data object. var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ), on_finish : function ( data ){ data . correct = data . key_press == jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); } } The data.key_press value is a numeric key code indicating which key the subject pressed. The function jsPsych.pluginAPI.convertKeyCharacterToKeyCode converts the character representation of a key into the numeric representation (e.g., calling the function on the value 'f' generates the value 70 ). If this numeric value matches data.key_press then data.correct will be true . Otherwise, it will be false .","title":"Part 10: Manipulating data during the experiment"},{"location":"tutorials/rt-task/#the-complete-code-so-far_8","text":"<!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" , data : { test_part : 'test' , correct_response : 'f' }}, { stimulus : \"img/orange.png\" , data : { test_part : 'test' , correct_response : 'j' }} ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; }, data : { test_part : 'fixation' } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ), on_finish : function ( data ){ data . correct = data . key_press == jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); } } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , randomize_order : true , repetitions : 5 } timeline . push ( test_procedure ); /* start the experiment */ jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); </ script > </ html >","title":"The complete code so far"},{"location":"tutorials/rt-task/#part-11-data-aggregation","text":"A new feature in jsPsych version 6.0 is a suite of data aggregation functions. You can now easily calculate things like mean response times for a selected set of trials. In this part, we'll use these functions to add a final trial to the experiment that tells the subject their accuracy and their mean response time for correct responses. We'll use the text plugin. Because the actual text that we want to display changes based on the subject's performance in the experiment, we need to use a function for the text parameter and return the desired text. var debrief_block = { type : \"html-keyboard-response\" , stimulus : function () { var trials = jsPsych . data . get (). filter ({ test_part : 'test' }); var correct_trials = trials . filter ({ correct : true }); var accuracy = Math . round ( correct_trials . count () / trials . count () * 100 ); var rt = Math . round ( correct_trials . select ( 'rt' ). mean ()); return \"<p>You responded correctly on \" + accuracy + \"% of the trials.</p>\" + \"<p>Your average response time was \" + rt + \"ms.</p>\" + \"<p>Press any key to complete the experiment. Thank you!</p>\" ; } }; timeline . push ( debrief_block ); To create the variable trials , we use jsPsych.data.get() which returns a jsPsych data collection containing all of the data from the experiment. We can then use .filter to select only the trials where test_part is 'test' (a benefit of tagging the trials in part 9). trials contains all of the data from the trials where a circle was shown. To get only the correct trials, we can use .filter() again to select only the trials from the trials data collection where the property correct is true . To calculate accuracy, we can use the .count() method to determine how many trials were correct and how many trials there were total. We also use Math.round() to avoid extra digits after the decimal. Finally, to calculate the mean response time on correct trials, we use the .select method on the correct_trials data collection to select only the 'rt' property of those trials. We can then use the .mean() method to find the mean of all the RT values.","title":"Part 11: Data aggregation"},{"location":"tutorials/rt-task/#the-final-code","text":"This code is available in the examples folder in the jsPsych download. It is called demo-simple-rt-task.html . <!DOCTYPE html> < html > < head > < title > My experiment </ title > < script src = \"jspsych-6.0.5/jspsych.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\" ></ script > < script src = \"jspsych-6.0.5/plugins/jspsych-image-keyboard-response.js\" ></ script > < link href = \"jspsych-6.0.5/css/jspsych.css\" rel = \"stylesheet\" type = \"text/css\" > </ head > < body ></ body > < script > /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome = { type : \"html-keyboard-response\" , stimulus : \"Welcome to the experiment. Press any key to begin.\" }; timeline . push ( welcome ); /* define instructions trial */ var instructions = { type : \"html-keyboard-response\" , stimulus : \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\" , post_trial_gap : 2000 }; timeline . push ( instructions ); /* test trials */ var test_stimuli = [ { stimulus : \"img/blue.png\" , data : { test_part : 'test' , correct_response : 'f' } }, { stimulus : \"img/orange.png\" , data : { test_part : 'test' , correct_response : 'j' } } ]; var fixation = { type : 'html-keyboard-response' , stimulus : '<div style=\"font-size:60px;\">+</div>' , choices : jsPsych . NO_KEYS , trial_duration : function (){ return jsPsych . randomization . sampleWithoutReplacement ([ 250 , 500 , 750 , 1000 , 1250 , 1500 , 1750 , 2000 ], 1 )[ 0 ]; }, data : { test_part : 'fixation' } } var test = { type : \"image-keyboard-response\" , stimulus : jsPsych . timelineVariable ( 'stimulus' ), choices : [ 'f' , 'j' ], data : jsPsych . timelineVariable ( 'data' ), on_finish : function ( data ){ data . correct = data . key_press == jsPsych . pluginAPI . convertKeyCharacterToKeyCode ( data . correct_response ); }, } var test_procedure = { timeline : [ fixation , test ], timeline_variables : test_stimuli , repetitions : 5 , randomize_order : true } timeline . push ( test_procedure ); /* define debrief */ var debrief_block = { type : \"html-keyboard-response\" , stimulus : function () { var trials = jsPsych . data . get (). filter ({ test_part : 'test' }); var correct_trials = trials . filter ({ correct : true }); var accuracy = Math . round ( correct_trials . count () / trials . count () * 100 ); var rt = Math . round ( correct_trials . select ( 'rt' ). mean ()); return \"<p>You responded correctly on \" + accuracy + \"% of the trials.</p>\" + \"<p>Your average response time was \" + rt + \"ms.</p>\" + \"<p>Press any key to complete the experiment. Thank you!</p>\" ; } }; timeline . push ( debrief_block ); /* start the experiment */ jsPsych . init ({ timeline : timeline , on_finish : function () { jsPsych . data . displayData (); } }); </ script > </ html >","title":"The final code"}]}